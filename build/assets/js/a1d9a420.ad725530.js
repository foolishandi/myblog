"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3699],{3905:(n,t,e)=>{e.d(t,{Zo:()=>a,kt:()=>b});var c=e(67294);function i(n,t,e){return t in n?Object.defineProperty(n,t,{value:e,enumerable:!0,configurable:!0,writable:!0}):n[t]=e,n}function o(n,t){var e=Object.keys(n);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(n);t&&(c=c.filter((function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable}))),e.push.apply(e,c)}return e}function r(n){for(var t=1;t<arguments.length;t++){var e=null!=arguments[t]?arguments[t]:{};t%2?o(Object(e),!0).forEach((function(t){i(n,t,e[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(e)):o(Object(e)).forEach((function(t){Object.defineProperty(n,t,Object.getOwnPropertyDescriptor(e,t))}))}return n}function v(n,t){if(null==n)return{};var e,c,i=function(n,t){if(null==n)return{};var e,c,i={},o=Object.keys(n);for(c=0;c<o.length;c++)e=o[c],t.indexOf(e)>=0||(i[e]=n[e]);return i}(n,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);for(c=0;c<o.length;c++)e=o[c],t.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(n,e)&&(i[e]=n[e])}return i}var s=c.createContext({}),d=function(n){var t=c.useContext(s),e=t;return n&&(e="function"==typeof n?n(t):r(r({},t),n)),e},a=function(n){var t=d(n.components);return c.createElement(s.Provider,{value:t},n.children)},u="mdxType",l={inlineCode:"code",wrapper:function(n){var t=n.children;return c.createElement(c.Fragment,{},t)}},f=c.forwardRef((function(n,t){var e=n.components,i=n.mdxType,o=n.originalType,s=n.parentName,a=v(n,["components","mdxType","originalType","parentName"]),u=d(e),f=i,b=u["".concat(s,".").concat(f)]||u[f]||l[f]||o;return e?c.createElement(b,r(r({ref:t},a),{},{components:e})):c.createElement(b,r({ref:t},a))}));function b(n,t){var e=arguments,i=t&&t.mdxType;if("string"==typeof n||i){var o=e.length,r=new Array(o);r[0]=f;var v={};for(var s in t)hasOwnProperty.call(t,s)&&(v[s]=t[s]);v.originalType=n,v[u]="string"==typeof n?n:i,r[1]=v;for(var d=2;d<o;d++)r[d]=e[d];return c.createElement.apply(null,r)}return c.createElement.apply(null,e)}f.displayName="MDXCreateElement"},70886:(n,t,e)=>{e.r(t),e.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>v,toc:()=>d});var c=e(87462),i=(e(67294),e(3905));const o={},r=void 0,v={unversionedId:"\u670d\u52a1\u5668\u7aef/c++/c++/algorithm",id:"version-1.0/\u670d\u52a1\u5668\u7aef/c++/c++/algorithm",title:"algorithm",description:"",source:"@site/versioned_docs/version-1.0/\u670d\u52a1\u5668\u7aef/c++/c++/algorithm.md",sourceDirName:"\u670d\u52a1\u5668\u7aef/c++/c++",slug:"/\u670d\u52a1\u5668\u7aef/c++/c++/algorithm",permalink:"/docs/\u670d\u52a1\u5668\u7aef/c++/c++/algorithm",draft:!1,editUrl:"https://github.com/foolishandi/myblog/tree/main/versioned_docs/version-1.0/\u670d\u52a1\u5668\u7aef/c++/c++/algorithm.md",tags:[],version:"1.0",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"oss",permalink:"/docs/web\u524d\u7aef/\u4e91\u670d\u52a1/\u963f\u91cc\u4e91/oss"},next:{title:"array",permalink:"/docs/\u670d\u52a1\u5668\u7aef/c++/c++/array"}},s={},d=[],a={toc:d};function u(n){let{components:t,...e}=n;return(0,i.kt)("wrapper",(0,c.Z)({},a,e,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c++"},'all_of \uff1a\u6240\u6709\u5143\u7d20\u662f\u5426\u90fd\n/* \u5224\u65ad\u8303\u56f4\u5185\u662f\u5426\u90fd\u6ee1\u8db3func */\nvoid test_all_of() {\n    std::vector<int> vc = {1, 3, 4, 5, 6};\n    bool rt = std::all_of(vc.begin(), vc.end(), [](int i){\n            return i != 0;\n        });\n    std::cout << "vc \u4e2d\u662f\u5426\u90fd\u6ca1\u67090\uff1a" << (rt ? "\u662f" : "\u5426") << std::endl;\n}\n\nany_of \uff1a\u6240\u6709\u5143\u7d20\u662f\u5426\u5b58\u5728\nvoid test_any_of() {\n    std::vector<int> vc = {1, 3, 4, 5, 6};\n    bool rt = std::any_of(vc.begin(), vc.end(), [](int i){\n        return i != 0;\n    });\n    std::cout << "vc \u4e2d\u662f\u5426\u5b58\u57280\uff1a" << (rt ? "\u5426" : "\u662f") << std::endl;\n}\n\n\nnone_of \uff1a\u662f\u5426\u90fd\u6ca1\u6709\u6ee1\u8db3\u6761\u4ef6\nvoid test_none_of() {\n    std::vector<int> vc = {1, 3, 14, 15, 6};\n    bool rt = std::none_of(vc.begin(), vc.end(), [](int i){\n        return i > 9;\n    });\n    std::cout << "vc \u4e2d\u662f\u5426\u90fd\u5927\u4e8e9\uff1a" << (rt ? "\u662f" : "\u5426") << std::endl;\n}\n\n\n\nfor_each\uff1a\u5c06\u81ea\u5b9a\u4e49\u51fd\u6570\u7528\u4e8e\u6307\u5b9a\u8303\u56f4\nvoid test_for_each() {\n    std::vector<int> vc = {1, 3, 14, 15, 6};\n    std::for_each(vc.begin(), vc.end(), [](int& i){\n        i += 2;\n    });\n    for(auto& i : vc)\n        std::cout << i << " ";\n    std::cout << std::endl; \n}\n\n\nfind \uff1a\u67e5\u627e\u6307\u5b9a\u8303\u56f4\u5185\u7684\u503c\nvoid test_find() {\n    std::vector<int> vc = {1, 3, 14, 15, 6};\n    auto i = std::find(vc.begin(), vc.end(), 3);\n    std::cout << *i; \n}\n\nfind_if \uff1a\u83b7\u53d6\u81ea\u5b9a\u4e49\u51fd\u6570\u67e5\u627e\u6307\u5b9a\u8303\u56f4\u5185\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\nvoid test_find_if() {\n    std::vector<int> vc = {1, 3, 14, 15, 6};\n    auto i = std::find_if(vc.begin(), vc.end(), [](int i){\n            return i > 4;\n        });\n    std::cout << *i; \n}\n\nadjacent_find\uff1a\u67e5\u627e\u8303\u56f4\u5185\u76f8\u7b49\u7684\u76f8\u90bb\u5143\u7d20\nvoid test_adjacent_find() {\n    std::vector<int> vc = {1, 3, 3, 15, 15, 8};\n    auto it = std::adjacent_find(vc.begin(), vc.end());\n    std::cout << *it; \n}\n\ncount\uff1a\u7edf\u8ba1\u8be5\u8303\u56f4\u5185\u51fa\u73b0\u7684\u6b21\u6570\nvoid test_count() {\n    std::vector<int> vc = {1, 3, 3, 15, 15, 8};\n    int it = std::count(vc.begin(), vc.end(), 8);\n    std::cout << it << std::endl; \n}\n\nequal\uff1a\u4e24\u4e2a\u8303\u56f4\u5185\u7684\u5143\u7d20\u662f\u5426\u76f8\u7b49\nvoid test_equal() {\n    std::vector<int> vc = {1, 3, 3, 15, 15, 8};\n    std::vector<int> vc1 = {1, 3, 3, 15, 15, 8};\n    bool it = std::equal(vc.begin(), vc.end(), vc1.begin());\n    std::cout << it << std::endl;\n}\n\nis_permutation\uff1a\u5224\u65ad\u8303\u56f4\u662f\u5426\u662f\u53e6\u4e00\u4e2a\u6392\u5217\u3010\u4e0e\u987a\u5e8f\u65e0\u5173\u3011\nvoid test_is_permutation() {\n    std::vector<int> vc = {1, 3, 3, 15, 15, 8};\n    std::vector<int> vc1 = {1, 3, 8, 15, 3, 15};\n    bool it = std::is_permutation(vc.begin(), vc.end(), vc1.begin());\n    std::cout << it << std::endl;\n}\n\nsearch\uff1a\u5b50\u5e8f\u5217\u7684\u641c\u7d22\u8303\u56f4\nvoid test_search () {\n    std::vector<int> vc = {1, 3, 3, 15, 15, 8};\n    std::vector<int> vc1 = {1, 3};\n    auto it = std::search (vc.begin(), vc.end(), vc1.begin(), vc1.end());\n    std::cout << "vc1\u5728vc\u4e2d\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\uff1a" << it - vc.begin() << std::endl;\n}\n\ncopy\uff1a\u590d\u5236\u6307\u5b9a\u8303\u56f4\u5143\u7d20\nvoid test_copy() {\n    std::vector<int> vc = {1, 3, 3, 15, 15, 8};\n    std::vector<int> vc1;\n    vc1.resize(vc.size());\n    std::copy(vc.begin(), vc.end(), vc1.begin());\n    for(auto& i:vc){\n        std::cout << i << std::endl;\n    }\n}\n\nmove\uff1a\u5143\u7d20\u79fb\u52a8\nvoid test_move() {\n    std::vector<int> vc = {1, 3, 3, 15, 15, 8};\n    std::vector<int> vc1;\n    std::vector<int> vc2;\n    vc2.resize(vc.size());\n    vc1.resize(vc.size());\n    std::move(vc.begin(), vc.end(), vc1.begin());\n    for(auto& i:vc1){\n        std::cout << i << " ";\n    }\n    std::cout << std::endl;\n    vc2 = std::move(vc1);\n    for(auto& i:vc2){\n        std::cout << i << " ";\n    }\n}\n\nswap\uff1a\u4ea4\u6362\u4e24\u4e2a\u5bf9\u8c61\u7684\u503c\ntemplate <class T> void swap ( T& a, T& b )\n{\n  T c(a); a=b; b=c;\n}\n\ntransform\uff1a\u5904\u7406\u6307\u5b9a\u8303\u56f4\u7684\u503c\nvoid test_transform() {\n    std::vector<int> vc = {1, 3, 3, 15, 15, 8};\n    std::vector<int> vc2;\n    vc2.resize(vc.size());\n    \n    std::transform(vc.begin(), vc.end(), vc2.begin(), [](int &i) {\n            return i*2;\n        });\n    for(auto& i:vc2){\n        std::cout << i << " ";\n    }\n    std::cout << std::endl;\n}\n\nreplace\uff1a\u66ff\u6362\u6307\u5b9a\u8303\u56f4\u5185\u7684\u503c\nvoid test_replace() {\n    std::vector<int> vc = {1, 3, 3, 15, 15, 8};\n\n    \n    std::replace(vc.begin(), vc.end(), 3, 20);\n    for(auto& i:vc){\n        std::cout << i << " ";\n    }\n    std::cout << std::endl;\n}\n\nfill\uff1a\u7528\u503c\u586b\u5145\nvoid test_fill() {\n    std::vector<int> vc = {1, 3, 3, 15, 15, 8};\n\n    \n    std::fill(vc.begin(), vc.begin()+3, 100);\n    for(auto& i:vc){\n        std::cout << i << " ";\n    }\n    std::cout << std::endl;\n}\n\n\ngenerate\uff1a\u751f\u6210\nvoid test_generate() {\n    std::srand(unsigned(std::time(0)));\n    std::vector<int> vc;\n    vc.resize(5);\n    \n    std::generate(vc.begin(), vc.end(), [](){\n            return (std::rand()%10);\n        });\n    for(auto& i:vc){\n        std::cout << i << " ";\n    }\n    std::cout << std::endl; \n}\n\nremove\uff1a\u5c06\u6307\u5b9a\u8303\u56f4\u7684\u6570\u503c\u79fb\u9664\uff0c\u9700\u8981\u4fee\u6539\u7d22\u5f15\nvoid test_remove() {\n    std::vector<int> vc = {1, 3, 3, 15, 15, 8};\n\n    \n    auto it = std::remove(vc.begin(), vc.end(), 3);\n    for(auto& i:vc){\n        std::cout << i << " ";\n    }\n    std::cout << std::endl;\n    vc.erase(it, vc.end()); // \u9700\u8981\u5220\u9664\u540e\u9762\u7684\u7d22\u5f15 \n    for(auto& i:vc){\n        std::cout << i << " ";\n    }\n}\n\n\nunique\uff1a\u5220\u9664\u91cd\u590d\u503c\nvoid test_unique() {\n    std::vector<int> vc = {1, 3, 3, 15, 15, 8};\n    auto it = std::unique(vc.begin(), vc.end());\n    \n    vc.erase(it, vc.end());\n    for(auto& i:vc){\n        std::cout << i << " ";\n    }\n} \n\nreverse\uff1a\u6307\u5b9a\u8303\u56f4\u53cd\u8f6c\nvoid test_reverse() {\n    std::vector<int> vc = {1, 3, 2, 9, 15, 8};\n    std::reverse(vc.begin(), vc.end());\n    \n    for(auto& i:vc){\n        std::cout << i << " ";\n    }\n} \n\nrotate\uff1a\u5c06\u6307\u5b9a\u8303\u56f4\u65cb\u8f6c\nvoid test_rotate() {\n    std::vector<int> vc = {1, 3, 2, 9, 15, 8};\n    \n    // \u5f00\u5934\u5230\u7b2c\u4e8c\u4e2a\u5f00\u59cb\u65cb\u8f6c   \n    std::rotate(vc.begin(), vc.begin()+2, vc.end());\n        \n    for(auto& i:vc){\n        std::cout << i << " ";\n    }\n}\n\nrandom_shuffle\uff1a\u968f\u673a\u6253\u4e71\nvoid test_random_shuffle() {\n    std::vector<int> vc = {1, 3, 2, 9, 15, 8};\n    \n    std::random_shuffle(vc.begin(), vc.end());\n        \n    for(auto& i:vc){\n        std::cout << i << " ";\n    }\n}\n\nsort\uff1a\u6392\u5e8f\nvoid test_sort() {\n    std::vector<int> vc = {1, 3, 2, 9, 15, 8};\n    \n    std::sort(vc.begin(), vc.end());\n        \n    for(auto& i:vc){\n        std::cout << i << " ";\n    }\n}\n\n\nmerge\uff1a\u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u7684\u5217\u8868\nvoid test_merge() {\n    std::vector<int> vc = {1, 3, 2, 9, 15, 8};\n    std::vector<int> vc2 = {1, 6, 2, 9, 14, 8};\n    std::vector<int> vc1;\n    vc1.resize(vc.size() + vc2.size());\n    std::sort(vc.begin(), vc.end());\n    std::sort(vc2.begin(), vc2.end());\n    std::merge(vc.begin(), vc.end(), vc2.begin(), vc2.end(), vc1.begin());\n    for(auto& i:vc1){\n        std::cout << i << " ";\n    }\n}\n\nincludes\uff1a\u662f\u5426\u5305\u542b\u5e8f\u5217\n\nvoid test_includes() {\n    std::vector<int> vc = {1, 3, 2, 9, 15, 8};\n    std::vector<int> vc2 = {1, 3, 2};\n\n    bool rt = std::includes(vc.begin(), vc.end(), vc2.begin(), vc2.end());\n    std::cout << "vc\u662f\u5426\u5305\u542bvc2" << rt << std::endl;\n}\n\n\nset_union\uff1a\u6c42\u4e24\u4e2a\u5e8f\u5217\u7684\u5e76\u96c6\nvoid test_set_union() {\n    std::vector<int> vc = {1, 3, 2, 9, 15, 8};\n    std::vector<int> vc2 = {1, 3, 2, 19, 11, 20};\n    std::vector<int> vc1;\n    vc1.resize(vc.size() + vc2.size());\n    \n    auto rt = std::set_union(vc.begin(), vc.end(), vc2.begin(), vc2.end(), vc1.begin());\n    vc1.resize(rt-vc1.begin());\n    \n    for(auto& i:vc1){\n        std::cout << i << " ";\n    }\n}\n\nset_intersection\uff1a\u6c42\u4e24\u4e2a\u96c6\u5408\u7684\u4ea4\u96c6\nvoid test_set_intersection () {\n    std::vector<int> vc = {1, 3, 2, 9, 15, 8};\n    std::vector<int> vc2 = {1, 3, 2, 19, 11, 20};\n    std::vector<int> vc1;\n    vc1.resize(vc.size() + vc2.size());\n    \n    auto rt = std::set_intersection (vc.begin(), vc.end(), vc2.begin(), vc2.end(), vc1.begin());\n    vc1.resize(rt-vc1.begin());\n    \n    for(auto& i:vc1){\n        std::cout << i << " ";\n    }\n}\n\nset_difference\uff1a\u6c42\u4e24\u4e2a\u5e8f\u5217\u7684\u5dee\u5f02\nvoid test_set_difference(){\n    std::vector<int> vc = {1, 3, 2, 9, 15, 8};\n    std::vector<int> vc2 = {1, 3, 2, 19, 11, 20};\n    std::vector<int> vc1;\n    vc1.resize(vc.size() + vc2.size());\n    \n    auto rt = std::set_difference(vc.begin(), vc.end(), vc2.begin(), vc2.end(), vc1.begin());\n    vc1.resize(rt-vc1.begin());\n    \n    for(auto& i:vc1){\n        std::cout << i << " ";\n    }\n}\n\npush_heap\uff1a\u5c06\u5143\u7d20\u63a8\u5165\u5806\u8303\u56f4\nvoid test_heap(){\n    std::vector<int> vc = {1, 3, 2, 9, 15, 8};\n    \n    std::make_heap(vc.begin(), vc.end());\n    std::cout << "heap top\uff1a" << vc.front() << std::endl;\n\n    std::pop_heap(vc.begin(), vc.end());\n    vc.pop_back();\n    std::cout << "pop after, heap top\uff1a" << vc.front() << std::endl;\n\n    \n    vc.push_back(300);\n    std::push_heap(vc.begin(), vc.end());\n    std::cout << "add after, heap top\uff1a" << vc.front() << std::endl;\n    \n    for(auto& i:vc) {\n        std::cout << i << " ";\n    }\n}\n\n\nmax\u3001min\uff1a\u5224\u65ad\u6700\u5927\u6216\u6700\u5c0f\nvoid test_min_max() {\n    std::cout << "min: " << std::min(4, 1) << std::endl;\n    std::cout << "max: " << std::max(4, 1) << std::endl;\n}\n\nminmax_element\uff1a\u83b7\u53d6\u5e8f\u5217\u4e2d\u7684\u6700\u5927\u6700\u5c0f\u5143\u7d20\nvoid test_minmax_element() {\n    std::vector<int> vc = {1, 3, 2, 9, 15, 8};\n    auto rt = std::minmax_element(vc.begin(), vc.end());\n    \n    std::cout << *rt.first << ", " << *rt.second << std::endl;\n}\n\nnext_permutation\uff1a\u5168\u6392\u5217\nvoid test_next_permutation() {\n    std::vector<int> vc = {1, 3, 2};\n    std::sort(vc.begin(), vc.end());\n    std::cout << "\u5168\u6392\u5217\\n"; \n    do {\n        std::cout << vc[0] << \' \' << vc[1] << \' \' << vc[2] << \'\\n\';\n    } while ( std::next_permutation(vc.begin(), vc.end()));\n}\n// 123\n// 132\n// 213\n// 231\n// 312\n// 321\n')))}u.isMDXComponent=!0}}]);