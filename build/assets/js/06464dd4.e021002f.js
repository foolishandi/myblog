"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5089],{3905:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>y});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var i=r.createContext({}),l=function(e){var n=r.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},m=function(e){var n=l(e.components);return r.createElement(i.Provider,{value:n},e.children)},u="mdxType",s={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,m=p(e,["components","mdxType","originalType","parentName"]),u=l(t),d=a,y=u["".concat(i,".").concat(d)]||u[d]||s[d]||o;return t?r.createElement(y,c(c({ref:n},m),{},{components:t})):r.createElement(y,c({ref:n},m))}));function y(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,c=new Array(o);c[0]=d;var p={};for(var i in n)hasOwnProperty.call(n,i)&&(p[i]=n[i]);p.originalType=e,p[u]="string"==typeof e?e:a,c[1]=p;for(var l=2;l<o;l++)c[l]=t[l];return r.createElement.apply(null,c)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},72633:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>c,default:()=>u,frontMatter:()=>o,metadata:()=>p,toc:()=>l});var r=t(87462),a=(t(67294),t(3905));const o={},c=void 0,p={unversionedId:"\u670d\u52a1\u5668\u7aef/c++/c++/map",id:"\u670d\u52a1\u5668\u7aef/c++/c++/map",title:"map",description:"C++ maps\u662f\u4e00\u79cd\u5173\u8054\u5f0f\u5bb9\u5668\uff0c\u5305\u542b\u201c\u5173\u952e\u5b57/\u503c\u201d\u5bf9",source:"@site/docs/\u670d\u52a1\u5668\u7aef/c++/c++/map.md",sourceDirName:"\u670d\u52a1\u5668\u7aef/c++/c++",slug:"/\u670d\u52a1\u5668\u7aef/c++/c++/map",permalink:"/docs/\u670d\u52a1\u5668\u7aef/c++/c++/map",draft:!1,editUrl:"https://github.com/foolishandi/myblog/tree/main/docs/\u670d\u52a1\u5668\u7aef/c++/c++/map.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"array",permalink:"/docs/\u670d\u52a1\u5668\u7aef/c++/c++/array"},next:{title:"set",permalink:"/docs/\u670d\u52a1\u5668\u7aef/c++/c++/set"}},i={},l=[],m={toc:l};function u(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"C++ maps\u662f\u4e00\u79cd\u5173\u8054\u5f0f\u5bb9\u5668\uff0c\u5305\u542b\u201c\u5173\u952e\u5b57/\u503c\u201d\u5bf9")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"map\u7684\u952e\u548c\u503c\u662f\u552f\u4e00\u7684\uff0c\u5982\u679c\u9700\u8981\u4e00\u4e2a\u952e\u5bf9\u5e94\u591a\u4e2a\u503c\uff0c\u5c31\u53ea\u80fd\u7528multimap\u3002\u53e6\u5916\uff0cC++11\u6807\u51c6\u65b0\u589e\u4e86unordered_map\uff0c\u4ee5\u6563\u5217\u4ee3\u66ffmap\u5185\u90e8\u7684\u7ea2\u9ed1\u6811\u5b9e\u73b0\uff0c\u4f7f\u5176\u53ef\u4ee5\u7528\u6765\u5904\u7406\u53ea\u6620\u5c04\u800c\u4e0d\u6309key\u6392\u5e8f\u7684\u9700\u6c42\uff0c\u901f\u5ea6\u6bd4map\u8981\u5feb\u5f97\u591a")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"map\u4f1a\u4ee5\u952e\u4ece\u5c0f\u5230\u5927\u7684\u987a\u5e8f\u81ea\u52a8\u6392\u5e8f")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c++"},"\n\n begin()         \u8fd4\u56de\u6307\u5411map\u5934\u90e8\u7684\u8fed\u4ee3\u5668\n\n clear(\uff09        \u5220\u9664\u6240\u6709\u5143\u7d20\n\n count()         \u8fd4\u56de\u6307\u5b9a\u5143\u7d20\u51fa\u73b0\u7684\u6b21\u6570, (\u5e2e\u52a9\u8bc4\u8bba\u533a\u7406\u89e3\uff1a \u56e0\u4e3akey\u503c\u4e0d\u4f1a\u91cd\u590d\uff0c\u6240\u4ee5\u53ea\u80fd\u662f1 or 0)\n\n empty()         \u5982\u679cmap\u4e3a\u7a7a\u5219\u8fd4\u56detrue\n\n end()           \u8fd4\u56de\u6307\u5411map\u672b\u5c3e\u7684\u8fed\u4ee3\u5668\n\n equal_range()   \u8fd4\u56de\u7279\u6b8a\u6761\u76ee\u7684\u8fed\u4ee3\u5668\u5bf9\n\n erase()         \u5220\u9664\u4e00\u4e2a\u5143\u7d20\n\n find()          \u67e5\u627e\u4e00\u4e2a\u5143\u7d20\n\n get_allocator() \u8fd4\u56demap\u7684\u914d\u7f6e\u5668\n\n insert()        \u63d2\u5165\u5143\u7d20\n\n key_comp()      \u8fd4\u56de\u6bd4\u8f83\u5143\u7d20key\u7684\u51fd\u6570\n\n lower_bound()   \u8fd4\u56de\u952e\u503c>=\u7ed9\u5b9a\u5143\u7d20\u7684\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\n\n max_size()      \u8fd4\u56de\u53ef\u4ee5\u5bb9\u7eb3\u7684\u6700\u5927\u5143\u7d20\u4e2a\u6570\n\n rbegin()        \u8fd4\u56de\u4e00\u4e2a\u6307\u5411map\u5c3e\u90e8\u7684\u9006\u5411\u8fed\u4ee3\u5668\n\n rend()          \u8fd4\u56de\u4e00\u4e2a\u6307\u5411map\u5934\u90e8\u7684\u9006\u5411\u8fed\u4ee3\u5668\n\n size()          \u8fd4\u56demap\u4e2d\u5143\u7d20\u7684\u4e2a\u6570\n\n swap()           \u4ea4\u6362\u4e24\u4e2amap\n\n upper_bound()    \u8fd4\u56de\u952e\u503c>\u7ed9\u5b9a\u5143\u7d20\u7684\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\n\n value_comp()     \u8fd4\u56de\u6bd4\u8f83\u5143\u7d20value\u7684\u51fd\u6570\n\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c++"},'#include <iostream>\n#include <map>  //map\n#include <string> //string\nusing namespace std;\nint main()\n{\n    // \u4ec5\u4ec5\u521d\u59cb\u5316\u952e\u65f6\uff0c\u503c\u9ed8\u8ba4\u4e3a0/\u201c\u201d\n    std::map<string, string> mymap{ {"STL\u6559\u7a0b","http://c.biancheng.net/java/"} };\n    //\u83b7\u53d6\u5df2\u5b58\u50a8\u952e\u503c\u5bf9\u4e2d\uff0c\u6307\u5b9a\u952e\u5bf9\u5e94\u7684\u503c\n    cout << mymap["STL\u6559\u7a0b"] << endl;\n \n    //\u5411 map \u5bb9\u5668\u6dfb\u52a0\u65b0\u952e\u503c\u5bf9\n    mymap["Python\u6559\u7a0b"] = "http://c.biancheng.net/python/";\n \n    //\u4fee\u6539 map \u5bb9\u5668\u5df2\u5b58\u50a8\u952e\u503c\u5bf9\u4e2d\uff0c\u6307\u5b9a\u952e\u5bf9\u5e94\u7684\u503c\n    mymap["STL\u6559\u7a0b"] = "http://c.biancheng.net/stl/";\n    // \u904d\u5386map\n    for (auto iter = mymap.begin(); iter != mymap.end(); ++iter) {\n        cout << iter->first << " " << iter->second << endl;\n    }\n   \n    return 0;\n}\n// \u7ed3\u679c\u4e3a\n// http://c.biancheng.net/java/\n// Python\u6559\u7a0b http://c.biancheng.net/python/\n// STL\u6559\u7a0b http://c.biancheng.net/stl/\n\n\n')))}u.isMDXComponent=!0}}]);