[{"title":"mdx博客示例","type":0,"sectionRef":"#","url":"/blog/mdx-blog-post","content":"md 文档与 jsx 混写记录，具体使用见：mdx 示例 提示 Use the power of React to create interactive blog posts. &lt;button onClick={() =&gt; alert(&quot;button clicked!&quot;)}&gt;Click me!&lt;/button&gt; Click me!","keywords":""},{"title":"初始化","type":0,"sectionRef":"#","url":"/blog/init","content":"Docusaurus blogging features are powered by the blog plugin. Simply add Markdown files (or folders) to the blog directory. Regular blog authors can be added to authors.yml. The blog post date can be extracted from filenames, such as: 2019-05-30-welcome.md2019-05-30-welcome/index.md A blog post folder can be convenient to co-locate blog post images: The blog supports tags as well! And if you don't want a blog: just delete this directory, and use blog: false in your Docusaurus config.","keywords":""},{"title":"mdx示例","type":0,"sectionRef":"#","url":"/blog/2021/08/26/mdx","content":"","keywords":""},{"title":"1.引入组件代码​","type":1,"pageTitle":"mdx示例","url":"/blog/2021/08/26/mdx#1引入组件代码","content":"直接引用组件代码 /src/pages/index import React from &quot;react&quot;; import clsx from &quot;clsx&quot;; import Link from &quot;@docusaurus/Link&quot;; import useDocusaurusContext from &quot;@docusaurus/useDocusaurusContext&quot;; import Layout from &quot;@theme/Layout&quot;; import HomepageFeatures from &quot;@site/src/components/HomepageFeatures&quot;; import styles from &quot;./index.module.css&quot;; // import SearchBarWrapper from &quot;../theme/SearchBar&quot;; function HomepageHeader() { const { siteConfig } = useDocusaurusContext(); return ( &lt;header className={clsx(&quot;hero hero--primary&quot;, styles.heroBanner)}&gt; &lt;div className=&quot;container&quot;&gt; &lt;h1 className=&quot;hero__title&quot;&gt;{siteConfig.title}&lt;/h1&gt; &lt;p className=&quot;hero__subtitle&quot;&gt;{siteConfig.tagline}&lt;/p&gt; &lt;div className={styles.buttons}&gt; &lt;Link className=&quot;button button--secondary button--lg&quot; to=&quot;/docs/intro&quot; &gt; JUST GONE FOR 5MIN ⏱️ &lt;/Link&gt; &lt;/div&gt; &lt;/div&gt; {/* &lt;SearchBarWrapper&gt;&lt;/SearchBarWrapper&gt; */} &lt;/header&gt; ); } export default function Home() { const { siteConfig } = useDocusaurusContext(); return ( &lt;Layout title={`Hello from ${siteConfig.title}`} description=&quot;Description will go into a meta tag in &lt;head /&gt;&quot; &gt; &lt;HomepageHeader /&gt; &lt;main&gt; &lt;HomepageFeatures /&gt; &lt;/main&gt; &lt;/Layout&gt; ); }  "},{"title":"2.混用 mdx​","type":1,"pageTitle":"mdx示例","url":"/blog/2021/08/26/mdx#2混用-mdx","content":"Markdown 与 jsx 混用 cs fdfgdfg fdsfs 一级引用 二级引用 三级引用 四级引用 五级引用 六级引用 //无序列表嵌套 123 abcbcdcde 465789 //有序列表嵌套 abcd abcdeabcdeabcde bcdecdef shaoliangdaima,danhangshiyong  "},{"title":"表格​","type":1,"pageTitle":"mdx示例","url":"/blog/2021/08/26/mdx#表格","content":"123\t234\t345abc\tbcd\tcde abc\tbcd\tcde abc\tbcd\tcde "},{"title":"tab 栏​","type":1,"pageTitle":"mdx示例","url":"/blog/2021/08/26/mdx#tab-栏","content":"AppleOrangeBanana This is an orange 🍊 WindowsmacOS Use Ctrl + C to copy. WindowsmacOSLinux I am Windows. "},{"title":"3.在线实时编辑器​","type":1,"pageTitle":"mdx示例","url":"/blog/2021/08/26/mdx#3在线实时编辑器","content":"实时编辑器 // highlight-next-line function Clock(props) { const [date, setDate] = useState(new Date()); useEffect(() =&gt; { var timerID = setInterval(() =&gt; tick(), 1000); return function cleanup() { clearInterval(timerID); }; }); function tick() { setDate(new Date()); } return ( &lt;div&gt; &lt;h2&gt;It is {date.toLocaleTimeString()}.&lt;/h2&gt; &lt;/div&gt; ); } // highlight-next-line function Clock(props) { const [date, setDate] = useState(new Date()); useEffect(() =&gt; { var timerID = setInterval(() =&gt; tick(), 1000); return function cleanup() { clearInterval(timerID); }; }); function tick() { setDate(new Date()); } return ( &lt;div&gt; &lt;h2&gt;It is {date.toLocaleTimeString()}.&lt;/h2&gt; &lt;/div&gt; ); } 结果 Loading... 实时编辑器 const project = &quot;Docusaurus&quot;; const Greeting = () =&gt; &lt;p&gt;Hello {project}!&lt;/p&gt;; function MyPlayground(props) { return ( &lt;div&gt; &lt;div onClick={() =&gt; alert(&quot;hey!&quot;)}&gt;Click me&lt;/div&gt; &lt;/div&gt; ); } render(&lt;MyPlayground /&gt;); const project = &quot;Docusaurus&quot;; const Greeting = () =&gt; &lt;p&gt;Hello {project}!&lt;/p&gt;; function MyPlayground(props) { return ( &lt;div&gt; &lt;div onClick={() =&gt; alert(&quot;hey!&quot;)}&gt;Click me&lt;/div&gt; &lt;/div&gt; ); } render(&lt;MyPlayground /&gt;); 结果 Loading... "},{"title":"4.美人鱼图​","type":1,"pageTitle":"mdx示例","url":"/blog/2021/08/26/mdx#4美人鱼图","content":""},{"title":"index","type":0,"sectionRef":"#","url":"/docs/前端技术栈/jquery/","content":"index 版本 https://cdn.bootcdn.net/ajax/libs/jquery/3.6.3/jquery.min.js","keywords":""},{"title":"bootstrap","type":0,"sectionRef":"#","url":"/docs/前端技术栈/bootstrap/","content":"bootstrap modal : 见页面测试","keywords":""},{"title":"文档教程","type":0,"sectionRef":"#","url":"/docs/前端技术栈/react/简介","content":"","keywords":""},{"title":"基本介绍​","type":1,"pageTitle":"文档教程","url":"/docs/前端技术栈/react/简介#基本介绍","content":""},{"title":"大版本更新​","type":1,"pageTitle":"文档教程","url":"/docs/前端技术栈/react/简介#大版本更新","content":""},{"title":"16.8​","type":1,"pageTitle":"文档教程","url":"/docs/前端技术栈/react/简介#168","content":"1.引入函数组件 hook 新特性 "},{"title":"目录","type":0,"sectionRef":"#","url":"/docs/前端技术栈/jquery/目录","content":"目录 jquery 自定义工具模板 (function ($) { $.fn.highLight = function (options) { var defaults = { color: &quot;red&quot;, &quot;background-color&quot;: &quot;yellow&quot; }; var opts = $.extend(defaults, options); $(this).css(opts); }; })(jQuery); import { Button } from &quot;antd&quot;; ··· $(&quot;#myDiv&quot;).highLight({ color: &quot;#fff&quot; }); ··· 见页面测试 cssTip 见页面测试","keywords":""},{"title":"合并行相关","type":0,"sectionRef":"#","url":"/docs/前端技术栈/react/antd/table/合并行相关","content":"","keywords":""},{"title":"合并行函数​","type":1,"pageTitle":"合并行相关","url":"/docs/前端技术栈/react/antd/table/合并行相关#合并行函数","content":"/* data:处理的数据 name:合并标记的字段 link:其他相关字段，可多个参数 */ function setListRowSpan(source, name, ...link) { const setRowSpan = (source, name, ...link) =&gt; { let linkHead = null; if (link &amp;&amp; link.length &gt; 0) { linkHead = link[0]; } let data = JSON.parse(JSON.stringify(source)); const rowSpan = `${name}RowSpan`; let titleRow = data[0]; // 合并行 titleRow[rowSpan] = 1; data.forEach((row, index) =&gt; { if (linkHead) row[name + linkHead] = row[name] + &quot;-&quot; + row[linkHead]; const nextRow = data[index + 1]; if (!nextRow) return; if (row[name] === nextRow[name]) { titleRow[rowSpan] += 1; nextRow[rowSpan] = 0; } else { titleRow = nextRow; // 修改指向 titleRow[rowSpan] = 1; } }); // console.log(data) if (linkHead &amp;&amp; link.length &gt; 1) { data = setRowSpan(data, name + linkHead, link.slice(1)); } return data; }; const dataList = setRowSpan(source, name, ...link); // 合并最后一次的数据 const res = setRowSpan(dataList, [name, ...link].join(&quot;&quot;)); return res; }  "},{"title":"column 使用​","type":1,"pageTitle":"合并行相关","url":"/docs/前端技术栈/react/antd/table/合并行相关#column-使用","content":"// 简单使用 const data=[{},···] setRowSpan(data,'title','name') //改变原数据对象 const columns = [ { title: &quot;风险类别&quot;, dataIndex: &quot;title&quot;, render: (text, row) =&gt; { return { children: text, props: { rowSpan: row.titleRowSpan, // 使用 }, }; }, }, ];  "},{"title":"防抖节流","type":0,"sectionRef":"#","url":"/docs/前端技术栈/react/hooks/常用自定义hook/防抖节流","content":"","keywords":""},{"title":"1.普通基本函数​","type":1,"pageTitle":"防抖节流","url":"/docs/前端技术栈/react/hooks/常用自定义hook/防抖节流#1普通基本函数","content":"// 节流 function throttle(func, ms) { let previous = 0; return function () { let now = Date.now(); let context = this; let args = arguments; if (now - previous &gt; ms) { func.apply(context, args); previous = now; } }; } // 防抖 function debounce(func, ms) { let timeout; return function () { let context = this; let args = arguments; if (timeout) clearTimeout(timeout); timeout = setTimeout(() =&gt; { func.apply(context, args); }, ms); }; }  "},{"title":"2.useDebounce​","type":1,"pageTitle":"防抖节流","url":"/docs/前端技术栈/react/hooks/常用自定义hook/防抖节流#2usedebounce","content":"import { useEffect, useRef } from &quot;react&quot;; const useDebounce = (fn, ms = 30, deps = []) =&gt; { let timeout = useRef(); useEffect(() =&gt; { if (timeout.current) clearTimeout(timeout.current); timeout.current = setTimeout(() =&gt; { fn(); }, ms); }, deps); const cancel = () =&gt; { clearTimeout(timeout.current); timeout = null; }; return [cancel]; }; export default useDebounce;  // ... import { useDebounce } from &quot;hooks&quot;; const Home = (props) =&gt; { const [a, setA] = useState(0); const [b, setB] = useState(0); const [cancel] = useDebounce( () =&gt; { setB(a); }, 2000, [a] ); const changeIpt = (e) =&gt; { setA(e.target.value); }; return ( &lt;div&gt; &lt;input type=&quot;text&quot; onChange={changeIpt} /&gt; {b} {a} &lt;/div&gt; ); };  "},{"title":"3.useThrottle​","type":1,"pageTitle":"防抖节流","url":"/docs/前端技术栈/react/hooks/常用自定义hook/防抖节流#3usethrottle","content":"import { useEffect, useRef, useState } from &quot;react&quot;; const useThrottle = (fn, ms = 30, deps = []) =&gt; { let previous = useRef(0); let [time, setTime] = useState(ms); useEffect(() =&gt; { let now = Date.now(); if (now - previous.current &gt; time) { fn(); previous.current = now; } }, deps); const cancel = () =&gt; { setTime(0); }; return [cancel]; }; export default useThrottle;  "},{"title":"useEventListener","type":0,"sectionRef":"#","url":"/docs/前端技术栈/react/hooks/常用自定义hook/useEventListener","content":"","keywords":""},{"title":"1.实现​","type":1,"pageTitle":"useEventListener","url":"/docs/前端技术栈/react/hooks/常用自定义hook/useEventListener#1实现","content":"import { useEffect, useRef } from &quot;react&quot;; const useEventListener = ( eventType = &quot;&quot;, listener = () =&gt; null, target = null, options = null ) =&gt; { const savedListener = useRef(); useEffect(() =&gt; { savedListener.current = listener; }, [listener]); useEffect(() =&gt; { if (!target?.addEventListener) return; const eventListener = (event) =&gt; savedListener.current(event); target.addEventListener(eventType, eventListener, options); return () =&gt; { target.removeEventListener(eventType, eventListener, options); }; }, [eventType, target, options]); }; export default useEventListener;  "},{"title":"2.使用​","type":1,"pageTitle":"useEventListener","url":"/docs/前端技术栈/react/hooks/常用自定义hook/useEventListener#2使用","content":"不需要从此 Hook 返回任何内容，因为我们只是侦听事件并运行处理程序函数传入作为参数。 现在，很容易将事件侦听器添加到我们的组件（例如以下组件）中，以检测 DOM 元素外部的点击。 如果用户单击对话框组件，则在此处关闭对话框组件。 import { useRef } from &quot;react&quot;; import ReactDOM from &quot;react-dom&quot;; import { useEventListener } from &quot;./hooks&quot;; const Dialog = ({ show = false, onClose = () =&gt; null }) =&gt; { const dialogRef = useRef(); // Event listener to close dialog on click outside element useEventListener( &quot;mousedown&quot;, (event) =&gt; { if (event.defaultPrevented) { return; // Do nothing if the event was already processed } if (dialogRef.current &amp;&amp; !dialogRef.current.contains(event.target)) { console.log(&quot;Click outside detected -&gt; closing dialog...&quot;); onClose(); } }, window ); return show ? ReactDOM.createPortal( &lt;div className=&quot;fixed inset-0 z-9999 flex items-center justify-center p-4 md:p-12 bg-blurred&quot;&gt; &lt;div className=&quot;relative bg-white rounded-md shadow-card max-h-full max-w-screen-sm w-full animate-zoom-in px-6 py-20&quot; ref={dialogRef} &gt; &lt;p className=&quot;text-center font-semibold text-4xl&quot;&gt; What's up{&quot; &quot;} &lt;span className=&quot;text-white bg-red-500 py-1 px-3 rounded-md mr-1&quot;&gt; YouTube &lt;/span&gt; ? &lt;/p&gt; &lt;/div&gt; &lt;/div&gt;, document.body ) : null; }; export default Dialog;  "},{"title":"useMediaQuery","type":0,"sectionRef":"#","url":"/docs/前端技术栈/react/hooks/常用自定义hook/useMediaQuery","content":"","keywords":""},{"title":"1.实现​","type":1,"pageTitle":"useMediaQuery","url":"/docs/前端技术栈/react/hooks/常用自定义hook/useMediaQuery#1实现","content":"import { useState, useCallback, useEffect } from 'react'; const useMediaQuery = (queries = [], values = [], defaultValue) =&gt; { const mediaQueryList = queries.map(q =&gt; window.matchMedia(q)); const getValue = useCallback(() =&gt; { const index = mediaQueryList.findIndex(mql =&gt; mql.matches); return typeof values[index] !== 'undefined' ? values[index] : defaultValue; }, [mediaQueryList, values, defaultValue]); const [value, setValue] = useState(getValue); useEffect(() =&gt; { const handler = () =&gt; setValue(getValue); mediaQueryList.forEach(mql =&gt; mql.addEventListener('change', handler)); return () =&gt; mediaQueryList.forEach(mql =&gt; mql.removeEventListener('change', handler)); }, [getValue, mediaQueryList]); return value; }; export default useMediaQuery;  "},{"title":"2.使用​","type":1,"pageTitle":"useMediaQuery","url":"/docs/前端技术栈/react/hooks/常用自定义hook/useMediaQuery#2使用","content":"添加一个媒体查询来检查设备是否允许用户悬停在元素上。这样，如果用户可以悬停或应用基本样式，就可以添加特定的不透明样式。 import { useMediaQuery } from &quot;./hooks&quot;; function App() { const canHover = useMediaQuery( // Media queries [&quot;(hover: hover)&quot;], // Values corresponding to the above media queries by array index [true], // Default value false ); const canHoverClass = &quot;opacity-0 hover:opacity-100 transition-opacity&quot;; const defaultClass = &quot;opacity-100&quot;; return ( &lt;div className={canHover ? canHoverClass : defaultClass}&gt;Hover me!&lt;/div&gt; ); } export default App;  "},{"title":"useFetch","type":0,"sectionRef":"#","url":"/docs/前端技术栈/react/hooks/常用自定义hook/useFetch","content":"","keywords":""},{"title":"1.实现​","type":1,"pageTitle":"useFetch","url":"/docs/前端技术栈/react/hooks/常用自定义hook/useFetch#1实现","content":"import { useState, useEffect } from &quot;react&quot;; const useFetch = (url = &quot;&quot;, options = null) =&gt; { const [data, setData] = useState(null); const [error, setError] = useState(null); const [loading, setLoading] = useState(false); useEffect(() =&gt; { let isMounted = true; setLoading(true); fetch(url, options) .then((res) =&gt; res.json()) .then((data) =&gt; { if (isMounted) { setData(data); setError(null); } }) .catch((error) =&gt; { if (isMounted) { setError(error); setData(null); } }) .finally(() =&gt; isMounted &amp;&amp; setLoading(false)); return () =&gt; (isMounted = false); }, [url, options]); return { loading, error, data }; }; export default useFetch;  "},{"title":"2.使用​","type":1,"pageTitle":"useFetch","url":"/docs/前端技术栈/react/hooks/常用自定义hook/useFetch#2使用","content":"import useFetch from &quot;./useFetch&quot;; const App = () =&gt; { const { loading, error, data = [], } = useFetch(&quot;https://hn.algolia.com/api/v1/search?query=react&quot;); if (error) return &lt;p&gt;Error!&lt;/p&gt;; if (loading) return &lt;p&gt;Loading...&lt;/p&gt;; return ( &lt;div&gt; &lt;ul&gt; {data?.hits?.map((item) =&gt; ( &lt;li key={item.objectID}&gt; &lt;a href={item.url}&gt;{item.title}&lt;/a&gt; &lt;/li&gt; ))} &lt;/ul&gt; &lt;/div&gt; ); };  "},{"title":"useLocalStorage","type":0,"sectionRef":"#","url":"/docs/前端技术栈/react/hooks/常用自定义hook/useLocalStorage","content":"","keywords":""},{"title":"1.实现​","type":1,"pageTitle":"useLocalStorage","url":"/docs/前端技术栈/react/hooks/常用自定义hook/useLocalStorage#1实现","content":"import { useState } from &quot;react&quot;; const useLocalStorage = (key = &quot;&quot;, initialValue = &quot;&quot;) =&gt; { const [state, setState] = useState(() =&gt; { try { const item = window.localStorage.getItem(key); return item ? JSON.parse(item) : initialValue; } catch (error) { return initialValue; } }); const setLocalStorageState = (newState) =&gt; { try { const newStateValue = typeof newState === &quot;function&quot; ? newState(state) : newState; setState(newStateValue); window.localStorage.setItem(key, JSON.stringify(newStateValue)); } catch (error) { console.error(`Unable to store new value for ${key} in localStorage.`); } }; return [state, setLocalStorageState]; }; export default useLocalStorage;  "},{"title":"2.使用​","type":1,"pageTitle":"useLocalStorage","url":"/docs/前端技术栈/react/hooks/常用自定义hook/useLocalStorage#2使用","content":"import { useLocalStorage } from &quot;./hooks&quot;; const defaultSettings = { notifications: &quot;weekly&quot;, }; function App() { const [appSettings, setAppSettings] = useLocalStorage( &quot;app-settings&quot;, defaultSettings ); return ( &lt;div className=&quot;h-full w-full flex flex-col justify-center items-center&quot;&gt; &lt;div className=&quot;flex items-center mb-8&quot;&gt; &lt;p className=&quot;font-medium text-lg mr-4&quot;&gt;Your application's settings:&lt;/p&gt; &lt;select value={appSettings.notifications} onChange={(e) =&gt; setAppSettings((settings) =&gt; ({ ...settings, notifications: e.target.value, })) } className=&quot;border border-gray-900 rounded py-2 px-4 &quot; &gt; &lt;option value=&quot;daily&quot;&gt;daily&lt;/option&gt; &lt;option value=&quot;weekly&quot;&gt;weekly&lt;/option&gt; &lt;option value=&quot;monthly&quot;&gt;monthly&lt;/option&gt; &lt;/select&gt; &lt;/div&gt; &lt;button onClick={() =&gt; setAppSettings(defaultSettings)} className=&quot;rounded-md shadow-md py-2 px-6 bg-red-500 text-white uppercase font-medium tracking-wide text-sm leading-8&quot; &gt; Reset settings &lt;/button&gt; &lt;/div&gt; ); } export default App;  "},{"title":"useOnceRender","type":0,"sectionRef":"#","url":"/docs/前端技术栈/react/hooks/常用自定义hook/useOnceRender","content":"","keywords":""},{"title":"1.实现​","type":1,"pageTitle":"useOnceRender","url":"/docs/前端技术栈/react/hooks/常用自定义hook/useOnceRender#1实现","content":"import { useState, useEffect } from &quot;react&quot;; const useOnceRender = (param) =&gt; { const [state, setState] = useState(param); useEffect(() =&gt; { setState(!param); }, []); return state; };  "},{"title":"基本结构","type":0,"sectionRef":"#","url":"/docs/前端技术栈/react/dva/基本结构","content":"","keywords":""},{"title":"1.入口配置​","type":1,"pageTitle":"基本结构","url":"/docs/前端技术栈/react/dva/基本结构#1入口配置","content":"import dva from &quot;dva&quot;; // 1. Initialize const app = dva(); // 2. Plugins // app.use({}); // 3. Model app.model(require(&quot;./models/example&quot;).default); // 4. Router app.router(require(&quot;./router&quot;).default); // 5. Start app.start(&quot;#root&quot;);  src/router.js import { Router, Route, Switch } from &quot;dva/router&quot;; import IndexPage from &quot;./routes/IndexPage&quot;; function RouterConfig({ history }) { return ( &lt;Router history={history}&gt; &lt;Switch&gt; &lt;Route path=&quot;/&quot; exact component={IndexPage} /&gt; &lt;/Switch&gt; &lt;/Router&gt; ); } export default RouterConfig;  "},{"title":"2.建立业务模型​","type":1,"pageTitle":"基本结构","url":"/docs/前端技术栈/react/dva/基本结构#2建立业务模型","content":"src/models.js 建立通用model; const initState = { name:'', uid:'', loading:false }; export default { namespace: &quot;example&quot;, state:JSON.parse(JSON.stringify(initState)), subscriptions: { setup({ dispatch, history }) {}, }, effects: { *fetch({ payload }, { call, put, select }) { const modelA = select(({ modelA }) =&gt; modelA); const state = select(({ example }) =&gt; example); const { a, b } = yield select(); yield put({ type: &quot;save&quot; }); }, }, *submit(action, { put, call, select }) { const formData = yield select((state) =&gt; { const buyModel = state.buy; const context = state.context; const { stock } = buyModel; return { uuid: context.uuid, market: stock &amp;&amp; stock.market, stockCode: stock &amp;&amp; stock.code, stockName: stock &amp;&amp; stock.name, price: String(buyModel.price), // 委托数量 entrustAmount: String(buyModel.count), totalBalance: buyModel.totalBalance, availableTzbBalance: buyModel.availableTzbBalance, availableDepositBalance: buyModel.availableDepositBalance, }; }); const result = yield call(post, &quot;/h5/ajax/trade/entrust_buy&quot;, formData, { loading: true, }); if (result.success) { toast({ type: &quot;success&quot;, content: &quot;委托已受理&quot;, }); // 成功之后再获取一次现价，并填入 // yield put({type: 'fetchQuotation', payload: stock}); yield put({ type: &quot;entrustNoChange&quot;, payload: result.result &amp;&amp; result.result.entrustNo, }); // 清空输入框内容 yield put({ type: &quot;searchQueryChange&quot;, value: &quot;&quot; }); } // 403时，需要验证密码再重新提交 if (!result.success &amp;&amp; result.resultCode === 403) { yield put({ type: &quot;checkPassword&quot;, payload: {} }); return; } // 失败之后也需要更新投资宝和保证金金额 if (result.result) { yield put({ type: &quot;balanceChange&quot;, payload: result.result }); } // 重新获取最新可撤单列表 yield put({ type: &quot;fetchRevockList&quot; }); // 返回的结果里面如果有uuid, 用新的uuid替换 if (result.uuid) { yield put({ type: &quot;context/updateUuid&quot;, payload: result.uuid }); //调用其他model中的方法 } }, reducers: { save(state, action) { return { ...state, ...action.payload }; }, merge(state, action) { return { ...state, ...action.payload }; }, resetAll(state,action){ return {...initState} }, entrustNoChange(state,action){ return ··· }， ··· }, };  "},{"title":"3.视图调用​","type":1,"pageTitle":"基本结构","url":"/docs/前端技术栈/react/dva/基本结构#3视图调用","content":"src/routes import React, { useEffect } from &quot;react&quot;; import { connect } from &quot;dva&quot;; import styles from &quot;./IndexPage.css&quot;; import { Router } from &quot;dva/router&quot;; function IndexPage(props) { const dispatch = (type, payload, namespace: &quot;example&quot;) =&gt; { return props.dispatch({ payload, type: `${namespace}/${type}`, }); }; useEffect(() =&gt; { dispacth(&quot;merge&quot;, { name: &quot;qq&quot; }); dispacth(&quot;merge&quot;, { name: &quot;qq&quot; }, &quot;addOrder&quot;); }, []); return ( &lt;div className={styles.normal}&gt; &lt;h1 className={styles.title}&gt;Yay! Welcome to dva!&lt;/h1&gt; &lt;div className={styles.welcome} /&gt; &lt;ul className={styles.list}&gt; &lt;li&gt; To get started, edit &lt;code&gt;src/index.js&lt;/code&gt; and save to reload. &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;https://github.com/dvajs/dva-docs/blob/master/v1/en-us/getting-started.md&quot;&gt; Getting Started &lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; ); } const selectStateMap = (state) =&gt; ({ example: state.example, ...state.content, }); export default connect(selectStateMap)(Router(IndexPage));  "},{"title":"index","type":0,"sectionRef":"#","url":"/docs/前端技术栈/react/fullcalendar/","content":"","keywords":""},{"title":"1.官网与简介​","type":1,"pageTitle":"index","url":"/docs/前端技术栈/react/fullcalendar/#1官网与简介","content":"fullcalendar.io/react fullcalendar.io/docs 几乎可以包含日历、日程、跨天计划等所有的需求，但是每日事项超出max 的 Event popover 缺少相关 api，这个浮窗事件不好控制，可以借助MutationObserver监听浮窗出现进行相关操作 "},{"title":"2.安装​","type":1,"pageTitle":"index","url":"/docs/前端技术栈/react/fullcalendar/#2安装","content":" npm install @fullcalendar/react @fullcalendar/core @fullcalendar/daygrid  "},{"title":"3.示例​","type":1,"pageTitle":"index","url":"/docs/前端技术栈/react/fullcalendar/#3示例","content":"import React, { useEffect, useRef, useState } from &quot;react&quot;; import FullCalendar from &quot;@fullcalendar/react&quot;; import dayGridPlugin from &quot;@fullcalendar/daygrid&quot;; import { CalendarApi } from &quot;@fullcalendar/core&quot;; export default function Fullcalendar() { const handleDateClick = (e: any) =&gt; { console.log(e); }; const calendar = useRef(null); useEffect(() =&gt; { // 选择需要观察变动的节点 const targetNode = document.getElementsByClassName( &quot;fc-view-harness fc-view-harness-active&quot; )[0]; // 观察器的配置（需要观察什么变动） const config = { childList: true }; // 当观察到变动时执行的回调函数 const callback = function (mutationsList: any, observer: any) { // Use traditional 'for loops' for IE 11 for (let mutation of mutationsList) { if (mutation.type === &quot;childList&quot;) { const addEle = mutation.addedNodes[0] as HTMLElement; if (addEle &amp;&amp; addEle.classList.contains(&quot;fc-popover&quot;)) { const date = addEle.getAttribute(&quot;data-date&quot;); const parentEle = document.querySelector( `td[data-date=&quot;${date}&quot;]` ) as HTMLElement; addEle.style.top = &quot;0&quot;; addEle.style.left = &quot;0&quot;; parentEle.style.position = &quot;relative&quot;; parentEle?.appendChild(addEle); } } } }; // 创建一个观察器实例并传入回调函数 const observer = new MutationObserver(callback); // 以上述配置开始观察目标节点 observer.observe(targetNode, config); return () =&gt; { // 之后，可停止观察 observer.disconnect(); }; }, []); return ( &lt;div style={{ margin: 20 }}&gt; &lt;FullCalendar ref={calendar} plugins={[dayGridPlugin]} // 头部展示 // headerToolbar={{ // // 默认显示当前年月 // left: &quot;title&quot;, // // 设置中间显示的内容 // // center: &quot;title&quot;, // // 右侧上一月，下一月，今天(逗号为紧相邻，空格为有间隙，不写哪个就不展示哪个按钮) // right: &quot;prev,next today&quot;, // }} // 设置可以编辑：拖动，缩放 // editable={true} initialView=&quot;dayGridMonth&quot; // 空白点击事件 // dateClick={handleDateClick} // 这个中文显示 // locale={locale} // 设置可丢弃 // droppable={true} // 事件数据 dayMaxEvents={5} eventContent={(e) =&gt; { // console.log((e.view as any).getCurrentData()); return e.event._def.title; }} moreLinkClassNames={&quot;test&quot;} moreLinkClick={(e: any) =&gt; { console.log(e); const events = e.allSegs.map((item: any) =&gt; item.event.toJSON()); //当前日期的所有事件 }} dayPopoverFormat={{ day: &quot;2-digit&quot;, month: &quot;2-digit&quot;, year: &quot;numeric&quot;, }} expandRows events={[ // display: 'background', { title: &quot;女神节&quot;, start: &quot;2023-04-14&quot;, end: &quot;2023-04-16&quot;, backgroundColor: &quot;green&quot;, id: &quot;1&quot;, textColor: &quot;white&quot;, cs: &quot;4554&quot;, }, { title: &quot;女神节&quot;, start: &quot;2023-04-14&quot;, end: &quot;2023-04-14&quot;, backgroundColor: &quot;green&quot;, id: &quot;2&quot;, textColor: &quot;white&quot;, }, { title: &quot;女神节&quot;, start: &quot;2023-04-14&quot;, end: &quot;2023-04-16&quot;, backgroundColor: &quot;green&quot;, id: &quot;23&quot;, textColor: &quot;white&quot;, }, { title: &quot;女神节&quot;, start: &quot;2023-04-14&quot;, end: &quot;2023-04-14&quot;, backgroundColor: &quot;green&quot;, id: &quot;233&quot;, textColor: &quot;white&quot;, }, { title: &quot;女神节&quot;, start: &quot;2023-04-14&quot;, end: &quot;2023-04-14&quot;, backgroundColor: &quot;green&quot;, id: &quot;2333&quot;, textColor: &quot;white&quot;, }, { title: &quot;女神节&quot;, start: &quot;2023-04-14&quot;, end: &quot;2023-04-16&quot;, backgroundColor: &quot;green&quot;, id: &quot;23333&quot;, textColor: &quot;white&quot;, }, { title: &quot;女神节2&quot;, start: &quot;2023-04-07&quot;, end: &quot;2023-04-09&quot;, backgroundColor: &quot;Orange&quot;, id: &quot;233333&quot;, textColor: &quot;white&quot;, }, { title: &quot;女神节1&quot;, start: &quot;2023-04-16&quot;, end: &quot;2023-04-20&quot;, backgroundColor: &quot;red&quot;, id: &quot;4&quot;, textColor: &quot;white&quot;, }, { title: &quot;99活动 甲乙丙&quot;, start: &quot;2023-04-14&quot;, end: &quot;2023-04-15&quot;, backgroundColor: &quot;blue&quot;, id: &quot;2&quot;, textColor: &quot;white&quot;, display: &quot;list-item&quot;, }, { title: &quot;99活动1&quot;, start: &quot;2023-04-14&quot;, end: &quot;2023-04-15&quot;, backgroundColor: &quot;blue&quot;, id: &quot;23333423&quot;, textColor: &quot;white&quot;, display: &quot;list-item&quot;, }, { title: &quot;99活动2&quot;, start: &quot;2023-04-14&quot;, end: &quot;2023-04-15&quot;, backgroundColor: &quot;blue&quot;, id: &quot;3&quot;, textColor: &quot;white&quot;, display: &quot;list-item&quot;, }, { title: &quot;99活动3&quot;, start: &quot;2023-04-14&quot;, end: &quot;2023-04-15&quot;, backgroundColor: &quot;blue&quot;, id: &quot;2333323&quot;, textColor: &quot;white&quot;, display: &quot;list-item&quot;, }, ]} /&gt; &lt;/div&gt; ); }  "},{"title":"usePageSize","type":0,"sectionRef":"#","url":"/docs/前端技术栈/react/hooks/常用自定义hook/usePageSize","content":"","keywords":""},{"title":"实现​","type":1,"pageTitle":"usePageSize","url":"/docs/前端技术栈/react/hooks/常用自定义hook/usePageSize#实现","content":"import React, { useState, useEffect } from &quot;react&quot;; const usePageSize = () =&gt; { // 浏览器的尺寸 默认设置为0； const [height, setHeight] = useState(0); const [width, setWidth] = useState(0); const resizeUpdate = (e) =&gt; { // 通过事件对象获取浏览器窗口的高度 let h = e.target.innerHeight; let w = e.target.innerWidth; setHeight(h); setWidth(w); }; useEffect(() =&gt; { // 页面刚加载完成后获取浏览器窗口的大小 let h = window.innerHeight; let w = window.innerWidth; setHeight(h); setHeight(w); // 页面变化时获取浏览器窗口的大小 window.addEventListener(&quot;resize&quot;, resizeUpdate); return () =&gt; { // 组件销毁时移除监听事件 window.removeEventListener(&quot;resize&quot;, resizeUpdate); }; }, []); return [height, width]; };  "},{"title":"使用​","type":1,"pageTitle":"usePageSize","url":"/docs/前端技术栈/react/hooks/常用自定义hook/usePageSize#使用","content":"const [height, width] = usePageSize();  "},{"title":"useScroll","type":0,"sectionRef":"#","url":"/docs/前端技术栈/react/hooks/常用自定义hook/useScroll","content":"","keywords":""},{"title":"1.实现​","type":1,"pageTitle":"useScroll","url":"/docs/前端技术栈/react/hooks/常用自定义hook/useScroll#1实现","content":"import { useState, useEffect } from &quot;react&quot;; const useScroll = (scrollRef) =&gt; { const [pos, setPos] = useState([0, 0]); useEffect(() =&gt; { function handleScroll(e) { setPos([scrollRef.current.scrollLeft, scrollRef.current.scrollTop]); } scrollRef.current.addEventListener(&quot;scroll&quot;, handleScroll, false); return () =&gt; { scrollRef.current.removeEventListener(&quot;scroll&quot;, handleScroll, false); }; }, []); return pos; }; export default useScroll;  "},{"title":"2.使用​","type":1,"pageTitle":"useScroll","url":"/docs/前端技术栈/react/hooks/常用自定义hook/useScroll#2使用","content":"import React, { useRef } from &quot;react&quot;; import { useScroll } from &quot;hooks&quot;; const Home = (props) =&gt; { const scrollRef = useRef(null); const [x, y] = useScroll(scrollRef); return ( &lt;div&gt; &lt;div ref={scrollRef}&gt; &lt;div className=&quot;innerBox&quot;&gt;&lt;/div&gt; &lt;/div&gt; &lt;div&gt; {x}, {y} &lt;/div&gt; &lt;/div&gt; ); };  "},{"title":"useTitle","type":0,"sectionRef":"#","url":"/docs/前端技术栈/react/hooks/常用自定义hook/useTitle","content":"","keywords":""},{"title":"1.实现​","type":1,"pageTitle":"useTitle","url":"/docs/前端技术栈/react/hooks/常用自定义hook/useTitle#1实现","content":"import { useEffect } from &quot;react&quot;; const useTitle = (title) =&gt; { useEffect(() =&gt; { document.title = title; }, []); return; }; export default useTitle;  "},{"title":"2.使用​","type":1,"pageTitle":"useTitle","url":"/docs/前端技术栈/react/hooks/常用自定义hook/useTitle#2使用","content":"const Home = () =&gt; { // ... useTitle(&quot;趣谈前端&quot;); return &lt;div&gt;home&lt;/div&gt;; };  "},{"title":"useUpdate","type":0,"sectionRef":"#","url":"/docs/前端技术栈/react/hooks/常用自定义hook/useUpdate","content":"","keywords":""},{"title":"1.实现​","type":1,"pageTitle":"useUpdate","url":"/docs/前端技术栈/react/hooks/常用自定义hook/useUpdate#1实现","content":"import { useState } from &quot;react&quot;; const useUpdate = () =&gt; { const [, setFlag] = useState(); const update = () =&gt; { setFlag(Date.now()); }; return update; }; export default useUpdate;  "},{"title":"2.使用​","type":1,"pageTitle":"useUpdate","url":"/docs/前端技术栈/react/hooks/常用自定义hook/useUpdate#2使用","content":"const Home = (props) =&gt; { // ... const update = useUpdate(); return ( &lt;div&gt; {Date.now()} &lt;div&gt; &lt;button onClick={update}&gt;update&lt;/button&gt; &lt;/div&gt; &lt;/div&gt; ); };  "},{"title":"useEffect","type":0,"sectionRef":"#","url":"/docs/前端技术栈/react/hooks/官方hook/useEffect","content":"","keywords":""},{"title":"1.使用​","type":1,"pageTitle":"useEffect","url":"/docs/前端技术栈/react/hooks/官方hook/useEffect#1使用","content":"useEffect(()=&gt;{ // 页面绘制**渲染后**做些事情，比如请求网络，操作dom dosomething() return()=&gt;{ // 相当于componentWillUnmount时机 dosomething() } },[]) //依赖数组，根据里面的值进行更新，如果没有数组参数，会每次更新，可能导致死循环  "},{"title":"2.useLayoutEffect​","type":1,"pageTitle":"useEffect","url":"/docs/前端技术栈/react/hooks/官方hook/useEffect#2uselayouteffect","content":"useLayoutEffect(()=&gt;{ // 它会在所有的 DOM 变更之后，再同步调用 effect。 // 可以使用它来读取 DOM 布局并同步触发重渲染。 dosomething() return()=&gt;{ // 相当于componentWillUnmount时机 dosomething() } },[]) //依赖数组，根据里面的值进行更新，如果没有数组参数，会每次更新，可能导致死循环  "},{"title":"3.异步使用async/await​","type":1,"pageTitle":"useEffect","url":"/docs/前端技术栈/react/hooks/官方hook/useEffect#3异步使用asyncawait","content":"注意：不能直接使用 useEffect(async ()=&gt;{},[]) 基本原因: useEffect第一个参数(fn)需返回的是清除副作用函数，但是async的返回是promise useEffect(() =&gt; { // 使用IIFE，或者自己用 async fn包装一下，再执行 (async function anyNameFunction() { await dosomething(); })(); }, []);    "},{"title":"跨组件相关 hook","type":0,"sectionRef":"#","url":"/docs/前端技术栈/react/hooks/官方hook/useContext","content":"","keywords":""},{"title":"1.useReducer：类 redux 的 hook​","type":1,"pageTitle":"跨组件相关 hook","url":"/docs/前端技术栈/react/hooks/官方hook/useContext#1usereducer类-redux-的-hook","content":"// 重置状态逻辑 function init(initialCount) { return { count: initialCount }; } function reducer(state, action) { switch (action.type) { case &quot;increment&quot;: return { count: state.count + 1 }; case &quot;decrement&quot;: return { count: state.count - 1 }; case &quot;reset&quot;: return init(action.payload); default: throw new Error(); } } function Counter({ initialCount }) { const [state, dispatch] = useReducer(reducer, initialCount, init); return ( &lt;&gt; Count: {state.count} &lt;button onClick={() =&gt; dispatch({ type: &quot;reset&quot;, payload: initialCount })} &gt; Reset &lt;/button&gt; &lt;button onClick={() =&gt; dispatch({ type: &quot;decrement&quot; })}&gt;-&lt;/button&gt; &lt;button onClick={() =&gt; dispatch({ type: &quot;increment&quot; })}&gt;+&lt;/button&gt; &lt;/&gt; ); }  "},{"title":"2.useContext:传递上下文状态​","type":1,"pageTitle":"跨组件相关 hook","url":"/docs/前端技术栈/react/hooks/官方hook/useContext#2usecontext传递上下文状态","content":"const themes = { light: { foreground: &quot;#000000&quot;, background: &quot;#eeeeee&quot;, }, dark: { foreground: &quot;#ffffff&quot;, background: &quot;#222222&quot;, }, }; const ThemeContext = React.createContext(themes.light); function App() { return ( &lt;ThemeContext.Provider value={themes.dark}&gt; &lt;Toolbar /&gt; &lt;/ThemeContext.Provider&gt; ); } function Toolbar(props) { return ( &lt;div&gt; &lt;ThemedButton /&gt; &lt;/div&gt; ); } function ThemedButton() { const theme = useContext(ThemeContext); return ( &lt;button style={{ background: theme.background, color: theme.foreground, }} &gt; I am styled by theme context! &lt;/button&gt; ); }  "},{"title":"3.简单模拟 redux​","type":1,"pageTitle":"跨组件相关 hook","url":"/docs/前端技术栈/react/hooks/官方hook/useContext#3简单模拟-redux","content":"爷爷 :state:{&quot;num1&quot;:0,&quot;num2&quot;:0,&quot;num3&quot;:0,&quot;render&quot;:&quot;&quot;} num1 + 2 儿子 孙子 num1 : 0 num2 : 0 num3 : 0 num1 + 1num2 + 1求和 import React, { useReducer } from &quot;react&quot;; import DemoContext from &quot;./DemoContext&quot;; import App2 from &quot;./App2&quot;; const App = (props = {}) =&gt; { const initialState = { num1: 0, num2: 0, num3: 0, render: &quot;&quot; }; const reducer = (state, action) =&gt; { // console.log('reducer' ,state,action) switch (action.type) { case &quot;num1Add&quot;: return Object.assign( {}, state, { num1: state.num1 + 1 }, { render: action.payload } ); case &quot;num2Add&quot;: return { ...state, render: action.payload, num2: state.num2 + 1, }; case &quot;num3Add&quot;: return { ...state, render: action.payload, num3: state.num1 + state.num2, }; case &quot;numAdd&quot;: return { ...state, render: action.payload, num1: state.num1 + 2, }; default: return state; } }; const [state, dispatch] = useReducer(reducer, initialState); return ( &lt;div style={{ backgroundColor: &quot;yellow&quot;, padding: 5 }}&gt; 爷爷 :&lt;span&gt;state:{JSON.stringify(state)}&lt;/span&gt; &lt;div&gt; &lt;button onClick={() =&gt; { dispatch({ type: &quot;numAdd&quot;, payload: &quot;爷爷render&quot; }); }} &gt; num1 + 2 &lt;/button&gt; &lt;/div&gt; {/* 传递状态 */} &lt;DemoContext.Provider value={{ state, dispatch }}&gt; &lt;App2&gt;&lt;/App2&gt; &lt;/DemoContext.Provider&gt; &lt;/div&gt; ); }; export default App;  "},{"title":"useMemo_useCallback","type":0,"sectionRef":"#","url":"/docs/前端技术栈/react/hooks/官方hook/useMemo_useCallback","content":"useMemo_useCallback","keywords":""},{"title":"react","type":0,"sectionRef":"#","url":"/docs/前端技术栈/react/hooks/react","content":"react 批量更新表单数据state const [value, setValue] = useState({ name: &quot;&quot;, email: &quot;&quot;, psw: &quot;&quot;, }); const handleChange = (e) =&gt; { setValue((prev) =&gt; ({ ...prev, [e.target.name]: e.target.value })); }; ... &lt;Input name=&quot;name&quot; value={value.name} onChange={handleChange}&gt;&lt;/Input&gt; ··· 点击此处见测试页面","keywords":""},{"title":"介绍","type":0,"sectionRef":"#","url":"/docs/前端技术栈/ts/介绍","content":"介绍 JavaScript 的超集，包括 es 标准以及强类型语言的实现! 备注 初步介绍","keywords":""},{"title":"简介","type":0,"sectionRef":"#","url":"/docs/前端技术栈/vue/简介","content":"","keywords":""},{"title":"1. 状态管理​","type":1,"pageTitle":"简介","url":"/docs/前端技术栈/vue/简介#1-状态管理","content":"vuex pinia "},{"title":"useState","type":0,"sectionRef":"#","url":"/docs/前端技术栈/react/hooks/官方hook/useState","content":"","keywords":""},{"title":"基本使用​","type":1,"pageTitle":"useState","url":"/docs/前端技术栈/react/hooks/官方hook/useState#基本使用","content":""},{"title":"1.创建​","type":1,"pageTitle":"useState","url":"/docs/前端技术栈/react/hooks/官方hook/useState#1创建","content":"const [state, setState] = useState(initialState); const [state, setState] = useState(() =&gt; { // 对props进行复杂逻辑处理 const initialState = handel(props); return initialState; });  "},{"title":"2.更新​","type":1,"pageTitle":"useState","url":"/docs/前端技术栈/react/hooks/官方hook/useState#2更新","content":"setState({...updatedValues}); // 通过旧状态更新 setState(prevState =&gt; { // 也可以使用 Object.assign return {...prevState, ...updatedValues}; });  "},{"title":"3.自定义相关hook​","type":1,"pageTitle":"useState","url":"/docs/前端技术栈/react/hooks/官方hook/useState#3自定义相关hook","content":"部分原理 : useRef可以在其.current上保存一个可变值对象，包括数据或者dom等节点 3.1获取旧值state​ // 定义 import { useRef, useEffect } from 'react'; // 记录旧值的公用hooks export default function usePrevious(value) { const ref = useRef(); useEffect(() =&gt; { ref.current = value; }); return ref.current; } // 使用 const [currentMarker, setCurrentMarker] = useState({}); // 当前激活的值 const prevMarkerRef = usePrevious(currentMarker); // 上一个激活的值  3.2模拟类组件的this.setState的回调hook​ // 定义 import { useEffect, useRef, useState } from 'react' const useCallBackState = (initState) =&gt; { const [state, setState] = useState(initState) const isUpdate = useRef() const setCallBackState = (state, cb) =&gt; { setState((preValue) =&gt; { isUpdate.current = cb return typeof state === 'function' ? state(preValue) : state }) } useEffect(() =&gt; { if (isUpdate.current) { // 不设置回调函数的话 isUpdate.current 是undefined,所以不会执行 isUpdate.current(state) } }, [state]) return [state, setCallBackState] } export default useCallBackState // 使用 const [state,setState]=useCallBackState(0) setState(5,(current)=&gt;{ 最新状态处理 handel(current); })  "},{"title":"useRef","type":0,"sectionRef":"#","url":"/docs/前端技术栈/react/hooks/官方hook/useRef","content":"","keywords":""},{"title":"1.useRef 与 useImperativeHandle​","type":1,"pageTitle":"useRef","url":"/docs/前端技术栈/react/hooks/官方hook/useRef#1useref-与-useimperativehandle","content":"获取input焦点改变子组件的div背景色 子组件 :  import React, { forwardRef } from &quot;react&quot;; // 子组件 function Child(props, ref) { const inputRef = React.useRef(); const divRef = React.useRef(); React.useImperativeHandle(ref, () =&gt; ({ focus: () =&gt; { inputRef.current.focus(); }, divChange: () =&gt; { divRef.current.style.backgroundColor = &quot;green&quot;; }, a() { console.log(&quot;a方法&quot;); }, })); return ( &lt;div style={{ backgroundColor: &quot;yellow&quot;, padding: 5 }} ref={divRef}&gt; 子组件 : &lt;input ref={inputRef} /&gt; &lt;/div&gt; ); } const FancyInput = forwardRef(Child); // 父组件 function App() { let inputRef = React.useRef(); function changeText() { console.log(inputRef); //{focus: ƒ, a: ƒ} inputRef.current.focus(); //input聚焦 inputRef.current.a(); } return ( &lt;div style={{ backgroundColor: &quot;rgba(0,0,0,.2)&quot;, padding: 5 }}&gt; &lt;div&gt; &lt;button onClick={() =&gt; { changeText(); }} &gt; 获取input焦点 &lt;/button&gt; &lt;button onClick={() =&gt; { inputRef.current.divChange(); }} &gt; 改变子组件的div背景色 &lt;/button&gt; &lt;/div&gt; &lt;FancyInput ref={inputRef} /&gt; &lt;/div&gt; ); } export default App;  "},{"title":"2.useRef 与 createRef​","type":1,"pageTitle":"useRef","url":"/docs/前端技术栈/react/hooks/官方hook/useRef#2useref-与-createref","content":" import React, { useState, useEffect, createRef, forwardRef } from &quot;react&quot;; const InputRef = ({ defaultValue, max }, ref) =&gt; { const [value, setvalue] = useState(defaultValue || &quot;&quot;); return ( &lt;div&gt; &lt;input ref={ref} value={value} onChange={(e) =&gt; { setvalue(e.target.value); }} /&gt; &lt;span onClick={() =&gt; { setvalue(max); }} &gt; 最大 &lt;/span&gt; &lt;/div&gt; ); }; // 函数组件转发 const Input = forwardRef(InputRef); export default function AsycList() { const [refArr, setRefArr] = useState([]); // ref数组 const [data, setData] = useState([]); // 获取的数据 // 模拟请求 const getRefArr = async () =&gt; { const { data } = await new Promise((resolve, reject) =&gt; { resolve({ data: [ { value: 23, }, { value: 22, }, { value: 2, }, ], }); }); setData(data); const arr = data.map(() =&gt; { return createRef(); }); setRefArr([...arr]); }; useEffect(() =&gt; { getRefArr(); }, []); return ( &lt;div style={{ backgroundColor: &quot;yellow&quot; }}&gt; {refArr?.map((item, index) =&gt; ( &lt;div key={JSON.stringify(data[index])}&gt; &lt;Input ref={item} defaultValue={data[index].value} max={data[index].value} &gt;&lt;/Input&gt; &lt;button onClick={() =&gt; console.log(item.current)}&gt;测试&lt;/button&gt; &lt;/div&gt; ))} &lt;/div&gt; ); }  "},{"title":"flex","type":0,"sectionRef":"#","url":"/docs/前端三大件/css/flex","content":"flex","keywords":""},{"title":"js原生修改css","type":0,"sectionRef":"#","url":"/docs/前端三大件/css/js原生修改css","content":"","keywords":""},{"title":"1.选择器直接修改​","type":1,"pageTitle":"js原生修改css","url":"/docs/前端三大件/css/js原生修改css#1选择器直接修改","content":"不能改伪元素样式 "},{"title":"2.修改样式表（示例）​","type":1,"pageTitle":"js原生修改css","url":"/docs/前端三大件/css/js原生修改css#2修改样式表示例","content":"插入一个位置最后的样式表，插入样式，可以修改伪元素 function insertCss(select, styles) { if (document.styleSheets.length === 0) { //如果没有style标签,则创建一个style标签 let style = document.createElement(&quot;style&quot;); document.head.appendChild(style); } let styleSheet = document.styleSheets[document.styleSheets.length - 1]; //如果有style 标签.则插入到最后一个style标签中 let str = select + &quot; {&quot;; //插入的内容必须是字符串,所以得把obj转化为字符串 for (let prop in styles) { str += prop.replace(/([A-Z])/g, function (item) { //使用正则把大写字母替换成 '-小写字母' return &quot;-&quot; + item.toLowerCase(); }) + &quot;:&quot; + styles[prop] + &quot;;&quot;; } str += &quot;}&quot;; styleSheet.insertRule(str, styleSheet.cssRules.length); //插入样式到最后一个style标签中的最后面 }  "},{"title":"单行文字容器省略","type":0,"sectionRef":"#","url":"/docs/前端三大件/css/单行文字容器省略","content":"","keywords":""},{"title":"1.css 实现​","type":1,"pageTitle":"单行文字容器省略","url":"/docs/前端三大件/css/单行文字容器省略#1css-实现","content":"// 文本超出两行显示省略号 注:如果设置了 弹性布局 display:flex; 那么下面的的css设置将不起作用 // 单行文本超出显示省略号 div { width: 300px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap; } // 多行行文本超出显示省略号，webkit浏览器使用 div { width: 300px; overflow:hidden; text-overflow:ellipsis; display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical; } //通用浏览器 // 文字容器样式设置： .text { width: 200px; position: relative; line-height: 1.4em; height: 2.8em; //倍数关系，即行数 overflow: hidden; } .text::after { background: linear-gradient(to right, rgba(255, 255, 255, 0), #ffffff 50%) repeat scroll 0 0 rgba(0, 0, 0, 0); bottom: 0; content: &quot;...&quot;; padding: 0 5px 1px 30px; position: absolute; right: 0; }  是分公司分公司是分公司分公司是分公司分公司是分公司分公司是分公司分公司是分公司分公司是分公司分公司是分公司分公司是分公司分公司是分公司分公司是分公司分公司是分公司分公司是分公司分公司 "},{"title":"2.react 组件​","type":1,"pageTitle":"单行文字容器省略","url":"/docs/前端三大件/css/单行文字容器省略#2react-组件","content":"支持 css 处理的时候，直接用 css,不支持的时候，通过 js 计算来处理显示文字 import React from &quot;react&quot;; export default class Ellipsis extends React.Component { static defaultProps = { line: 2, ellipsis: &quot;...&quot;, }; constructor(props) { super(props); let that = this; this.text = &quot;&quot;; this.setLineClamp = this.setLineClamp.bind(this); this.setLineNormal = this.setLineNormal.bind(this); this.clipText = this.clipText.bind(this); this.init = this.init.bind(this); } componentDidMount() { this.init(); } componentDidUpdate() { this.init(); } init() { if (&quot;webkitLineClamp&quot; in document.documentElement.style) { this.setLineClamp(); this.removeTpl(); } else { this.setLineNormal(); this.clipText(); } } removeTpl() { try { this.refs.ellip.removeChild(this.refs.getHeight); } catch (err) {} } setLineNormal() { Object.assign(this.refs.ellip.style, { &quot;word-break&quot;: &quot;break-all&quot;, &quot;white-space&quot;: &quot;normal&quot;, }); } setLineClamp() { Object.assign(this.refs.ellip.style, { overflow: &quot;hidden&quot;, display: &quot;-webkit-box&quot;, webkitBoxOrient: &quot;vertical&quot;, &quot;word-break&quot;: &quot;break-all&quot;, &quot;white-space&quot;: &quot;normal&quot;, webkitLineClamp: this.props.line, }); } clipText() { let { line, ellipsis, end = () =&gt; {} } = this.props; let ellip = this.refs.ellip; if (!this.h) { let getHeight = this.refs.getHeight; this.h = getHeight.offsetHeight; this.removeTpl(); } let getCountHeight = () =&gt; { return parseFloat(getComputedStyle(ellip)[&quot;height&quot;], 10); }; let init = true; if (!this.text) { this.text = ellip.textContent; } else { ellip.innerHTML = this.text; } let text = this.text; let clip = () =&gt; { let len = 0; while (Math.floor(getCountHeight() / this.h) &gt; line) { len += 1; text = text.slice(0, -1); ellip.innerHTML = text; if (!init) { ellip.innerHTML += ellipsis; } } return len; }; if (0 &lt; clip()) { ellip.innerHTML += ellipsis; init = false; clip(); } end(); } render() { let { children, className = &quot;&quot; } = this.props; return ( &lt;div ref=&quot;box&quot; className={className}&gt; &lt;div ref=&quot;ellip&quot;&gt; {children} &lt;span ref=&quot;getHeight&quot; style={{ visibility: &quot;hidden&quot; }}&gt; 好 &lt;/span&gt; &lt;/div&gt; &lt;/div&gt; ); } }  粉色防晒服刚收到的地对地导弹地对地导弹多大的粉色防晒服刚收到的地对地导弹地对地导弹多大的粉色防晒服刚收到的地对地导弹地对地导弹多大的粉色防晒服刚收到的地对地导弹地对地导弹多大的粉色防晒服刚收到的地对地导弹地对地导弹多大的好 "},{"title":"错误处理","type":0,"sectionRef":"#","url":"/docs/前端三大件/es6/错误处理","content":"","keywords":""},{"title":"初步预览​","type":1,"pageTitle":"错误处理","url":"/docs/前端三大件/es6/错误处理#初步预览","content":"处理异常方式\t说明try-catch\t可预见、可疑区域 window.onerror\t全局捕获 JavaScript 异常 window.addEventListener\t全局捕获静态资源异常 Promise catch\t捕获 Promise 异常，也可使用 unhandledrejection 进行全局捕获 vue errorHandler\t捕获 vue 异常 react 异常捕获\t捕获 react 异常 crossOrigin\t解决 JavaScript 脚本跨域 "},{"title":"1.错误原因​","type":1,"pageTitle":"错误处理","url":"/docs/前端三大件/es6/错误处理#1错误原因","content":"1、JavaScript 语法错误、代码异常 2、异步请求异常 3、静态资源加载异常 4、Promise 异常 5、跨域 6、崩溃与渲染异常 "},{"title":"2.错误处理方式​","type":1,"pageTitle":"错误处理","url":"/docs/前端三大件/es6/错误处理#2错误处理方式","content":""},{"title":"1、try-catch​","type":1,"pageTitle":"错误处理","url":"/docs/前端三大件/es6/错误处理#1try-catch","content":"try-catch 无法捕获语法错误和异步错误。 try { let name = &quot;leo&quot;; console.log(age); } catch (e) { console.log(&quot;捕获到异常：&quot;, e); } // 捕获到异常： ReferenceError: age is not defined  try { let name = 'leo; // 缺少一个单引号，属于语法错误，在开发阶段便提示出来 console.log(age); } catch(e) { console.log('捕获到异常：',e); } // Uncaught SyntaxError: Invalid or unexpected token  "},{"title":"2、window.onerror(同步异步都可捕获)​","type":1,"pageTitle":"错误处理","url":"/docs/前端三大件/es6/错误处理#2windowonerror同步异步都可捕获","content":"可以使用 window.onerror 对 JavaScript 运行错误时进行捕获。 无法捕获语法错误 window.onerror 最好写在所有 JavaScript 脚本前面，否则有可能捕获不到异常； window.onerror 无法捕获语法异常、静态资源异常、接口请求异常； window.onerror 主要用来捕获意料之外的异常，而 try-catch 则是用来捕获可预见的异常。 /** * message 错误信息 * source 出错文件 * lineNo 行号 * colNo 列号 * error Error对象（对象） */ window.onerror = function (message, source, lineNo, colNo, error) { console.log(&quot;捕获到异常：&quot;, { message, source, lineNo, colNo, error }); };  "},{"title":"3、window.addEventListener​","type":1,"pageTitle":"错误处理","url":"/docs/前端三大件/es6/错误处理#3windowaddeventlistener","content":"可以使用 window.addEventListener 对静态资源加载异常与接口请求异常进行捕获。 当一项资源（如图片或脚本）加载失败，加载资源的元素会触发一个 Event 接口的 error 事件，并执行该元素上的 onerror 处理函数。 由于网络请求异常不会事件冒泡，因此必须在捕获阶段将其捕捉到才行，但是这种方式虽然可以捕捉到网络请求的异常，但是无法判断状态码是 404 还是其他比如 500 等等，所以还需要配合服务端日志才进行排查分析才可以。 &lt;scritp&gt; window.addEventListener('error', (error) =&gt; { console.log('捕获到异常：', error); }, true) &lt;/script&gt; &lt;img src=&quot;../../assets/test.png&quot;&gt;  "},{"title":"4、Promise catch​","type":1,"pageTitle":"错误处理","url":"/docs/前端三大件/es6/错误处理#4promise-catch","content":"new Promise((resolve, reject) =&gt; { reject(&quot;执行失败！&quot;); }).catch((error) =&gt; { console.log(&quot;捕获到异常：&quot;, error); });  有时候我们在写 Promise 可能会漏掉 catch，所以建议在全局增加一个对 unhandledrejection 的监听，用来全局监听 Uncaught Promise Error。 添加 event.preventDefault(); 可以去掉控制台的异常显示信息。 window.addEventListener(&quot;unhandledrejection&quot;, function (e) { e.preventDefault(); console.log(&quot;捕获到异常：&quot;, e); }); new Promise((resolve, reject) =&gt; { reject(&quot;执行失败！&quot;); });  "},{"title":"5、vue errorHandler​","type":1,"pageTitle":"错误处理","url":"/docs/前端三大件/es6/错误处理#5vue-errorhandler","content":"Vue.config.errorHandler = (err, vm, info) =&gt; { console.error(err); console.error(vm); console.error(info); }; // 某个组件的 mounted const error = new Error(&quot;test error&quot;); error.code = -1; throw error;  "},{"title":"6、 react 异常捕获​","type":1,"pageTitle":"错误处理","url":"/docs/前端三大件/es6/错误处理#6-react-异常捕获","content":""},{"title":"7、跨域​","type":1,"pageTitle":"错误处理","url":"/docs/前端三大件/es6/错误处理#7跨域","content":"资源跨域可以为 script 标签添加 crossOrigin 属性。 &lt;script src=&quot;http://localhost:3000/main.js&quot; crossorigin&gt;&lt;/script&gt;  // 动态添加 const script = document.createElement(&quot;script&quot;); script.crossOrigin = &quot;anonymous&quot;; script.src = url; document.body.appendChild(script);  "},{"title":"3.react 错误边界(仅类组件)​","type":1,"pageTitle":"错误处理","url":"/docs/前端三大件/es6/错误处理#3react-错误边界仅类组件","content":"class ErrorBoundary extends React.Component { // 用于标识子组件是否产生错误 state = { hasError: false } // 只要这个错误边界组件包裹的后代组件发生错误，就会触发这个钩子，发生的错误信息会作为参数传入 static getDerivedStateFromError(error) { return { hasError: true } } componentDidCatch(error, errorInfo) { // 可以将错误日志上报给服务器 ... } render() { if (this.state.hasError) { // 可以自定义降级后的 UI 并渲染 return &lt;h1&gt;发生错误了...&lt;/h1&gt; } return this.props.children; } } // 然后就可以当做一个常规组件去使用 &lt;ErrorBoundary&gt; &lt;MyWidget /&gt; &lt;/ErrorBoundary&gt;  "},{"title":"vite配置","type":0,"sectionRef":"#","url":"/docs/前端技术栈/vue/配置","content":"","keywords":""},{"title":"1.package​","type":1,"pageTitle":"vite配置","url":"/docs/前端技术栈/vue/配置#1package","content":"{ &quot;name&quot;: &quot;newspublish&quot;, &quot;private&quot;: true, &quot;version&quot;: &quot;0.0.0&quot;, &quot;type&quot;: &quot;module&quot;, &quot;scripts&quot;: { &quot;dev&quot;: &quot;vite --mode development&quot;, &quot;build&quot;: &quot;vue-tsc &amp;&amp; vite build --mode production&quot;, &quot;preview&quot;: &quot;vite preview --mode development&quot;, &quot;ts&quot;: &quot;vue-tsc --noEmit&quot;, &quot;test&quot;: &quot;vitest --config ./vitest.config.ts&quot;, &quot;coverage&quot;: &quot;vitest --config ./vitest.config.ts run --coverage&quot;, &quot;db&quot;: &quot;json-server --watch --port 8080 --delay 2000 ./src/jsonServer/newsDB.json --static ./src/assets&quot; }, &quot;dependencies&quot;: { &quot;@ant-design/icons-vue&quot;: &quot;^6.1.0&quot;, &quot;ant-design-vue&quot;: &quot;^3.2.20&quot;, &quot;axios&quot;: &quot;^1.4.0&quot;, &quot;element-plus&quot;: &quot;^2.3.4&quot;, &quot;js-cookie&quot;: &quot;^3.0.5&quot;, &quot;json-server&quot;: &quot;^0.17.3&quot;, &quot;pinia&quot;: &quot;^2.0.36&quot;, &quot;pinia-plugin-persist&quot;: &quot;^1.0.0&quot;, &quot;postcss-preset-env&quot;: &quot;^8.3.2&quot;, &quot;store2&quot;: &quot;^2.14.2&quot;, &quot;unplugin-auto-import&quot;: &quot;^0.15.3&quot;, &quot;unplugin-vue-components&quot;: &quot;^0.24.1&quot;, &quot;vue&quot;: &quot;^3.2.47&quot;, &quot;vue-router&quot;: &quot;^4.2.0&quot; }, &quot;devDependencies&quot;: { &quot;@types/js-cookie&quot;: &quot;^3.0.3&quot;, &quot;@types/node&quot;: &quot;^20.1.3&quot;, &quot;@vitejs/plugin-vue&quot;: &quot;^4.1.0&quot;, &quot;less&quot;: &quot;^4.1.3&quot;, &quot;less-loader&quot;: &quot;^11.1.0&quot;, &quot;typescript&quot;: &quot;^5.0.2&quot;, &quot;vite&quot;: &quot;^4.3.2&quot;, &quot;vitest&quot;: &quot;^0.31.0&quot;, &quot;vue-tsc&quot;: &quot;^1.4.2&quot; }, &quot;description&quot;: &quot;This template should help get you started developing with Vue 3 and TypeScript in Vite. The template uses Vue 3 `&lt;script setup&gt;` SFCs, check out the [script setup docs](https://v3.vuejs.org/api/sfc-script-setup.html#sfc-script-setup) to learn more.&quot;, &quot;main&quot;: &quot;index.js&quot;, &quot;author&quot;: &quot;&quot;, &quot;license&quot;: &quot;ISC&quot; }  "},{"title":"2.tsconfig.json​","type":1,"pageTitle":"vite配置","url":"/docs/前端技术栈/vue/配置#2tsconfigjson","content":"{ &quot;compilerOptions&quot;: { // 将代码编译为最新版本的 JS &quot;target&quot;: &quot;ESNext&quot;, // 使用 ES Module 格式打包编译后的文件 &quot;module&quot;: &quot;ESNext&quot;, // 使用 Node 的模块解析策略 &quot;moduleResolution&quot;: &quot;node&quot;, // 引入 ES 最新特性和 DOM 接口的类型定义 &quot;lib&quot;: [&quot;ESNext&quot;, &quot;DOM&quot;, &quot;DOM.Iterable&quot;], // 跳过对 .d.ts 文件的类型检查 &quot;skipLibCheck&quot;: true, // 允许引入 JSON 文件 &quot;resolveJsonModule&quot;: true, // 要求所有文件都是 ES Module 模块。 &quot;isolatedModules&quot;: true, // 不输出文件,即编译后不会生成任何js文件 &quot;noEmit&quot;: true, // 保留原始的 JSX 代码，不进行编译 &quot;jsx&quot;: &quot;preserve&quot;, // 开启所有严格的类型检查 &quot;strict&quot;: true, // 报告未使用的局部变量的错误 &quot;noUnusedLocals&quot;: true, // 报告函数中未使用参数的错误 &quot;noUnusedParameters&quot;: true, // 确保switch语句中的任何非空情况都包含 &quot;noFallthroughCasesInSwitch&quot;: true, // 允许使用 import 引入使用 export = 导出的内容 &quot;esModuleInterop&quot;: true, // 允许使用js &quot;allowJs&quot;: true, // 查询的基础路径 &quot;baseUrl&quot;: &quot;.&quot;, // 路径映射,配合别名使用 &quot;paths&quot;: { &quot;@/*&quot;: [&quot;src/*&quot;], &quot;#/*&quot;: [&quot;types/*&quot;] }, &quot;types&quot;: [&quot;element-plus/global&quot;,&quot;node&quot;] }, // 需要检测的文件 &quot;include&quot;: [&quot;src/**/*.ts&quot;, &quot;src/**/*.d.ts&quot;, &quot;src/**/*.tsx&quot;, &quot;src/**/*.vue&quot;], // 为文件进行不同配置 &quot;references&quot;: [ { &quot;path&quot;: &quot;./tsconfig.node.json&quot; } ] }  "},{"title":"3.vite.config.ts​","type":1,"pageTitle":"vite配置","url":"/docs/前端技术栈/vue/配置#3viteconfigts","content":"import { defineConfig } from &quot;vite&quot;; import vue from &quot;@vitejs/plugin-vue&quot;; import Components from &quot;unplugin-vue-components/vite&quot;; import { AntDesignVueResolver, ElementPlusResolver, } from &quot;unplugin-vue-components/resolvers&quot;; import AutoImport from &quot;unplugin-auto-import/vite&quot;; // 这个path用到了上面安装的 @types/node import path from &quot;path&quot;; import postcssPresetEnv from &quot;postcss-preset-env&quot;; // https://vitejs.dev/config/ export default defineConfig({ plugins: [ vue(), AutoImport({ resolvers: [ElementPlusResolver()], }), Components({ resolvers: [AntDesignVueResolver(), ElementPlusResolver()], }), ], // 在这里进行配置别名 resolve: { alias: { // @代替src &quot;@&quot;: path.resolve(&quot;./src&quot;), // #代替types &quot;#&quot;: path.resolve(&quot;./types&quot;), }, }, css: { modules: { // 转换类名（camelCase为驼峰、camelCaseOnly只为驼峰其他都被替换、 // dashes为中划线、dashesOnly为只能是中划线） localsConvention: &quot;dashes&quot;, // 设置样式是否是局部的 local(默认)生成hash，global全局样式 scopeBehaviour: &quot;local&quot;, // 设置样式命名方式 // generateScopedName:&quot;[hash:5]_[name]_local&quot; generateScopedName: (name, filename, css) =&gt; { return `${name}${filename}${css}`; }, // 默认类名+其他字符串（文件名、随机）加入到hash生成中 hashPrefix: &quot;myPro&quot;, // 不解析该文件样式名，一般用于引入第三方 globalModulePaths: [/base.module.css/g], }, // 预处理器（常用） preprocessorOptions: { // 整个配置会再less执行的时候当作参数提交执行lessc,所以怎么配置看less文档 less: { //可以使用 100/2px --math=&quot;always&quot; math: &quot;always&quot;, // 定义全局的样式变量 globalVars: {}, // 可以用来导入全局变量文件（常用） additionalData: `@import '@/styles/base.less';`, //开启css映像索引，生产环境定位问题文件 sourceMap: true, javascriptEnabled: true, }, }, postcss: { // 设置css后处理，类似js中babel，兼容低版本页面。加载默认配置 plugins: [postcssPresetEnv({ browsers: &quot;last 2 versions&quot; })], }, }, build: { // rollup打包配置，具体看rollupAPI rollupOptions: { output: { assetFileNames: &quot;[hash]-[name][extname]&quot;, }, }, // 4kb以下去打包成base64 assetsInlineLimit: 4096, // 指定输出路径 outDir: &quot;dist&quot;, //指定静态资源路径 assetsDir: &quot;static&quot;, //打包前清空文件，默认true emptyOutDir: true, }, define: { &quot;process.env&quot;: process.env, }, });  "},{"title":"4..env.development​","type":1,"pageTitle":"vite配置","url":"/docs/前端技术栈/vue/配置#4envdevelopment","content":"NODE_ENV=dev VITE_APP_API_URL=http://localhost:8080/  "},{"title":"5.typing.d.ts​","type":1,"pageTitle":"vite配置","url":"/docs/前端技术栈/vue/配置#5typingdts","content":"import { ComponentCustomProperties } from &quot;@vue/runtime-core&quot;; import { MessageApi } from &quot;ant-design-vue/lib/message&quot;; import { StoreType } from &quot;store2&quot;; // 声明 window 上自定义属性，如事件总线 declare interface Window { eventBus: any; } // 声明 .vue 文件 declare module '*.vue' { import { DefineComponent } from 'vue'; const component: DefineComponent&lt;object, object, any&gt;; export default component; } // ts声明全局参数,不然this会报不存在属性 declare module '@vue/runtime-core' { interface ComponentCustomProperties { $message: MessageApi; // 这里填类型 $localStore:StoreType } }  "},{"title":"6.main.ts​","type":1,"pageTitle":"vite配置","url":"/docs/前端技术栈/vue/配置#6maints","content":"import { createApp } from &quot;vue&quot;; import &quot;./style.css&quot;; import { createPinia } from &quot;pinia&quot;; import piniaPluginPersist from &quot;pinia-plugin-persist&quot;; import router from &quot;./router&quot;; import AppVue from &quot;./App.vue&quot;; import &quot;ant-design-vue/dist/antd.css&quot;; import &quot;element-plus/dist/index.css&quot;; import { Button, message } from &quot;ant-design-vue&quot;; import &quot;./utils/ajaxUtil&quot;; import localStore from &quot;store2&quot;; const pinia = createPinia(); pinia.use(piniaPluginPersist); const app = createApp(AppVue); app.use(router); app.use(pinia); app.use(Button); message.config({ maxCount: 1, }); app.config.globalProperties.$message = message; app.config.globalProperties.$localStore = localStore; app.config.globalProperties.$testMsg = &quot;testMsg&quot;; app.mount(&quot;#app&quot;);  "},{"title":"7.routes/index.ts​","type":1,"pageTitle":"vite配置","url":"/docs/前端技术栈/vue/配置#7routesindexts","content":"import { createRouter, createWebHashHistory } from &quot;vue-router&quot;; import routes from &quot;./routes&quot;; import { message } from &quot;ant-design-vue&quot;; const router = createRouter({ history: createWebHashHistory(), routes, }); //全局前置路由守卫————初始化的时候被调用、每次路由切换之前被调用 router.beforeEach((to, from, next) =&gt; { localStorage.setItem(&quot;path&quot;, to.path); const hide = message.loading('加载中···'); //如果路由需要跳转 if (to.meta.isAuth) { //判断 如果user-status本地存储是login的时候，可以进去 if (localStorage.getItem(&quot;user-status&quot;) === &quot;login&quot;) { hide(); next(); //放行 } else { // next(); //放行 alert(&quot;抱歉，您无权限查看！&quot;); next(&quot;/login&quot;); //放行 setTimeout(() =&gt; { hide(); location.reload(); }, 1000); // location.reload(); } } else { // 否则，放行 next(); } }); //全局后置路由守卫————初始化的时候被调用、每次路由切换之后被调用 router.afterEach((to, from) =&gt; { (document as any).title = to.meta.title || &quot;默认名&quot;; //修改网页的title }); export default router;  "},{"title":"8.useStore.ts​","type":1,"pageTitle":"vite配置","url":"/docs/前端技术栈/vue/配置#8usestorets","content":"import { defineStore } from &quot;pinia&quot;; export const useNoiseStatistics = defineStore({ id: &quot;counter&quot;, state: () =&gt; ({}), getters: {}, actions: {}, });  "},{"title":"9.example​","type":1,"pageTitle":"vite配置","url":"/docs/前端技术栈/vue/配置#9example","content":""},{"title":"9.1 no setup​","type":1,"pageTitle":"vite配置","url":"/docs/前端技术栈/vue/配置#91-no-setup","content":"no setup &lt;script lang=&quot;ts&quot;&gt; import { useMainStore } from &quot;@/store/useMainStore&quot;; import { mapWritableState, mapActions } from &quot;pinia&quot;; export default { setup() {}, data: () =&gt; ({ testData: &quot;test&quot;, }), computed: { ...mapWritableState(useMainStore, { hello2: &quot;helloPinia&quot;, name2: &quot;name&quot;, loading: &quot;loading&quot;, newName: &quot;newName&quot;, }), hello() { return this.hello2; }, }, methods: { ...mapActions(useMainStore, [&quot;changeHello2&quot;, &quot;changeHello&quot;, &quot;setUser&quot;]), changePinia() { this.hello2 = &quot;test&quot;; }, actionTest1() { this.changeHello(); }, actionTest2() { this.changeHello2(); }, reset() { // this.$s }, }, }; &lt;/script&gt; &lt;template&gt; &lt;hr /&gt; &lt;div&gt;异步测试&lt;/div&gt; &lt;p&gt;{{ testData }}&lt;/p&gt; &lt;hr /&gt; &lt;div class=&quot;pinia&quot;&gt; &lt;p&gt;setup:{{ hello }}&lt;/p&gt; &lt;p&gt;nosetup:{{ hello2 }}&lt;/p&gt; &lt;p&gt;async set:{{ name2 || &quot;notSet&quot; }}&lt;/p&gt; &lt;p&gt;async getter:{{ newName || &quot;notSet&quot; }}&lt;/p&gt; &lt;div&gt; &lt;button @click=&quot;changePinia&quot;&gt;state change pinia&lt;/button&gt; &lt;button @click=&quot;actionTest1&quot;&gt;setUp change pinia&lt;/button&gt; &lt;button @click=&quot;actionTest2&quot;&gt;mapAction change pinia&lt;/button&gt; &lt;button @click=&quot;setUser&quot;&gt;{{ !loading ? &quot;async&quot; : &quot;loading···&quot; }}&lt;/button&gt; &lt;hr /&gt; &lt;button @click=&quot;reset&quot;&gt;重置&lt;/button&gt; &lt;/div&gt; &lt;/div&gt; &lt;/template&gt; &lt;style&gt;&lt;/style&gt;  "},{"title":"9.2 setup​","type":1,"pageTitle":"vite配置","url":"/docs/前端技术栈/vue/配置#92-setup","content":"setup &lt;script lang=&quot;ts&quot; setup&gt; import { getCurrentInstance } from &quot;vue&quot;; import { PoweroffOutlined } from &quot;@ant-design/icons-vue&quot;; // import { useNewsStore } from &quot;@/store/useNewsStore&quot;; // import { storeToRefs } from &quot;pinia&quot;; // console.log(&quot;vue-env&quot;, import.meta.env, import.meta.env.VITE_APP_TAG); const { proxy } = getCurrentInstance() as any; // const newsStore = useNewsStore(); // const { user } = storeToRefs(newsStore); // newsStore.setUser(); // const input = ref(&quot;&quot;); const test = () =&gt; { proxy?.$message.error(&quot;这是一个测试&quot;); }; &lt;/script&gt; &lt;template&gt; &lt;a-button type=&quot;primary&quot; @click=&quot;test&quot;&gt; &lt;template #icon&gt;&lt;PoweroffOutlined /&gt;&lt;/template&gt; 主页&lt;/a-button &gt; &lt;/template&gt;  "},{"title":"防抖与节流","type":0,"sectionRef":"#","url":"/docs/前端三大件/es6/防抖与节流","content":"防抖与节流 节流 简单实现; function debounce(fn, options) { const { delay } = options; let timer; return function (...args) { if (timer) { clearTimeout(timer); } timer = setTimeout(() =&gt; { fn.call(this, ...args); timer = null; }, wait); }; } // -----------立即执行防抖函数 function debounce2(fn, delay) { let timer; return function () { let args = arguments; if (timer) clearTimeout(timer); let callNow = !timer; timer = setTimeout(() =&gt; { timer = null; }, delay); if (callNow) { fn(args); } }; } // ----------立即执行防抖函数+普通防抖 function debounce3(fn, delay, immediate) { let timer; return function () { let args = arguments; let _this = this; if (timer) clearTimeout(timer); if (immediate) { let callNow = !timer; timer = setTimeout(() =&gt; { timer = null; }, delay); if (callNow) { fn.apply(_this, args); } } else { timeout = setTimeout(() =&gt; { func.apply(_this, arguments); }, delay); } }; } 节流 // ---------------------------------------------------------节流 ，时间戳版 function throttle(fn, wait) { let previous = 0; return function () { let now = Date.now(); let _this = this; let args = arguments; if (now - previous &gt; wait) { fn.apply(_this, arguments); previous = now; } }; } // ---------------------------------------------------------节流 ，定时器版 function throttle2(fn, wait) { let timer; return function () { let _this = this; let args = arguments; if (!timer) { timer = setTimeout(() =&gt; { timer = null; fn.apply(_this, arguments); }, wait); } }; } ","keywords":""},{"title":"文档教程","type":0,"sectionRef":"#","url":"/docs/前端三大件/es6/","content":"","keywords":""},{"title":"es 各版本更新以及浏览器支持情况​","type":1,"pageTitle":"文档教程","url":"/docs/前端三大件/es6/#es-各版本更新以及浏览器支持情况","content":""},{"title":"es12: ECMAScript 2021​","type":1,"pageTitle":"文档教程","url":"/docs/前端三大件/es6/#es12-ecmascript-2021","content":"信息 内容简介 1. replaceAll //谷歌86+ 2. Promise.any //谷歌85+ 3. WeakRefs 4. 逻辑运算符和赋值表达式 a ||= b //等价于 a = a || (a = b) a &amp;&amp;= b //等价于 a = a &amp;&amp; (a = b) a ??= b //等价于 a = a ?? (a = b) 5. 数字分隔符 const money = 1_000_000_000; //等价于 const money = 1000000000; 1_000_000_000 === 1000000000; // true  "},{"title":"es11: ECMAScript 2020​","type":1,"pageTitle":"文档教程","url":"/docs/前端三大件/es6/#es11-ecmascript-2020","content":"信息 内容简介 1. Nullish coalescing Operator(空值处理) ?? :表达式在 ?? 的左侧 运算符求值为undefined或null，返回其右侧。 2. Optional chaining（可选链） ?.用户检测不确定的中间节点 let user = {} let u1 = user.childer.name // TypeError: Cannot read property 'name' of undefined let u1 = user.childer?.name // undefined 3. Promise.allSettled //谷歌76+ 4. import():按需导入 5. globalThis &gt;浏览器：window &gt;worker：self &gt;node：global  "},{"title":"es10: ECMAScript 2019​","type":1,"pageTitle":"文档教程","url":"/docs/前端三大件/es6/#es10-ecmascript-2019","content":"r 内容简介 1.Array.prototype.flat() //谷歌69+ const numbers1 = [1, 2, [3, 4, [5, 6]]] console.log(numbers1.flat())// [1, 2, 3, 4, [5, 6]] const numbers2 = [1, 2, [3, 4, [5, 6]]] console.log(numbers2.flat(2))// [1, 2, 3, 4, 5, 6] 2.Array.prototype.flatMap():深度为1 //谷歌69+ let arr = [1, 2, 3] console.log(arr.map(item =&gt; [item * 2]).flat()) // [2, 4, 6] console.log(arr.flatMap(item =&gt; [item * 2])) // [2, 4, 6] 3.Object.fromEntries() //谷歌73+ const object = { x: 23, y:24 }; const entries = Object.entries(object); // [['x', 23], ['y', 24]] const result = Object.fromEntries(entries); // { x: 23, y: 24 } 4.String.trimStart 和 String.trimEnd //谷歌66+ 5.String.prototype.matchAll //谷歌73+ 6.try…catch:ry-catch语句中的参数变为了一个可选项 // ES10 try { console.log('Foobar') } catch { console.error('Bar') } 7.BigInt:BigInt 只用来表示整数，没有位数的限制，任何位数的整数都可以精确表示。 // 谷歌67+ const aNumber = 111; const aBigInt = BigInt(aNumber); aBigInt === 111n // true typeof aBigInt === 'bigint' // true typeof 111 // &quot;number&quot; typeof 111n // &quot;bigint&quot; 8.Symbol.prototype.description 9.Function.prototype.toString() //基本不支持 function sum(a, b) { return a + b; } console.log(sum.toString()); // function sum(a, b) { // return a + b; // }  "},{"title":"es9: ECMAScript2018​","type":1,"pageTitle":"文档教程","url":"/docs/前端三大件/es6/#es9-ecmascript2018","content":"信息 内容简介 1.for await of :异步遍历器 //谷歌63+ async function test () { let arr = [Gen(2000), Gen(100), Gen(3000)] for await (let item of arr) { console.log(Date.now(), item) } } test() 2.Object Rest Spread //谷歌60+ const input = { a: 1, b: 2, c: 1 } const output = { ...input, c: 3 } console.log(output) // {a: 1, b: 2, c: 3} 3.Promise.prototype.finally() 4.新的正则表达式特性 //谷歌64+ &gt; s (dotAll) 标志 const re = /foo.bar/s // Or, `const re = new RegExp('foo.bar', 's');`. console.log(re.test('foo\\nbar')) // true console.log(re.dotAll) // true console.log(re.flags) // 's' &gt;命名捕获组 const re = /(\\d{4})-(\\d{2})-(\\d{2})/; const match= re.exec('2019-01-01'); console.log(match[0]); // → 2019-01-01 console.log(match[1]); // → 2019 console.log(match[2]); // → 01 console.log(match[3]); // → 01 const re = /(?&lt;year&gt;\\d{4})-(?&lt;month&gt;\\d{2})-(?&lt;day&gt;\\d{2})/; const match = re.exec('2019-01-01'); console.log(match.groups); // → {year: &quot;2019&quot;, month: &quot;01&quot;, day: &quot;01&quot;} console.log(match.groups.year); // → 2019 console.log(match.groups.month); // → 01 console.log(match.groups.day); // → 01 &gt;Lookbehind 后行断言 let test = 'world hello' console.log(test.match(/(?&lt;=world\\s)hello/)) // [&quot;hello&quot;, index: 6, input: &quot;world hello&quot;, groups: undefined] &gt;Unicode属性转义:可以使用\\p{Number}来匹配所有的Unicode数字 const str = '㉛'; console.log(/\\d/u.test(str)); // → false console.log(/\\p{Number}/u.test(str)); // → true  "},{"title":"es8：ECMAScript2017​","type":1,"pageTitle":"文档教程","url":"/docs/前端三大件/es6/#es8ecmascript2017","content":"信息 内容简介 1.Async/Await //谷歌55+ 2.Object.values()，Object.entries() //谷歌54+ 3.String padding //谷歌57+ 4.Object.getOwnPropertyDescriptors() //谷歌54+  "},{"title":"es7: ECMAScript 2016​","type":1,"pageTitle":"文档教程","url":"/docs/前端三大件/es6/#es7-ecmascript-2016","content":"信息 内容简介 1.Array.prototype.includes（arr，index） //谷歌41+ 2.Exponentiation Operator(求幂运算符) 2 ** 3 =&gt;8  "},{"title":"es6: ECMAScript2015​","type":1,"pageTitle":"文档教程","url":"/docs/前端三大件/es6/#es6-ecmascript2015","content":"备注 ES6， 全称 ECMAScript 6.0 ，即 ES6，是 ECMAScripts 的第六次修订，又称 ES2015，于 2015 年 06 月发版，是 JavaScript 的下一个版本标准。 ES6 主要是为了解决 ES5 的先天不足，目前浏览器的 JavaScript 是 ES5 版本，大多数高版本的浏览器也支持 ES6，不过只实现了 ES6 的部分特性和功能。 信息 简要内容 1. 块级作用域 =&gt; 关键字 let，常量 const &gt; 如果 const 的是一个对象，对象所包含的值是可以被修改的。 &gt; 抽象一点儿说，就是对象所指向的地址不能改变，而变量成员 是可以修改的。 2. 对象的扩展 &gt;Object.keys()/Object.assign () 3. 解构赋值 4. 展开运算符 5. 函数的扩展 &gt;函数的默认参数 &gt;箭头函数:箭头函数中的 this 始终指向箭头函数定义时的离 this 最近的一个函数，如果没有最近的函数就指向 window。 6. 模板字符串 7. for...of循环 8. Class类，有constructor、extends、super，本质上是语法糖，（对语言的功能并没有影响，但是更方便程序员使用）。 &gt;ES5 使用原型链实现继承 9. Map + Set + WeakMap + WeakSet 10. Math + Number + String + Array + Object 新APIs 11. proxies：使用代理（Proxy）监听对象的操作，然后可以做一些相应事情。 12. Symbol： 唯一命名 13. Promises 14. import 和 export 15. Modules:ES6的内置模块功能借鉴了CommonJS和AMD各自的优点： &gt;具有CommonJS的精简语法、唯一导出出口(single exports)和循环依赖(cyclic dependencies)的特点。 &gt;类似AMD，支持异步加载和可配置的模块加载。  "},{"title":"es5: ECMAScript 5.1​","type":1,"pageTitle":"文档教程","url":"/docs/前端三大件/es6/#es5-ecmascript-51","content":"备注 ECMAScript 5.1 (或仅 ES5) 是 ECMAScript(基于 JavaScript 的规范)标准的修正。 与 HTML5 规范进程本质类似，ES5 通过对现有 JavaScript 方法添加语句和原生 ECMAScript 对象做合并实现标准化。 是 ECMAScripts的第五次修订（第四版因为过于复杂废弃了），又称 ECMAScript2009，于 2009 年完成标准化。 危险 除了正常运行模式， ECMAScript 5 添加了第二种运行模式：&quot;严格模式&quot;（strict mode）。顾名思义，这种模式使得 Javascript 在更严格的条件下运行。 设立&quot;严格模式&quot;的目的，主要有以下几个： 1：消除 Javascript 语法的一些不合理、不严谨之处，减少一些怪异行为。 2：消除代码运行的一些不安全之处，保证代码运行的安全。 3：提高编译器效率，增加运行速度。 4：为未来新版本的 Javascript 做好铺垫。 &quot;严格模式&quot;体现了 Javascript 更合理、更安全、更严谨的发展方向，包括 IE 10 在内的主流浏览器，都已经支持它，许多大项目已经开始全面拥抱它。 5: 严格模式改变语法和行为 严格模式对 Javascript 的语法和行为，都做了一些改变。 1：全局变量显式声明。 在正常模式中，如果一个变量没有声明就赋值，默认是全局变量。严格模式禁止这种用法，全局变量必须显式声明。因此，严格模式下，变量都必须先用 var 命令声明，然后再使用。 2：函数形参不允许重复。 3：禁止使用 with 语句。 4：禁止函数内部 this 关键字指向全局对象，this 指向 undefined。 5：函数必须声明在顶层。 开启方法:js 文件首行 &quot;use strict&quot;;  信息 简要内容: 新增bind方法; 新增数组方法： forEach、map、filter、some、every、indexOf lastIndexOf、reduce、reduceRight、Array.isArray() 新增字符串方法： trim()、charAt()、charCodeAt()、match()、.search()、replace() slice()、substring()、substr(start,length)、split(&quot;分割位置&quot;,[指定的长度]) toLowerCase()、toUpperCase() 新增JSON对象方法:JSON.parse、JSON.stringify 新增Object方法： Object.getPrototypeOf Object.create Object.getOwnPropertyNames Object.defineProperty Object.getOwnPropertyDescriptor Object.defineProperties Object.keys Object.preventExtensions / Object.isExtensible Object.seal / Object.isSealed Object.freeze / Object.isFrozen  "},{"title":"深复制","type":0,"sectionRef":"#","url":"/docs/前端三大件/es6/深复制","content":"深复制 简单介绍 copy原理js 中，对于赋值操作符:= 基本类型的数据：number，string，boolean 等的赋值 copy 直接是深拷贝 对于引用类型的数据:array，object 等的赋值 copy 是 copy 第一层的引用地址，操作对象始终是原对象 浅拷贝 let a = 3; let arr = [1, 2, 3]; //浅拷贝 let b = a; let arr2 = [...arr]; 深拷贝 function deepClone(data, hash = new WeakMap()) { if (data == undefined) return data; if (typeof data !== &quot;object&quot;) return data; if (data instanceof RegExp) return new RegExp(data); if (data instanceof Date) return new Date(data); let v = hash.get(data); if (v) return v; let instance = new data.constructor(); hash.set(data, instance); for (let key in data) { if (data.hasOwnProperty(key)) { instance[key] = deepClone(data[key], hash); } } return instance; } let a = { name: &quot;bob&quot;, desc: { age: 12, }, }; let b = deepClone(a); b.desc.age = 100; console.log(b); console.log(a); // js 循环引用 let t = {}; t.t = t; console.log(deepClone(t)); ","keywords":""},{"title":"对象判等deep","type":0,"sectionRef":"#","url":"/docs/前端三大件/es6/array/对象判等deep","content":"对象判等deep // 基本类型、数组、对象{}判等函数 const objectEq = (obj1, obj2) =&gt; { // 类型判断 if ( Object.prototype.toString.call(obj1) !== Object.prototype.toString.call(obj2) ) { return false; } // 判断长短 if (Object.keys(obj1).length !== Object.keys(obj2).length) { return false; } if (Array.isArray(obj1) || typeof obj1 === &quot;object&quot;) { // 深度比较 for (const [key1, value1] of Object.entries(obj1)) { if (typeof obj2[key1] === &quot;undefined&quot; || !objectEq(value1, obj2[key1])) { return false; } } // 通过测试则为真 return true; } else { // 基本类型直接比较 return obj1 === obj2; } }; ","keywords":""},{"title":"模板字符串","type":0,"sectionRef":"#","url":"/docs/前端三大件/es6/模板字符串","content":"","keywords":""},{"title":"模板字符串制作模板引擎的简单实现​","type":1,"pageTitle":"模板字符串","url":"/docs/前端三大件/es6/模板字符串#模板字符串制作模板引擎的简单实现","content":"ES6 模板字符串在 HTML 模板渲染中的应用 "},{"title":"1.html 文件​","type":1,"pageTitle":"模板字符串","url":"/docs/前端三大件/es6/模板字符串#1html-文件","content":"&lt;table id=&quot;tableMix&quot; class=&quot;ui-table table&quot;&gt; &lt;thead&gt; &lt;tr&gt; &lt;th width=&quot;20&quot;&gt;&lt;input type=&quot;checkbox&quot; /&gt;&lt;/th&gt; &lt;th&gt;文章标题&lt;/th&gt; &lt;th width=&quot;22%&quot;&gt;发布时间&lt;/th&gt; &lt;th width=&quot;15%&quot; align=&quot;right&quot;&gt;评论数&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;template&gt; ${data.map(function (obj, index) { return ` &lt;tr&gt; &lt;td&gt;&lt;input type=&quot;checkbox&quot; value=&quot;${obj.id}&quot; /&gt;&lt;/td&gt; &lt;td&gt;&lt;div class=&quot;ell&quot;&gt;${obj.title}&lt;/div&gt;&lt;/td&gt; &lt;td&gt;${obj.time}&lt;/td&gt; &lt;td align=&quot;right&quot;&gt;${obj.comment}&lt;/td&gt; &lt;/tr&gt; `; }).join('')} &lt;/template&gt; &lt;/tbody&gt; &lt;/table&gt;  "},{"title":"2.普通字符串转模板字符串​","type":1,"pageTitle":"模板字符串","url":"/docs/前端三大件/es6/模板字符串#2普通字符串转模板字符串","content":" // HTML 字符反转义 &amp;lt; =&gt; &lt; function escape2Html(str) { let arrEntities = { 'lt': '&lt;', 'gt': '&gt;', 'nbsp': ' ', 'amp': '&amp;', 'quot': '&quot;' }; return str.replace(/&amp;(lt|gt|nbsp|amp|quot);/ig, function (all, t) { return arrEntities[t]; }); } /\\*\\* - Convert a string to a template-string - @param {Object} params 模板数据 - @return {String} 模板字符串语法解析后的字符串 \\*/ String.prototype.interpolate = function (params) { const names = Object.keys(params); const vals = Object.values(params); return new Function(...names, `return \\`${escape2Html(this)}\\`;`)(...vals); };  "},{"title":"3.业务代码​","type":1,"pageTitle":"模板字符串","url":"/docs/前端三大件/es6/模板字符串#3业务代码","content":"// 业务处理代码 let eleTbody = document.querySelector(&quot;#tableMix tbody&quot;); let strTemplate = eleTbody.querySelector(&quot;template&quot;).innerHTML; // 获取数据 fetch(&quot;./ajax-article-list.php&quot;) .then((res) =&gt; { return res.json(); }) .then((json) =&gt; { eleTbody.innerHTML = strTemplate.interpolate(json.data); });  "},{"title":"4.效果​","type":1,"pageTitle":"模板字符串","url":"/docs/前端三大件/es6/模板字符串#4效果","content":" "},{"title":"5.其中 json 数据结构如下：​","type":1,"pageTitle":"模板字符串","url":"/docs/前端三大件/es6/模板字符串#5其中-json-数据结构如下","content":"{ &quot;code&quot;: 0, &quot;msg&quot;: &quot;获取成功&quot;, &quot;data&quot;: [ { &quot;id&quot;: &quot;0001&quot;, &quot;title&quot;: &quot;如何让文字作为 CSS 背景图片显示？&quot;, &quot;time&quot;: &quot;2020 年 10 月 20 日&quot;, &quot;comment&quot;: 7 }, { &quot;id&quot;: &quot;0002&quot;, &quot;title&quot;: &quot;SVG feTurbulence 滤镜深入介绍&quot;, &quot;time&quot;: &quot;2020 年 10 月 17 日&quot;, &quot;comment&quot;: 3 }, { &quot;id&quot;: &quot;0003&quot;, &quot;title&quot;: &quot;HTML enterkeyhint 设置 iOS/Android 键盘 enter 键&quot;, &quot;time&quot;: &quot;2020 年 10 月 11 日&quot;, &quot;comment&quot;: 3 }, { &quot;id&quot;: &quot;0004&quot;, &quot;title&quot;: &quot;快速学习 CSS Color Level 4 的色值新语法&quot;, &quot;time&quot;: &quot;2020 年 10 月 11 日&quot;, &quot;comment&quot;: 2 } ] }  "},{"title":"reduce","type":0,"sectionRef":"#","url":"/docs/前端三大件/es6/array/高级/reduce","content":"reduce 语法: arr.reduce(callback(accumulator, currentValue[, index[, array]])[, initialValue]) 1.求和 const sum=(...res)=&gt;res.reduce((a,b)=&gt;a+b,res.length===0 &amp;&amp; 0) eg: sum() // &gt;0 sum(1,2,3) // &gt;6 2.二维数组变一维化 let flattened = [[0, 1], [2, 3], [4, 5]].reduce(( acc, cur ) =&gt; acc.concat(cur),[]); // &gt; [0, 1, 2, 3, 4, 5] 3.管道函数 const pipe=(...fns)=&gt;(init)=&gt;fns.reduce((pre,fn)=&gt;fn(pre),init) eg: pipe(x=&gt;x\\*2,x=&gt;x\\*\\*2)(2) // &gt;16 //利用代理实现链式操作 let pipe = function (value) { let funcStack = []; let oproxy = new Proxy({} , { get : function (pipeObject, fnName) { if (fnName === 'get') { return funcStack.reduce(function (val, fn) { return fn(val); },value); } funcStack.push(window[fnName]); return oproxy; } }); return oproxy; } var double = n =&gt; n * 2; var pow = n =&gt; n * n; var reverseInt = n =&gt; n.toString().split(&quot;&quot;).reverse().join(&quot;&quot;) | 0; pipe(3).double.pow.reverseInt.get; // 63 4.统计数组重复元素个数 const nums = [1, 2, 3, 3, 2,4,5,4,3]; let count=nums.reduce((pre,num)=&gt;{ pre[num]=(pre[num] || 0)+1 return pre },{}) // &gt;{1: 1, 2: 2, 3: 3, 4: 2, 5: 1} 5.按属性分组对象 let people = [ { name: 'Alice', age: 21 }, { name: 'Max', age: 20 }, { name: 'Jane', age: 20 } ]; function groupBy(objectArray, property) { return objectArray.reduce( (acc, obj)=&gt; { let key = obj[property]; if (!acc[key]) { acc[key] = []; } acc[key].push(obj); return acc; }, {}); } let groupedPeople = groupBy(people, 'age'); // { // 20: [ // { name: 'Max', age: 20 }, // { name: 'Jane', age: 20 } // ], // 21: [{ name: 'Alice', age: 21 }] // } ","keywords":""},{"title":"数组转树","type":0,"sectionRef":"#","url":"/docs/前端三大件/es6/array/数组转树","content":"","keywords":""},{"title":"1.普通遍历​","type":1,"pageTitle":"数组转树","url":"/docs/前端三大件/es6/array/数组转树#1普通遍历","content":"function listToTree(data) { // * 先生成parent建立父子关系 const obj = {}; data.forEach((item) =&gt; { obj[item.id] = item; }); // * obj -&gt; {1001: {id: 1001, parentId: 0, name: 'AA'}, 1002: {...}} // console.log(obj, &quot;obj&quot;) const parentList = []; data.forEach((item) =&gt; { const parent = obj[item.parentId]; if (parent) { // * 当前项有父节点 parent.children = parent.children || []; parent.children.push(item); } else { // * 当前项没有父节点 -&gt; 顶层 parentList.push(item); } }); return parentList; }  "},{"title":"2.reduce​","type":1,"pageTitle":"数组转树","url":"/docs/前端三大件/es6/array/数组转树#2reduce","content":"function array2tree(array) { return JSON.parse(JSON.stringify(array)).reduce((pre, next) =&gt; { const { id, parentId } = next; if (pre[parentId]) { pre[parentId].children = (pre[parentId].children || []).concat([next]); } else { if (pre[id]) { pre[id] = { ...pre[id], ...next }; } else { pre[id] = next; } } return pre; }, {}); }  "},{"title":"杂","type":0,"sectionRef":"#","url":"/docs/前端三大件/es6/array/杂","content":"杂 1.var 关键字 for(var i = 0; i &lt; 5; i++){ setTimeout(() =&gt;{ console.log(i) },1000) } // &gt; 5 5 5 5 5 2.let 形成局部作用域 for(let i=0;i&lt;5;i++){ setTimeout(()=&gt;console.log(i),i\\*1000) } // &gt;0 1 2 3 4 3.setTimeout 第三个参数为传入参数 for(var i=0;i&lt;5;i++){ setTimeout((j)=&gt;console.log(j),i\\*1000,i) } // &gt;0 1 2 3 4 ","keywords":""},{"title":"初始化数组","type":0,"sectionRef":"#","url":"/docs/前端三大件/es6/array/中级/初始化数组","content":"初始化数组 1.新建一维数组 new Array(5).fill(0) [0,0,0,0,0] 2.新建二维数组 new Array(5).fill(0).map((e) =&gt; new Array(5).fill(0)); [ [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], ]; 3.转化类数组 LikeArray 可以是 dom 元素组，arguments，Map，Set 和布置了 iterate 接口的对象等 方式一:Array.from(LikeArray) 方式二:[...LikeArray]","keywords":""},{"title":"返回可迭代对象","type":0,"sectionRef":"#","url":"/docs/前端三大件/es6/array/中级/返回可迭代对象","content":"返回可迭代对象 一般用于对象,普通对象不方便直接遍历，可以转换成数组再遍历 eg:let fruits = [&quot;Banana&quot;, &quot;Orange&quot;, &quot;Apple&quot;, &quot;Mango&quot;]; 1.返回对象[key,value]的二维数组 方式一:[...fruits.entries()] 方式二:Object.entries(fruits) // &gt;[ [0, &quot;Banana&quot;], [1, &quot;Orange&quot;], [2, &quot;Apple&quot;], [3, &quot;Mango&quot;] ] 2.返回对象的 key 数组 Object.keys(fruits) // &gt;['0','1','2','3'] 3.返回对象的 values 数组 Object.values(fruits) // &gt;[&quot;Banana&quot;,&quot;Orange&quot;,&quot;Apple&quot;,&quot;Mango&quot;]","keywords":""},{"title":"数组操作","type":0,"sectionRef":"#","url":"/docs/前端三大件/es6/array/中级/数组操作","content":"","keywords":""},{"title":"数组操作会改变原数组​","type":1,"pageTitle":"数组操作","url":"/docs/前端三大件/es6/array/中级/数组操作#数组操作会改变原数组","content":"let arr = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];  1.let a=arr.shift() //删除数组第一个元素 0,赋值给 a，所以:a=0;arr=[1,2,3,4,5,6,7,8,9] let b=arr.unshift(1,2,3) //向 arr 最前面依次插入 1,2,3，返回新数组长度，所以: //b=13,arr=[1,2,3,0,1,2,3,4,5,6,7,8,9] 2.let c=arr.pop() //尾部删除 &gt;c=9 let d=arr.push(1) //尾部插入 &gt;d=11 3.arr.splice(1,2) //从索引 1 处开始，删除 2 个元素 &gt;arr=[0,3,4,5,6,7,8,9] arr.splice(1,2,-1,-2) //删除 2 个，再插入 2 个 &gt;arr=[0,-1,-2,3,4,5,6,7,8,9] 4.arr.reverse() // &gt;arr=[9,8,7,6,5,4,3,2,1,0]  "},{"title":"数组检查与过滤","type":0,"sectionRef":"#","url":"/docs/前端三大件/es6/array/中级/数组检查与过滤","content":"数组检查与过滤 let arr = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]; let arr2 = [3, 5, 7, 2]; 1.数组检查 Array.isArray(arr); //判断是不是数组 &gt;true arr.every((e) =&gt; e &gt; 10); //每个数都大于 10? &gt;false arr.some((e) =&gt; e &gt; 8); //存在大于 8 的元素? &gt;true arr.findIndex((e) =&gt; e === 3); //找到第一个 3 的位置，没有就返回-1 &gt;3 arr.indexOf(3); //找到第一个 3 的位置，没有就返回-1 &gt;3 arr.includes(3); //是否包含 3? &gt;true 2.数组过滤 arr.find((e) =&gt; e &gt; 3); //返回第一个大于 3 的值 &gt;4 arr.filter((e) =&gt; e &gt; 3); //返回所有大于 3 的值 &gt;[4,5,6,7,8,9] 3.数组交集 arr.filter((e) =&gt; arr2.includes(e)); //&gt;[2,3,5,7] 3.数组交集(对象) 实时编辑器 function Test() { // 基本类型、数组、对象{}判等函数 const objectEq = (obj1, obj2) =&gt; { if (typeof obj1 !== typeof obj2) return false; if (Array.isArray(obj1) || typeof obj1 === &quot;object&quot;) { for (const [key1, value1] of Object.entries(obj1)) { if (typeof obj2[key1] !== &quot;undefined&quot;) { // console.log(value1, obj2[key1]) return objectEq(value1, obj2[key1]); } return false; } } else { return obj1 === obj2; } }; // 测试判等函数用例，可直接实时编辑测试 const eq1 = objectEq({ a: { b: 2 } }, { a: { b: 2 } }).toString(); // 对象数组交集用例，可直接实时编辑测试 let obj1 = [{ a: 3 }, { a: 2 }, { b: 3 }]; let obj2 = [{ a: 2 }, { a: 1 }, { b: 3 }, { b: 5 }]; let resJj = obj1.filter((item) =&gt; { for (let key in obj2) { if (objectEq(item, obj2[key])) { return true; } } return false; }); return ( &lt;div&gt; &lt;div&gt;eq1: {eq1.toString()}&lt;/div&gt; &lt;div&gt;resJj: {JSON.stringify(resJj)}&lt;/div&gt; &lt;/div&gt; ); } function Test() { // 基本类型、数组、对象{}判等函数 const objectEq = (obj1, obj2) =&gt; { if (typeof obj1 !== typeof obj2) return false; if (Array.isArray(obj1) || typeof obj1 === &quot;object&quot;) { for (const [key1, value1] of Object.entries(obj1)) { if (typeof obj2[key1] !== &quot;undefined&quot;) { // console.log(value1, obj2[key1]) return objectEq(value1, obj2[key1]); } return false; } } else { return obj1 === obj2; } }; // 测试判等函数用例，可直接实时编辑测试 const eq1 = objectEq({ a: { b: 2 } }, { a: { b: 2 } }).toString(); // 对象数组交集用例，可直接实时编辑测试 let obj1 = [{ a: 3 }, { a: 2 }, { b: 3 }]; let obj2 = [{ a: 2 }, { a: 1 }, { b: 3 }, { b: 5 }]; let resJj = obj1.filter((item) =&gt; { for (let key in obj2) { if (objectEq(item, obj2[key])) { return true; } } return false; }); return ( &lt;div&gt; &lt;div&gt;eq1: {eq1.toString()}&lt;/div&gt; &lt;div&gt;resJj: {JSON.stringify(resJj)}&lt;/div&gt; &lt;/div&gt; ); } 结果 Loading...","keywords":""},{"title":"数组排序、去重","type":0,"sectionRef":"#","url":"/docs/前端三大件/es6/array/中级/数组排序、去重","content":"","keywords":""},{"title":"1.初步排序​","type":1,"pageTitle":"数组排序、去重","url":"/docs/前端三大件/es6/array/中级/数组排序、去重#1初步排序","content":"let arr1 = [2, 1, 3, 2, 4, 5, 4, 7]; let arr2 = [ [1, 2], [3, 4], [5, 1], ]; let obj = [{ c: 1 }, { c: 5 }, { c: 3 }];  1.arr1.sort((a,b)=&gt;a-b) //会改变原数组 &gt;arr1=[1,2,2,3,4,4,7] 2.arr2.sort((a,b)=&gt;a[0]-a[0]) // &gt;arr2=[[1,2],[3,4],[5,1]] arr2.sort((a,b)=&gt;a[1]-a[1]) // &gt;arr2=[[5,1],[1,2],[3,4] obj.sort((a,b)=&gt;a.c-b.c) // &gt;obj=[{c:1},{c:3},{c:5}] 3.let arr0=[...new Set(arr1)] //去重 &gt;arr0=[2,1,3,4,5,7]  "},{"title":"2.中文排序​","type":1,"pageTitle":"数组排序、去重","url":"/docs/前端三大件/es6/array/中级/数组排序、去重#2中文排序","content":"let array = [&quot;武汉&quot;, &quot;北京&quot;, &quot;上海&quot;, &quot;天津&quot;]; let resultArray = array.sort(function (param1, param2) { return param1.localeCompare(param2, &quot;zh&quot;); }); console.log(resultArray);  "},{"title":"3.指定数组排序​","type":1,"pageTitle":"数组排序、去重","url":"/docs/前端三大件/es6/array/中级/数组排序、去重#3指定数组排序","content":"实时编辑器 function Test() { // order是规则 objs是需要排序的数组 function arraySortArray(objs, order, key) { // 初步深复制避免影响原数组，可自己更改 const cache = JSON.parse(JSON.stringify(objs)); cache.sort(function (a, b) { return order.indexOf(a[key]) - order.indexOf(b[key]); }); return cache; } const objs = [ { name: &quot;A&quot;, type: &quot;1&quot; }, { name: &quot;F&quot;, type: &quot;6&quot; }, { name: &quot;E&quot;, type: &quot;5&quot; }, { name: &quot;H&quot;, type: &quot;8&quot; }, { name: &quot;D&quot;, type: &quot;4&quot; }, { name: &quot;C&quot;, type: &quot;3&quot; }, ]; const order = [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;, &quot;6&quot;, &quot;7&quot;, &quot;8&quot;, &quot;9&quot;, &quot;10&quot;]; const res = arraySortArray(objs, order, &quot;type&quot;); // 编辑器实时输出结果 return ( &lt;ul&gt; {res.map((item) =&gt; ( &lt;li key={item.type}&gt;{JSON.stringify(item)}&lt;/li&gt; ))} &lt;/ul&gt; ); } function Test() { // order是规则 objs是需要排序的数组 function arraySortArray(objs, order, key) { // 初步深复制避免影响原数组，可自己更改 const cache = JSON.parse(JSON.stringify(objs)); cache.sort(function (a, b) { return order.indexOf(a[key]) - order.indexOf(b[key]); }); return cache; } const objs = [ { name: &quot;A&quot;, type: &quot;1&quot; }, { name: &quot;F&quot;, type: &quot;6&quot; }, { name: &quot;E&quot;, type: &quot;5&quot; }, { name: &quot;H&quot;, type: &quot;8&quot; }, { name: &quot;D&quot;, type: &quot;4&quot; }, { name: &quot;C&quot;, type: &quot;3&quot; }, ]; const order = [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;, &quot;6&quot;, &quot;7&quot;, &quot;8&quot;, &quot;9&quot;, &quot;10&quot;]; const res = arraySortArray(objs, order, &quot;type&quot;); // 编辑器实时输出结果 return ( &lt;ul&gt; {res.map((item) =&gt; ( &lt;li key={item.type}&gt;{JSON.stringify(item)}&lt;/li&gt; ))} &lt;/ul&gt; ); } 结果 Loading... "},{"title":"数组映射、遍历与截取","type":0,"sectionRef":"#","url":"/docs/前端三大件/es6/array/中级/数组映射、遍历与截取","content":"数组映射、遍历与截取 映射与截取不会改变原数组 let arr=[0,1,2,3,4,5,6,7,8,9] let flatArr=[[1,2],[3,4],[5,1]] 1.let arr1=arr.slice(0,3) //返回新数组[0,1,2] let arr2=arr.slice(1) // &gt;[1,2,3,4,5,6,7,8,9] let arr3=arr.slice(-1) // &gt;[9] let arr4=arr.slice(1,-1) // &gt;[1,2,3,4,5,6,7,8] 2.let arr5=arr.map(e=&gt;e*2) //返回新数组[0,2,4,6,8,10,12,14,16,18] 3.arr.forEach(e=&gt;e*2) //无返回值只是遍历计算，一般情况下不可停止 4.let arr6=flatArr.flat() // &gt;arr6=[1,2,3,4,5,1] 5.let arr7=arr.concat([-1,-2]) // &gt;arr7=[0,1,2,3,4,5,6,7,8,9,-1,-2] ","keywords":""},{"title":"intl","type":0,"sectionRef":"#","url":"/docs/前端三大件/es6/intl","content":"intl 中文排序 let arrUsername = [ &quot;陈坤&quot;, &quot;邓超&quot;, &quot;杜淳&quot;, &quot;冯绍峰&quot;, &quot;韩庚&quot;, &quot;胡歌&quot;, &quot;黄晓明&quot;, &quot;贾乃亮&quot;, &quot;李晨&quot;, &quot;李易峰&quot;, &quot;鹿晗&quot;, &quot;井柏然&quot;, &quot;刘烨&quot;, &quot;陆毅&quot;, &quot;孙红雷&quot;, ]; arrUsername.sort(new Intl.Collator(&quot;zh&quot;).compare); // 结果是：[&quot;陈坤&quot;, &quot;邓超&quot;, &quot;杜淳&quot;, &quot;冯绍峰&quot;, &quot;韩庚&quot;, &quot;胡歌&quot;, &quot;黄晓明&quot;, &quot;贾乃亮&quot;, &quot;井柏然&quot;, &quot;李晨&quot;, &quot;李易峰&quot;, &quot;刘烨&quot;, &quot;陆毅&quot;, &quot;鹿晗&quot;, &quot;孙红雷&quot;] // 数字 3 位分组 new Intl.NumberFormat(undefined, { minimumFractionDigits: 4, }).format(12345.6789); // 结果是：&quot;12,345.6789&quot; ","keywords":""},{"title":"JSON.stringify","type":0,"sectionRef":"#","url":"/docs/前端三大件/es6/JSON.stringify","content":"JSON.stringify JSON.stringify(value[, replacer [, space]]) 将要序列化成 一个 JSON 字符串的值。 1.replacer可选 可以为数组或函数 如果为数组：则只有包含在这个数组中的属性名才会被序列化到最终的 JSON 字符串中 2.replacer 作 key 值（这个在讲实例的时候就知道这个 key 是干嘛的了，先记住就好） 如果为函数：则把系列化后的每一个对象（记住是每一个）传进方法里面进行处理 3.space可选 指定缩进用的空白字符串 如果省略的话，那么显示出来的值就没有分隔符。直接输出来 如果是一个数字的话，那么它就定义缩进几个字符，范围是：0 到 10（数字小于 1，则默认为 0，大于 10，则默认为 10） 如果是一些转义字符，比如“\\t”，表示回车，那么它每行一个回车。 如果仅仅是字符串，就在每行输出值的时候把这些字符串附加上去就 OK。当然，最大长度也是 10 个字符 第三个参数就是用来缩进或者直接添加字符串在序列化对象的前面，注意最多只能 10 个缩进或字符 JSON.stringify({ a: 2 }, null, &quot; &quot;); // 输出结果：{\\n &quot;a&quot;: 2\\n} JSON.stringify({ uno: 1, dos : 2 }, null, '\\t') /_ 输出结果： { &quot;uno&quot;: 1, &quot;dos&quot;: 2 } _/ let students = new Object(); students.name = &quot;pika&quot;; students.age = 19; students.qq = &quot;12345678&quot;; let stu= new Array(); stu[0] = &quot;name&quot;; stu[1] = &quot;qq&quot;; let json = JSON.stringify(students,stu,&quot;test&quot;) /_ 输出结果： { test&quot;name&quot;: &quot;pika&quot;, test&quot;qq&quot;: &quot;12345678&quot; } _/ ","keywords":""},{"title":"basic","type":0,"sectionRef":"#","url":"/docs/前端三大件/es6/object/basic","content":"basic object 1","keywords":""},{"title":"mutationObserver","type":0,"sectionRef":"#","url":"/docs/前端三大件/es6/mutationObserver","content":"","keywords":""},{"title":"1.observe​","type":1,"pageTitle":"mutationObserver","url":"/docs/前端三大件/es6/mutationObserver#1observe","content":"对一个节点添加观察器，就像使用 addEventListener 方法一样，多次添加同一个观察器是无效的，回调函数依然只会触发一次。但是，如果指定不同的 options 对象，就会被当作两个不同的观察器。 observe(target, config)： target：需要监听的元素 [element] config：需要监听的属性 [Object] childList：子节点的变动（指新增，删除或者更改）。 attributes：属性的变动。 characterData：节点内容或节点文本的变动。 subtree：布尔值，表示是否将该观察器应用于该节点的所有后代节点。 attributeOldValue：布尔值，表示观察 attributes 变动时，是否需要记录变动前的属性值。 characterDataOldValue：布尔值，表示观察 characterData 变动时，是否需要记录变动前的值。 attributeFilter：数组，表示需要观察的特定属性（比如[‘class’,‘src’]）。 // 开始监听文档根节点（即&lt;html&gt;标签）的变动 mutationObserver.observe(document.documentElement, { attributes: true, characterData: true, childList: true, subtree: true, attributeOldValue: true, characterDataOldValue: true, });  "},{"title":"2.disconnect()​","type":1,"pageTitle":"mutationObserver","url":"/docs/前端三大件/es6/mutationObserver#2disconnect","content":"disconnect 方法用来停止观察。调用该方法后，DOM 再发生变动，也不会触发观察器。 "},{"title":"3.takeRecords()​","type":1,"pageTitle":"mutationObserver","url":"/docs/前端三大件/es6/mutationObserver#3takerecords","content":"用来清除变动记录，即不再处理未处理的变动。该方法返回变动记录的数组。 "},{"title":"4.MutationRecord​","type":1,"pageTitle":"mutationObserver","url":"/docs/前端三大件/es6/mutationObserver#4mutationrecord","content":"含义:返回的变动记录 DOM 每次发生变化，就会生成一条变动记录（MutationRecord 实例）。该实例包含了与变动相关的所有信息。 Mutation Observer 处理的就是一个个 MutationRecord 实例所组成的数组。 MutationRecord 对象包含了 DOM 的相关信息，有如下属性: type：观察的变动类型（attribute、characterData 或者 childList）。 target：发生变动的 DOM 节点。 addedNodes：新增的 DOM 节点。 removedNodes：删除的 DOM 节点。 previousSibling：前一个同级节点，如果没有则返回 null。 nextSibling：下一个同级节点，如果没有则返回 null。 attributeName：发生变动的属性。如果设置了 attributeFilter，则只返回预先指定的属性。 oldValue：变动前的值。这个属性只对 attribute 和 characterData 变动有效，如果发生 childList 变动，则返回 null。 "},{"title":"4.1 示例 1​","type":1,"pageTitle":"mutationObserver","url":"/docs/前端三大件/es6/mutationObserver#41-示例-1","content":"&lt;div id=&quot;container&quot;&gt; &lt;div class=&quot;child&quot;&gt;&lt;/div&gt; &lt;/div&gt; &lt;button id=&quot;update&quot;&gt;改变&lt;/button&gt; &lt;script&gt; let MutationObserver = window.MutationObserver || window.WebKitMutationObserver || window.MozMutationObserver; const container = document.getElementById(&quot;container&quot;); const button = document.getElementById(&quot;update&quot;); const options = { attributes: true, childList: true, }; // 创建MutationObserver实例，返回一个观察者对象 const mutation = new MutationObserver(function (mutationRecoards, observer) { console.log(mutationRecoards); console.log(observer); }); // 对观察者添加需要观察的元素，并设置需要观察元素的哪些方面 mutation.observe(container, options); // 对container进行操作 button.addEventListener(&quot;click&quot;, function () { container.innerText = &quot;这是文本&quot;; // 内容改变 container.style.background = &quot;red&quot;; // 属性改变 for (let i = 0; i &lt; 3; i++) { // 子节点 container.appendChild(document.createElement(&quot;div&quot;)); } }); &lt;/script&gt;   "},{"title":"4.2 示例 2​","type":1,"pageTitle":"mutationObserver","url":"/docs/前端三大件/es6/mutationObserver#42-示例-2","content":"useEffect(() =&gt; { // 选择需要观察变动的节点 const targetNode = document.getElementsByClassName( &quot;fc-view-harness fc-view-harness-active&quot; )[0]; // 观察器的配置（需要观察什么变动） const config = { childList: true }; // 当观察到变动时执行的回调函数 const callback = function (mutationsList: any, observer: any) { // Use traditional 'for loops' for IE 11 for (let mutation of mutationsList) { if (mutation.type === &quot;childList&quot;) { const addEle = mutation.addedNodes[0] as HTMLElement; if (addEle &amp;&amp; addEle.classList.contains(&quot;fc-popover&quot;)) { const date = addEle.getAttribute(&quot;data-date&quot;); const parentEle = document.querySelector( `td[data-date=&quot;${date}&quot;]` ) as HTMLElement; addEle.style.top = &quot;0&quot;; addEle.style.left = &quot;0&quot;; parentEle.style.position = &quot;relative&quot;; parentEle?.appendChild(addEle); } } } }; // 创建一个观察器实例并传入回调函数 const observer = new MutationObserver(callback); // 以上述配置开始观察目标节点 observer.observe(targetNode, config); return () =&gt; { // 之后，可停止观察 observer.disconnect(); }; }, []);  "},{"title":"5.拓展​","type":1,"pageTitle":"mutationObserver","url":"/docs/前端三大件/es6/mutationObserver#5拓展","content":""},{"title":"1）ResizeObserver : mutatObserver的封装​","type":1,"pageTitle":"mutationObserver","url":"/docs/前端三大件/es6/mutationObserver#1resizeobserver--mutatobserver的封装","content":"有一定兼容性(谷歌 64+，但是浏览器支持不是很好)，可以安装: npm i resize-observer-polyfill  import ResizeObserver from &quot;resize-observer-polyfill&quot;; const ro = new ResizeObserver((entries, observer) =&gt; { for (const entry of entries) { console.log(&quot;被监听元素content的宽高及位置&quot;, entry.contentRect); // bottom: 700 指top + height的值 // height: 600 指元素本身的高度，不包含padding，border值 // left: 100 指padding-left的值 // right: 1143 指left + width的值 // top: 100 指padidng-top的值 // width: 1043 指元素本身的宽度，不包含padding，border值 // x: 100 // y: 100 console.log(&quot;被监听元素的宽高&quot;, entry.borderBoxSize); // blockSize: 1000 // inlineSize: 1443 console.log(&quot;被监听元素content部分的宽高&quot;, entry.contentBoxSize); // blockSize: 600 // inlineSize: 1043 console.log(&quot;被监听元素&quot;, entry.target); } }); ro.observe(document.body);  基本介绍 ResizeObserver.disconnect()取消和结束目标对象上所有对 Element 或 SVGElement 观察。 ResizeObserver.observe()开始观察指定的 Element 或 SVGElement。 ResizeObserver.unobserve()结束观察指定的 Element 或 SVGElement。 语法 const resizeObserver = new ResizeObserver((entries) =&gt; { for (let entry of entries) { // 做一些事情 } });  节流优化 const throttle = （fun,delay） =&gt; { let timer = null; return function() { const args = arguments if(!timer) { timer = setTimeout(() =&gt; { timer = null }, delay) fun(args ) } } } const myObserver = new ResizeObserver(throttle(entries =&gt; { entries.forEach(entry =&gt; { console.log('大小位置 contentRect', entry.contentRect) console.log('监听的DOM target', entry.target) }) }), 500) myObserver.observe(document.body)  "},{"title":"checkbox","type":0,"sectionRef":"#","url":"/docs/前端三大件/html/checkbox","content":"checkbox 最多勾选4项勾选内包括r2风险时，最多勾选2项，否则报错；先勾选2/3项再勾选r2也报错选择4项或者含r2选2项时，禁用按钮 美元 020 人民币r1 最大 欧元 最大 日元 最大 港币 最大 西班牙元r2 015 已选择:0项","keywords":""},{"title":"iframe","type":0,"sectionRef":"#","url":"/docs/前端三大件/html/iframe","content":"","keywords":""},{"title":"1.简介​","type":1,"pageTitle":"iframe","url":"/docs/前端三大件/html/iframe#1简介","content":"HTML 内联框架元素 &lt;iframe&gt; 表示嵌套的 browsing context。它能够将另一个 HTML 页面嵌入到当前页面中。 &lt;iframe //用作 &lt;a&gt; 标签与 &lt;form&gt; 标签的 target 属性值，也可以用作 &lt;input&gt; 标签和 &lt;button&gt; 标签的 formtarget 属性值，还可以用作 window.open() 方法的 windowName 参数值。 name=&quot;test&quot; id=&quot;inlineFrameExample&quot; title=&quot;Inline Frame Example&quot; width=&quot;300&quot; height=&quot;200&quot; src=&quot;https://example.org&quot; allowfullscreen=&quot;true&quot; referrerpolicy=&quot;no-referrer&quot; &gt;&lt;/iframe&gt;   "},{"title":"2.事件:onload​","type":1,"pageTitle":"iframe","url":"/docs/前端三大件/html/iframe#2事件onload","content":"&lt;iframe onload=&quot;onload&quot; src=&quot;https://zingy-fudge-57d344.netlify.app/docs/%E9%97%AE%E9%A2%98%E9%9B%86%E5%90%88/img&quot; scrolling=&quot;auto&quot; style={{ border: &quot;1px solid&quot; }} &gt; &lt;p&gt;Your browser does not support iframes.&lt;/p&gt; &lt;/iframe&gt;  iframe 页 &lt;p&gt;Your browser does not support iframes.&lt;/p&gt;  引申:父页面单方面调用子组件绑定事件 &lt;iframe id=&quot;iframe&quot; src={&quot;xxxx&quot;} frameborder=&quot;0&quot; onLoad={() =&gt; { let doc = document .getElementById(&quot;iframe&quot;) .contentWindow.document.getElementsByTagName(&quot;body&quot;)[0]; let imgs = doc.children[0]; imgs.setAttribute(&quot;onclick&quot;, &quot;javascript:window.parent.downLoadFile()&quot;); imgs.alt = &quot;下载文件&quot;; imgs.title = &quot;下载文件&quot;; //实现文件下载功能 window.downLoadFile = function () { let src = &quot;xxx&quot;; let form = document.createElement(&quot;form&quot;); form.action = src; document.getElementsByTagName(&quot;body&quot;)[0].appendChild(form); form.submit(); }; }} /&gt;  "},{"title":"3.同域下父子页面的通信​","type":1,"pageTitle":"iframe","url":"/docs/前端三大件/html/iframe#3同域下父子页面的通信","content":"parent &lt;html&gt; &lt;head&gt; &lt;script type=&quot;text/javascript&quot;&gt; function say() { alert(&quot;parent.html&quot;); } function callChild() { myFrame.window.say(); myFrame.window.document.getElementById(&quot;button&quot;).value = &quot;调用结束&quot;; } &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;input id=&quot;button&quot; type=&quot;button&quot; value=&quot;调用child.html中的函数say()&quot; onclick=&quot;callChild()&quot; /&gt; &lt;iframe name=&quot;myFrame&quot; src=&quot;child.html&quot;&gt;&lt;/iframe&gt; &lt;/body&gt; &lt;/html&gt;  child &lt;html&gt; &lt;head&gt; &lt;script type=&quot;text/javascript&quot;&gt; function say(){ alert(&quot;child.html&quot;); } function callParent(){ parent.say(); parent.window.document.getElementById(&quot;button&quot;).value=&quot;调用结束&quot;; } &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;input id=&quot;button&quot; type=&quot;button&quot; value=&quot;调用parent.html中的say()函数&quot; onclick=&quot;callParent()&quot;/&gt; &lt;/body&gt; &lt;/html&gt;  父页面调用子页面方法：FrameName.window.childMethod(); 子页面调用父页面方法：parent.window.parentMethod(); 注意 **注意事项** 要确保在 iframe 加载完成后再进行操作，如果 iframe 还未加载完成就开始调用里面的方法或变量，会产生错误。判断 iframe 是否加载完成有两种方法： iframe 上用 onload 事件 用 document.readyState==&quot;complete&quot;来判断  监听自定义事件 parent.html &lt;!DOCTYPE html&gt; &lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot; /&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot; /&gt; &lt;title&gt;Document&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h2&gt;嵌入b页面：&lt;/h2&gt; &lt;iframe id=&quot;b_iframe&quot; src=&quot;b.html&quot;&gt;&lt;/iframe&gt; &lt;/body&gt; &lt;script type=&quot;text/javascript&quot;&gt; var adata = &quot;huzhen120&quot;; var b_win = document.getElementById(&quot;b_iframe&quot;).contentWindow; b_win.addEventListener(&quot;tReady&quot;, function (e) { var msg = e.detail.msg; console.log(&quot;getmsg：&quot; + msg); }); &lt;/script&gt; &lt;/html&gt;  b.html &lt;!DOCTYPE html&gt; &lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot; /&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot; /&gt; &lt;title&gt;Document&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;span id=&quot;bspan&quot; style=&quot;color:red;&quot;&gt;我是嵌入的b页面&lt;/span&gt; &lt;/body&gt; &lt;script type=&quot;text/javascript&quot;&gt; var data = &quot;huzhenv5&quot;; // b页面的数据 // 测试触发 setTimeout( function () { // 1，创建事件对象 var bEvent = new CustomEvent(&quot;tReady&quot;, { detail: { msg: &quot;2000ms ok&quot;, doc: document, }, bubbles: true, // 是否冒泡 cancelable: true, // 是否可以取消事件的默认行为 }); window.dispatchEvent(bEvent); }.bind(this), 2000 ); &lt;/script&gt; &lt;/html&gt;  "},{"title":"4.跨域父子页面通信方法​","type":1,"pageTitle":"iframe","url":"/docs/前端三大件/html/iframe#4跨域父子页面通信方法","content":"如果 iframe 所链接的是外部页面，因为安全机制就不能使用同域名下的通信方式了。 父页面向子页面传递数据 实现的技巧是利用 location 对象的 hash 值，通过它传递通信数据。在父页面设置 iframe 的 src 后面多加个 data 字符串，然后在子页面中通过某种方式能即时的获取到这儿的 data 就可以了，例如： 在子页面中通过 setInterval 方法设置定时器，监听 location.href 的变化即可获得上面的 data 信息 然后子页面根据这个 data 信息进行相应的逻辑处理 子页面向父页面传递数据 实现技巧就是利用一个代理 iframe，它嵌入到子页面中，并且和父页面必须保持是同域，然后通过它充分利用上面第一种通信方式的实现原理就把子页面的数据传递给代理 iframe，然后由于代理的 iframe 和主页面是同域的，所以主页面就可以利用同域的方式获取到这些数据。使用 window.top 或者 window.parent.parent 获取浏览器最顶层 window 对象的引用。 "},{"title":"5.react 的 iframe hook​","type":1,"pageTitle":"iframe","url":"/docs/前端三大件/html/iframe#5react-的-iframe-hook","content":""},{"title":"iframe-postMessage","type":0,"sectionRef":"#","url":"/docs/前端三大件/html/iframe-postMessage","content":"","keywords":""},{"title":"1.网页内嵌/同源​","type":1,"pageTitle":"iframe-postMessage","url":"/docs/前端三大件/html/iframe-postMessage#1网页内嵌同源","content":":where(.css-1s3dcof)[class^=&quot;ant-btn&quot;],:where(.css-1s3dcof)[class*=&quot; ant-btn&quot;]{font-family:-apple-system,BlinkMacSystemFont,'Segoe UI',Roboto,'Helvetica Neue',Arial,'Noto Sans',sans-serif,'Apple Color Emoji','Segoe UI Emoji','Segoe UI Symbol','Noto Color Emoji';font-size:14px;box-sizing:border-box;}:where(.css-1s3dcof)[class^=&quot;ant-btn&quot;]::before,:where(.css-1s3dcof)[class*=&quot; ant-btn&quot;]::before,:where(.css-1s3dcof)[class^=&quot;ant-btn&quot;]::after,:where(.css-1s3dcof)[class*=&quot; ant-btn&quot;]::after{box-sizing:border-box;}:where(.css-1s3dcof)[class^=&quot;ant-btn&quot;] [class^=&quot;ant-btn&quot;],:where(.css-1s3dcof)[class*=&quot; ant-btn&quot;] [class^=&quot;ant-btn&quot;],:where(.css-1s3dcof)[class^=&quot;ant-btn&quot;] [class*=&quot; ant-btn&quot;],:where(.css-1s3dcof)[class*=&quot; ant-btn&quot;] [class*=&quot; ant-btn&quot;]{box-sizing:border-box;}:where(.css-1s3dcof)[class^=&quot;ant-btn&quot;] [class^=&quot;ant-btn&quot;]::before,:where(.css-1s3dcof)[class*=&quot; ant-btn&quot;] [class^=&quot;ant-btn&quot;]::before,:where(.css-1s3dcof)[class^=&quot;ant-btn&quot;] [class*=&quot; ant-btn&quot;]::before,:where(.css-1s3dcof)[class*=&quot; ant-btn&quot;] [class*=&quot; ant-btn&quot;]::before,:where(.css-1s3dcof)[class^=&quot;ant-btn&quot;] [class^=&quot;ant-btn&quot;]::after,:where(.css-1s3dcof)[class*=&quot; ant-btn&quot;] [class^=&quot;ant-btn&quot;]::after,:where(.css-1s3dcof)[class^=&quot;ant-btn&quot;] [class*=&quot; ant-btn&quot;]::after,:where(.css-1s3dcof)[class*=&quot; ant-btn&quot;] [class*=&quot; ant-btn&quot;]::after{box-sizing:border-box;}:where(.css-1s3dcof).ant-btn{outline:none;position:relative;display:inline-block;font-weight:400;white-space:nowrap;text-align:center;background-image:none;background-color:transparent;border:1px solid transparent;cursor:pointer;transition:all 0.2s cubic-bezier(0.645, 0.045, 0.355, 1);user-select:none;touch-action:manipulation;line-height:1.5714285714285714;color:rgba(0, 0, 0, 0.88);}:where(.css-1s3dcof).ant-btn &gt;span{display:inline-block;}:where(.css-1s3dcof).ant-btn &gt;.anticon+span,:where(.css-1s3dcof).ant-btn &gt;span+.anticon{margin-inline-start:8px;}:where(.css-1s3dcof).ant-btn:not(:disabled):focus-visible{outline:4px solid #91caff;outline-offset:1px;transition:outline-offset 0s,outline 0s;}:where(.css-1s3dcof).ant-btn-compact-item:not(:where(.css-1s3dcof).ant-btn-compact-last-item){margin-inline-end:-1px;}:where(.css-1s3dcof).ant-btn-compact-item:hover,:where(.css-1s3dcof).ant-btn-compact-item:focus,:where(.css-1s3dcof).ant-btn-compact-item:active{z-index:2;}:where(.css-1s3dcof).ant-btn-compact-item[disabled]{z-index:0;}:where(.css-1s3dcof).ant-btn-compact-item:not(:where(.css-1s3dcof).ant-btn-compact-first-item):not(:where(.css-1s3dcof).ant-btn-compact-last-item){border-radius:0;}:where(.css-1s3dcof).ant-btn-compact-item:not(:where(.css-1s3dcof).ant-btn-compact-last-item):where(.css-1s3dcof).ant-btn-compact-first-item,:where(.css-1s3dcof).ant-btn-compact-item:not(:where(.css-1s3dcof).ant-btn-compact-last-item):where(.css-1s3dcof).ant-btn-compact-first-item.ant-btn-sm,:where(.css-1s3dcof).ant-btn-compact-item:not(:where(.css-1s3dcof).ant-btn-compact-last-item):where(.css-1s3dcof).ant-btn-compact-first-item.ant-btn-lg{border-start-end-radius:0;border-end-end-radius:0;}:where(.css-1s3dcof).ant-btn-compact-item:not(:where(.css-1s3dcof).ant-btn-compact-first-item):where(.css-1s3dcof).ant-btn-compact-last-item,:where(.css-1s3dcof).ant-btn-compact-item:not(:where(.css-1s3dcof).ant-btn-compact-first-item):where(.css-1s3dcof).ant-btn-compact-last-item.ant-btn-sm,:where(.css-1s3dcof).ant-btn-compact-item:not(:where(.css-1s3dcof).ant-btn-compact-first-item):where(.css-1s3dcof).ant-btn-compact-last-item.ant-btn-lg{border-start-start-radius:0;border-end-start-radius:0;}:where(.css-1s3dcof).ant-btn-compact-vertical-item:not(:where(.css-1s3dcof).ant-btn-compact-vertical-last-item){margin-bottom:-1px;}:where(.css-1s3dcof).ant-btn-compact-vertical-item:hover,:where(.css-1s3dcof).ant-btn-compact-vertical-item:focus,:where(.css-1s3dcof).ant-btn-compact-vertical-item:active{z-index:2;}:where(.css-1s3dcof).ant-btn-compact-vertical-item[disabled]{z-index:0;}:where(.css-1s3dcof).ant-btn-compact-vertical-item:not(:where(.css-1s3dcof).ant-btn-compact-vertical-first-item):not(:where(.css-1s3dcof).ant-btn-compact-vertical-last-item){border-radius:0;}:where(.css-1s3dcof).ant-btn-compact-vertical-item:where(.css-1s3dcof).ant-btn-compact-vertical-first-item:not(:where(.css-1s3dcof).ant-btn-compact-vertical-last-item),:where(.css-1s3dcof).ant-btn-compact-vertical-item:where(.css-1s3dcof).ant-btn-compact-vertical-first-item:not(:where(.css-1s3dcof).ant-btn-compact-vertical-last-item).ant-btn-sm,:where(.css-1s3dcof).ant-btn-compact-vertical-item:where(.css-1s3dcof).ant-btn-compact-vertical-first-item:not(:where(.css-1s3dcof).ant-btn-compact-vertical-last-item).ant-btn-lg{border-end-end-radius:0;border-end-start-radius:0;}:where(.css-1s3dcof).ant-btn-compact-vertical-item:where(.css-1s3dcof).ant-btn-compact-vertical-last-item:not(:where(.css-1s3dcof).ant-btn-compact-vertical-first-item),:where(.css-1s3dcof).ant-btn-compact-vertical-item:where(.css-1s3dcof).ant-btn-compact-vertical-last-item:not(:where(.css-1s3dcof).ant-btn-compact-vertical-first-item).ant-btn-sm,:where(.css-1s3dcof).ant-btn-compact-vertical-item:where(.css-1s3dcof).ant-btn-compact-vertical-last-item:not(:where(.css-1s3dcof).ant-btn-compact-vertical-first-item).ant-btn-lg{border-start-start-radius:0;border-start-end-radius:0;}:where(.css-1s3dcof).ant-btn-icon-only:where(.css-1s3dcof).ant-btn-compact-item{flex:none;}:where(.css-1s3dcof).ant-btn-compact-item.ant-btn-primary:not([disabled])+:where(.css-1s3dcof).ant-btn-compact-item.ant-btn-primary:not([disabled]){position:relative;}:where(.css-1s3dcof).ant-btn-compact-item.ant-btn-primary:not([disabled])+:where(.css-1s3dcof).ant-btn-compact-item.ant-btn-primary:not([disabled]):after{position:absolute;top:-1px;inset-inline-start:-1px;display:inline-block;width:1px;height:calc(100% + 2px);background-color:#91caff;content:&quot;&quot;;}:where(.css-1s3dcof).ant-btn-compact-vertical-item.ant-btn-primary:not([disabled])+:where(.css-1s3dcof).ant-btn-compact-vertical-item.ant-btn-primary:not([disabled]){position:relative;}:where(.css-1s3dcof).ant-btn-compact-vertical-item.ant-btn-primary:not([disabled])+:where(.css-1s3dcof).ant-btn-compact-vertical-item.ant-btn-primary:not([disabled]):after{position:absolute;top:-1px;inset-inline-start:-1px;display:inline-block;width:calc(100% + 2px);height:1px;background-color:#91caff;content:&quot;&quot;;}:where(.css-1s3dcof).ant-btn.ant-btn-sm{font-size:14px;height:24px;padding:0px 7px;border-radius:4px;}:where(.css-1s3dcof).ant-btn.ant-btn-sm.ant-btn-icon-only{width:24px;padding-inline-start:0;padding-inline-end:0;}:where(.css-1s3dcof).ant-btn.ant-btn-sm.ant-btn-icon-only &gt;span{transform:scale(1.143);}:where(.css-1s3dcof).ant-btn.ant-btn-sm.ant-btn-loading{opacity:0.65;cursor:default;}:where(.css-1s3dcof).ant-btn.ant-btn-sm .ant-btn-loading-icon{transition:width 0.3s cubic-bezier(0.645, 0.045, 0.355, 1),opacity 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);}:where(.css-1s3dcof).ant-btn.ant-btn-sm:not(.ant-btn-icon-only) .ant-btn-loading-icon&gt;.anticon{margin-inline-end:8px;}:where(.css-1s3dcof).ant-btn.ant-btn-circle.ant-btn-sm{min-width:24px;padding-inline-start:0;padding-inline-end:0;border-radius:50%;}:where(.css-1s3dcof).ant-btn.ant-btn-round.ant-btn-sm{border-radius:24px;padding-inline-start:12px;padding-inline-end:12px;width:auto;}:where(.css-1s3dcof).ant-btn{font-size:14px;height:32px;padding:4px 15px;border-radius:6px;}:where(.css-1s3dcof).ant-btn.ant-btn-icon-only{width:32px;padding-inline-start:0;padding-inline-end:0;}:where(.css-1s3dcof).ant-btn.ant-btn-icon-only &gt;span{transform:scale(1.143);}:where(.css-1s3dcof).ant-btn.ant-btn-loading{opacity:0.65;cursor:default;}:where(.css-1s3dcof).ant-btn .ant-btn-loading-icon{transition:width 0.3s cubic-bezier(0.645, 0.045, 0.355, 1),opacity 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);}:where(.css-1s3dcof).ant-btn:not(.ant-btn-icon-only) .ant-btn-loading-icon&gt;.anticon{margin-inline-end:8px;}:where(.css-1s3dcof).ant-btn.ant-btn-circle{min-width:32px;padding-inline-start:0;padding-inline-end:0;border-radius:50%;}:where(.css-1s3dcof).ant-btn.ant-btn-round{border-radius:32px;padding-inline-start:16px;padding-inline-end:16px;width:auto;}:where(.css-1s3dcof).ant-btn.ant-btn-lg{font-size:16px;height:40px;padding:6.428571428571429px 15px;border-radius:8px;}:where(.css-1s3dcof).ant-btn.ant-btn-lg.ant-btn-icon-only{width:40px;padding-inline-start:0;padding-inline-end:0;}:where(.css-1s3dcof).ant-btn.ant-btn-lg.ant-btn-icon-only &gt;span{transform:scale(1.143);}:where(.css-1s3dcof).ant-btn.ant-btn-lg.ant-btn-loading{opacity:0.65;cursor:default;}:where(.css-1s3dcof).ant-btn.ant-btn-lg .ant-btn-loading-icon{transition:width 0.3s cubic-bezier(0.645, 0.045, 0.355, 1),opacity 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);}:where(.css-1s3dcof).ant-btn.ant-btn-lg:not(.ant-btn-icon-only) .ant-btn-loading-icon&gt;.anticon{margin-inline-end:8px;}:where(.css-1s3dcof).ant-btn.ant-btn-circle.ant-btn-lg{min-width:40px;padding-inline-start:0;padding-inline-end:0;border-radius:50%;}:where(.css-1s3dcof).ant-btn.ant-btn-round.ant-btn-lg{border-radius:40px;padding-inline-start:20px;padding-inline-end:20px;width:auto;}:where(.css-1s3dcof).ant-btn.ant-btn-block{width:100%;}:where(.css-1s3dcof).ant-btn-default{background-color:#ffffff;border-color:#d9d9d9;box-shadow:0 2px 0 rgba(0, 0, 0, 0.02);}:where(.css-1s3dcof).ant-btn-default:disabled{cursor:not-allowed;border-color:#d9d9d9;color:rgba(0, 0, 0, 0.25);background-color:rgba(0, 0, 0, 0.04);box-shadow:none;}:where(.css-1s3dcof).ant-btn-default:not(:disabled):hover{color:#4096ff;border-color:#4096ff;}:where(.css-1s3dcof).ant-btn-default:not(:disabled):active{color:#0958d9;border-color:#0958d9;}:where(.css-1s3dcof).ant-btn-default.ant-btn-background-ghost{color:#ffffff;background-color:transparent;border-color:#ffffff;box-shadow:none;}:where(.css-1s3dcof).ant-btn-default.ant-btn-background-ghost:not(:disabled):hover{background-color:transparent;}:where(.css-1s3dcof).ant-btn-default.ant-btn-background-ghost:not(:disabled):active{background-color:transparent;}:where(.css-1s3dcof).ant-btn-default.ant-btn-background-ghost:disabled{cursor:not-allowed;color:rgba(0, 0, 0, 0.25);border-color:#d9d9d9;}:where(.css-1s3dcof).ant-btn-default.ant-btn-dangerous{color:#ff4d4f;border-color:#ff4d4f;}:where(.css-1s3dcof).ant-btn-default.ant-btn-dangerous:not(:disabled):hover{color:#ff7875;border-color:#ffa39e;}:where(.css-1s3dcof).ant-btn-default.ant-btn-dangerous:not(:disabled):active{color:#d9363e;border-color:#d9363e;}:where(.css-1s3dcof).ant-btn-default.ant-btn-dangerous.ant-btn-background-ghost{color:#ff4d4f;background-color:transparent;border-color:#ff4d4f;box-shadow:none;}:where(.css-1s3dcof).ant-btn-default.ant-btn-dangerous.ant-btn-background-ghost:not(:disabled):hover{background-color:transparent;}:where(.css-1s3dcof).ant-btn-default.ant-btn-dangerous.ant-btn-background-ghost:not(:disabled):active{background-color:transparent;}:where(.css-1s3dcof).ant-btn-default.ant-btn-dangerous.ant-btn-background-ghost:disabled{cursor:not-allowed;color:rgba(0, 0, 0, 0.25);border-color:#d9d9d9;}:where(.css-1s3dcof).ant-btn-default.ant-btn-dangerous:disabled{cursor:not-allowed;border-color:#d9d9d9;color:rgba(0, 0, 0, 0.25);background-color:rgba(0, 0, 0, 0.04);box-shadow:none;}:where(.css-1s3dcof).ant-btn-primary{color:#fff;background-color:#1677ff;box-shadow:0 2px 0 rgba(5, 145, 255, 0.1);}:where(.css-1s3dcof).ant-btn-primary:disabled{cursor:not-allowed;border-color:#d9d9d9;color:rgba(0, 0, 0, 0.25);background-color:rgba(0, 0, 0, 0.04);box-shadow:none;}:where(.css-1s3dcof).ant-btn-primary:not(:disabled):hover{color:#fff;background-color:#4096ff;}:where(.css-1s3dcof).ant-btn-primary:not(:disabled):active{color:#fff;background-color:#0958d9;}:where(.css-1s3dcof).ant-btn-primary.ant-btn-background-ghost{color:#1677ff;background-color:transparent;border-color:#1677ff;box-shadow:none;}:where(.css-1s3dcof).ant-btn-primary.ant-btn-background-ghost:not(:disabled):hover{background-color:transparent;color:#4096ff;border-color:#4096ff;}:where(.css-1s3dcof).ant-btn-primary.ant-btn-background-ghost:not(:disabled):active{background-color:transparent;color:#0958d9;border-color:#0958d9;}:where(.css-1s3dcof).ant-btn-primary.ant-btn-background-ghost:disabled{cursor:not-allowed;color:rgba(0, 0, 0, 0.25);border-color:#d9d9d9;}:where(.css-1s3dcof).ant-btn-primary.ant-btn-dangerous{background-color:#ff4d4f;box-shadow:0 2px 0 rgba(255, 38, 5, 0.06);}:where(.css-1s3dcof).ant-btn-primary.ant-btn-dangerous:not(:disabled):hover{background-color:#ff7875;}:where(.css-1s3dcof).ant-btn-primary.ant-btn-dangerous:not(:disabled):active{background-color:#d9363e;}:where(.css-1s3dcof).ant-btn-primary.ant-btn-dangerous.ant-btn-background-ghost{color:#ff4d4f;background-color:transparent;border-color:#ff4d4f;box-shadow:none;}:where(.css-1s3dcof).ant-btn-primary.ant-btn-dangerous.ant-btn-background-ghost:not(:disabled):hover{background-color:transparent;color:#ff7875;border-color:#ff7875;}:where(.css-1s3dcof).ant-btn-primary.ant-btn-dangerous.ant-btn-background-ghost:not(:disabled):active{background-color:transparent;color:#d9363e;border-color:#d9363e;}:where(.css-1s3dcof).ant-btn-primary.ant-btn-dangerous.ant-btn-background-ghost:disabled{cursor:not-allowed;color:rgba(0, 0, 0, 0.25);border-color:#d9d9d9;}:where(.css-1s3dcof).ant-btn-primary.ant-btn-dangerous:disabled{cursor:not-allowed;border-color:#d9d9d9;color:rgba(0, 0, 0, 0.25);background-color:rgba(0, 0, 0, 0.04);box-shadow:none;}:where(.css-1s3dcof).ant-btn-dashed{background-color:#ffffff;border-color:#d9d9d9;box-shadow:0 2px 0 rgba(0, 0, 0, 0.02);border-style:dashed;}:where(.css-1s3dcof).ant-btn-dashed:disabled{cursor:not-allowed;border-color:#d9d9d9;color:rgba(0, 0, 0, 0.25);background-color:rgba(0, 0, 0, 0.04);box-shadow:none;}:where(.css-1s3dcof).ant-btn-dashed:not(:disabled):hover{color:#4096ff;border-color:#4096ff;}:where(.css-1s3dcof).ant-btn-dashed:not(:disabled):active{color:#0958d9;border-color:#0958d9;}:where(.css-1s3dcof).ant-btn-dashed.ant-btn-background-ghost{color:#ffffff;background-color:transparent;border-color:#ffffff;box-shadow:none;}:where(.css-1s3dcof).ant-btn-dashed.ant-btn-background-ghost:not(:disabled):hover{background-color:transparent;}:where(.css-1s3dcof).ant-btn-dashed.ant-btn-background-ghost:not(:disabled):active{background-color:transparent;}:where(.css-1s3dcof).ant-btn-dashed.ant-btn-background-ghost:disabled{cursor:not-allowed;color:rgba(0, 0, 0, 0.25);border-color:#d9d9d9;}:where(.css-1s3dcof).ant-btn-dashed.ant-btn-dangerous{color:#ff4d4f;border-color:#ff4d4f;}:where(.css-1s3dcof).ant-btn-dashed.ant-btn-dangerous:not(:disabled):hover{color:#ff7875;border-color:#ffa39e;}:where(.css-1s3dcof).ant-btn-dashed.ant-btn-dangerous:not(:disabled):active{color:#d9363e;border-color:#d9363e;}:where(.css-1s3dcof).ant-btn-dashed.ant-btn-dangerous.ant-btn-background-ghost{color:#ff4d4f;background-color:transparent;border-color:#ff4d4f;box-shadow:none;}:where(.css-1s3dcof).ant-btn-dashed.ant-btn-dangerous.ant-btn-background-ghost:not(:disabled):hover{background-color:transparent;}:where(.css-1s3dcof).ant-btn-dashed.ant-btn-dangerous.ant-btn-background-ghost:not(:disabled):active{background-color:transparent;}:where(.css-1s3dcof).ant-btn-dashed.ant-btn-dangerous.ant-btn-background-ghost:disabled{cursor:not-allowed;color:rgba(0, 0, 0, 0.25);border-color:#d9d9d9;}:where(.css-1s3dcof).ant-btn-dashed.ant-btn-dangerous:disabled{cursor:not-allowed;border-color:#d9d9d9;color:rgba(0, 0, 0, 0.25);background-color:rgba(0, 0, 0, 0.04);box-shadow:none;}:where(.css-1s3dcof).ant-btn-link{color:#1677ff;}:where(.css-1s3dcof).ant-btn-link:not(:disabled):hover{color:#69b1ff;}:where(.css-1s3dcof).ant-btn-link:not(:disabled):active{color:#0958d9;}:where(.css-1s3dcof).ant-btn-link:disabled{cursor:not-allowed;color:rgba(0, 0, 0, 0.25);}:where(.css-1s3dcof).ant-btn-link.ant-btn-dangerous{color:#ff4d4f;}:where(.css-1s3dcof).ant-btn-link.ant-btn-dangerous:not(:disabled):hover{color:#ff7875;}:where(.css-1s3dcof).ant-btn-link.ant-btn-dangerous:not(:disabled):active{color:#d9363e;}:where(.css-1s3dcof).ant-btn-link.ant-btn-dangerous:disabled{cursor:not-allowed;color:rgba(0, 0, 0, 0.25);}:where(.css-1s3dcof).ant-btn-text:not(:disabled):hover{color:rgba(0, 0, 0, 0.88);background-color:rgba(0, 0, 0, 0.06);}:where(.css-1s3dcof).ant-btn-text:not(:disabled):active{color:rgba(0, 0, 0, 0.88);background-color:rgba(0, 0, 0, 0.15);}:where(.css-1s3dcof).ant-btn-text:disabled{cursor:not-allowed;color:rgba(0, 0, 0, 0.25);}:where(.css-1s3dcof).ant-btn-text.ant-btn-dangerous{color:#ff4d4f;}:where(.css-1s3dcof).ant-btn-text.ant-btn-dangerous:disabled{cursor:not-allowed;color:rgba(0, 0, 0, 0.25);}:where(.css-1s3dcof).ant-btn-text.ant-btn-dangerous:not(:disabled):hover{color:#ff7875;background-color:#fff2f0;}:where(.css-1s3dcof).ant-btn-text.ant-btn-dangerous:not(:disabled):active{color:#ff7875;background-color:#fff2f0;}:where(.css-1s3dcof).ant-btn-group{position:relative;display:inline-flex;}:where(.css-1s3dcof).ant-btn-group &gt;span:not(:last-child),:where(.css-1s3dcof).ant-btn-group &gt;.ant-btn:not(:last-child),:where(.css-1s3dcof).ant-btn-group &gt;span:not(:last-child)&gt;.ant-btn,:where(.css-1s3dcof).ant-btn-group &gt;.ant-btn:not(:last-child)&gt;.ant-btn{border-start-end-radius:0;border-end-end-radius:0;}:where(.css-1s3dcof).ant-btn-group &gt;span:not(:first-child),:where(.css-1s3dcof).ant-btn-group &gt;.ant-btn:not(:first-child){margin-inline-start:-1px;}:where(.css-1s3dcof).ant-btn-group &gt;span:not(:first-child),:where(.css-1s3dcof).ant-btn-group &gt;.ant-btn:not(:first-child),:where(.css-1s3dcof).ant-btn-group &gt;span:not(:first-child)&gt;.ant-btn,:where(.css-1s3dcof).ant-btn-group &gt;.ant-btn:not(:first-child)&gt;.ant-btn{border-start-start-radius:0;border-end-start-radius:0;}:where(.css-1s3dcof).ant-btn-group .ant-btn{position:relative;z-index:1;}:where(.css-1s3dcof).ant-btn-group .ant-btn:hover,:where(.css-1s3dcof).ant-btn-group .ant-btn:focus,:where(.css-1s3dcof).ant-btn-group .ant-btn:active{z-index:2;}:where(.css-1s3dcof).ant-btn-group .ant-btn[disabled]{z-index:0;}:where(.css-1s3dcof).ant-btn-group .ant-btn-icon-only{font-size:14px;}:where(.css-1s3dcof).ant-btn-group &gt;span:not(:last-child):not(:disabled),:where(.css-1s3dcof).ant-btn-group &gt;.ant-btn-primary:not(:last-child):not(:disabled),:where(.css-1s3dcof).ant-btn-group &gt;span:not(:last-child)&gt;.ant-btn-primary:not(:disabled),:where(.css-1s3dcof).ant-btn-group &gt;.ant-btn-primary:not(:last-child)&gt;.ant-btn-primary:not(:disabled){border-inline-end-color:#4096ff;}:where(.css-1s3dcof).ant-btn-group &gt;span:not(:first-child):not(:disabled),:where(.css-1s3dcof).ant-btn-group &gt;.ant-btn-primary:not(:first-child):not(:disabled),:where(.css-1s3dcof).ant-btn-group &gt;span:not(:first-child)&gt;.ant-btn-primary:not(:disabled),:where(.css-1s3dcof).ant-btn-group &gt;.ant-btn-primary:not(:first-child)&gt;.ant-btn-primary:not(:disabled){border-inline-start-color:#4096ff;}:where(.css-1s3dcof).ant-btn-group &gt;span:not(:last-child):not(:disabled),:where(.css-1s3dcof).ant-btn-group &gt;.ant-btn-danger:not(:last-child):not(:disabled),:where(.css-1s3dcof).ant-btn-group &gt;span:not(:last-child)&gt;.ant-btn-danger:not(:disabled),:where(.css-1s3dcof).ant-btn-group &gt;.ant-btn-danger:not(:last-child)&gt;.ant-btn-danger:not(:disabled){border-inline-end-color:#ff7875;}:where(.css-1s3dcof).ant-btn-group &gt;span:not(:first-child):not(:disabled),:where(.css-1s3dcof).ant-btn-group &gt;.ant-btn-danger:not(:first-child):not(:disabled),:where(.css-1s3dcof).ant-btn-group &gt;span:not(:first-child)&gt;.ant-btn-danger:not(:disabled),:where(.css-1s3dcof).ant-btn-group &gt;.ant-btn-danger:not(:first-child)&gt;.ant-btn-danger:not(:disabled){border-inline-start-color:#ff7875;} 见页面测试 "},{"title":"2.跨源​","type":1,"pageTitle":"iframe-postMessage","url":"/docs/前端三大件/html/iframe-postMessage#2跨源","content":":where(.css-1s3dcof)[class^=&quot;ant-btn&quot;],:where(.css-1s3dcof)[class*=&quot; ant-btn&quot;]{font-family:-apple-system,BlinkMacSystemFont,'Segoe UI',Roboto,'Helvetica Neue',Arial,'Noto Sans',sans-serif,'Apple Color Emoji','Segoe UI Emoji','Segoe UI Symbol','Noto Color Emoji';font-size:14px;box-sizing:border-box;}:where(.css-1s3dcof)[class^=&quot;ant-btn&quot;]::before,:where(.css-1s3dcof)[class*=&quot; ant-btn&quot;]::before,:where(.css-1s3dcof)[class^=&quot;ant-btn&quot;]::after,:where(.css-1s3dcof)[class*=&quot; ant-btn&quot;]::after{box-sizing:border-box;}:where(.css-1s3dcof)[class^=&quot;ant-btn&quot;] [class^=&quot;ant-btn&quot;],:where(.css-1s3dcof)[class*=&quot; ant-btn&quot;] [class^=&quot;ant-btn&quot;],:where(.css-1s3dcof)[class^=&quot;ant-btn&quot;] [class*=&quot; ant-btn&quot;],:where(.css-1s3dcof)[class*=&quot; ant-btn&quot;] [class*=&quot; ant-btn&quot;]{box-sizing:border-box;}:where(.css-1s3dcof)[class^=&quot;ant-btn&quot;] [class^=&quot;ant-btn&quot;]::before,:where(.css-1s3dcof)[class*=&quot; ant-btn&quot;] [class^=&quot;ant-btn&quot;]::before,:where(.css-1s3dcof)[class^=&quot;ant-btn&quot;] [class*=&quot; ant-btn&quot;]::before,:where(.css-1s3dcof)[class*=&quot; ant-btn&quot;] [class*=&quot; ant-btn&quot;]::before,:where(.css-1s3dcof)[class^=&quot;ant-btn&quot;] [class^=&quot;ant-btn&quot;]::after,:where(.css-1s3dcof)[class*=&quot; ant-btn&quot;] [class^=&quot;ant-btn&quot;]::after,:where(.css-1s3dcof)[class^=&quot;ant-btn&quot;] [class*=&quot; ant-btn&quot;]::after,:where(.css-1s3dcof)[class*=&quot; ant-btn&quot;] [class*=&quot; ant-btn&quot;]::after{box-sizing:border-box;}:where(.css-1s3dcof).ant-btn{outline:none;position:relative;display:inline-block;font-weight:400;white-space:nowrap;text-align:center;background-image:none;background-color:transparent;border:1px solid transparent;cursor:pointer;transition:all 0.2s cubic-bezier(0.645, 0.045, 0.355, 1);user-select:none;touch-action:manipulation;line-height:1.5714285714285714;color:rgba(0, 0, 0, 0.88);}:where(.css-1s3dcof).ant-btn &gt;span{display:inline-block;}:where(.css-1s3dcof).ant-btn &gt;.anticon+span,:where(.css-1s3dcof).ant-btn &gt;span+.anticon{margin-inline-start:8px;}:where(.css-1s3dcof).ant-btn:not(:disabled):focus-visible{outline:4px solid #91caff;outline-offset:1px;transition:outline-offset 0s,outline 0s;}:where(.css-1s3dcof).ant-btn-compact-item:not(:where(.css-1s3dcof).ant-btn-compact-last-item){margin-inline-end:-1px;}:where(.css-1s3dcof).ant-btn-compact-item:hover,:where(.css-1s3dcof).ant-btn-compact-item:focus,:where(.css-1s3dcof).ant-btn-compact-item:active{z-index:2;}:where(.css-1s3dcof).ant-btn-compact-item[disabled]{z-index:0;}:where(.css-1s3dcof).ant-btn-compact-item:not(:where(.css-1s3dcof).ant-btn-compact-first-item):not(:where(.css-1s3dcof).ant-btn-compact-last-item){border-radius:0;}:where(.css-1s3dcof).ant-btn-compact-item:not(:where(.css-1s3dcof).ant-btn-compact-last-item):where(.css-1s3dcof).ant-btn-compact-first-item,:where(.css-1s3dcof).ant-btn-compact-item:not(:where(.css-1s3dcof).ant-btn-compact-last-item):where(.css-1s3dcof).ant-btn-compact-first-item.ant-btn-sm,:where(.css-1s3dcof).ant-btn-compact-item:not(:where(.css-1s3dcof).ant-btn-compact-last-item):where(.css-1s3dcof).ant-btn-compact-first-item.ant-btn-lg{border-start-end-radius:0;border-end-end-radius:0;}:where(.css-1s3dcof).ant-btn-compact-item:not(:where(.css-1s3dcof).ant-btn-compact-first-item):where(.css-1s3dcof).ant-btn-compact-last-item,:where(.css-1s3dcof).ant-btn-compact-item:not(:where(.css-1s3dcof).ant-btn-compact-first-item):where(.css-1s3dcof).ant-btn-compact-last-item.ant-btn-sm,:where(.css-1s3dcof).ant-btn-compact-item:not(:where(.css-1s3dcof).ant-btn-compact-first-item):where(.css-1s3dcof).ant-btn-compact-last-item.ant-btn-lg{border-start-start-radius:0;border-end-start-radius:0;}:where(.css-1s3dcof).ant-btn-compact-vertical-item:not(:where(.css-1s3dcof).ant-btn-compact-vertical-last-item){margin-bottom:-1px;}:where(.css-1s3dcof).ant-btn-compact-vertical-item:hover,:where(.css-1s3dcof).ant-btn-compact-vertical-item:focus,:where(.css-1s3dcof).ant-btn-compact-vertical-item:active{z-index:2;}:where(.css-1s3dcof).ant-btn-compact-vertical-item[disabled]{z-index:0;}:where(.css-1s3dcof).ant-btn-compact-vertical-item:not(:where(.css-1s3dcof).ant-btn-compact-vertical-first-item):not(:where(.css-1s3dcof).ant-btn-compact-vertical-last-item){border-radius:0;}:where(.css-1s3dcof).ant-btn-compact-vertical-item:where(.css-1s3dcof).ant-btn-compact-vertical-first-item:not(:where(.css-1s3dcof).ant-btn-compact-vertical-last-item),:where(.css-1s3dcof).ant-btn-compact-vertical-item:where(.css-1s3dcof).ant-btn-compact-vertical-first-item:not(:where(.css-1s3dcof).ant-btn-compact-vertical-last-item).ant-btn-sm,:where(.css-1s3dcof).ant-btn-compact-vertical-item:where(.css-1s3dcof).ant-btn-compact-vertical-first-item:not(:where(.css-1s3dcof).ant-btn-compact-vertical-last-item).ant-btn-lg{border-end-end-radius:0;border-end-start-radius:0;}:where(.css-1s3dcof).ant-btn-compact-vertical-item:where(.css-1s3dcof).ant-btn-compact-vertical-last-item:not(:where(.css-1s3dcof).ant-btn-compact-vertical-first-item),:where(.css-1s3dcof).ant-btn-compact-vertical-item:where(.css-1s3dcof).ant-btn-compact-vertical-last-item:not(:where(.css-1s3dcof).ant-btn-compact-vertical-first-item).ant-btn-sm,:where(.css-1s3dcof).ant-btn-compact-vertical-item:where(.css-1s3dcof).ant-btn-compact-vertical-last-item:not(:where(.css-1s3dcof).ant-btn-compact-vertical-first-item).ant-btn-lg{border-start-start-radius:0;border-start-end-radius:0;}:where(.css-1s3dcof).ant-btn-icon-only:where(.css-1s3dcof).ant-btn-compact-item{flex:none;}:where(.css-1s3dcof).ant-btn-compact-item.ant-btn-primary:not([disabled])+:where(.css-1s3dcof).ant-btn-compact-item.ant-btn-primary:not([disabled]){position:relative;}:where(.css-1s3dcof).ant-btn-compact-item.ant-btn-primary:not([disabled])+:where(.css-1s3dcof).ant-btn-compact-item.ant-btn-primary:not([disabled]):after{position:absolute;top:-1px;inset-inline-start:-1px;display:inline-block;width:1px;height:calc(100% + 2px);background-color:#91caff;content:&quot;&quot;;}:where(.css-1s3dcof).ant-btn-compact-vertical-item.ant-btn-primary:not([disabled])+:where(.css-1s3dcof).ant-btn-compact-vertical-item.ant-btn-primary:not([disabled]){position:relative;}:where(.css-1s3dcof).ant-btn-compact-vertical-item.ant-btn-primary:not([disabled])+:where(.css-1s3dcof).ant-btn-compact-vertical-item.ant-btn-primary:not([disabled]):after{position:absolute;top:-1px;inset-inline-start:-1px;display:inline-block;width:calc(100% + 2px);height:1px;background-color:#91caff;content:&quot;&quot;;}:where(.css-1s3dcof).ant-btn.ant-btn-sm{font-size:14px;height:24px;padding:0px 7px;border-radius:4px;}:where(.css-1s3dcof).ant-btn.ant-btn-sm.ant-btn-icon-only{width:24px;padding-inline-start:0;padding-inline-end:0;}:where(.css-1s3dcof).ant-btn.ant-btn-sm.ant-btn-icon-only &gt;span{transform:scale(1.143);}:where(.css-1s3dcof).ant-btn.ant-btn-sm.ant-btn-loading{opacity:0.65;cursor:default;}:where(.css-1s3dcof).ant-btn.ant-btn-sm .ant-btn-loading-icon{transition:width 0.3s cubic-bezier(0.645, 0.045, 0.355, 1),opacity 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);}:where(.css-1s3dcof).ant-btn.ant-btn-sm:not(.ant-btn-icon-only) .ant-btn-loading-icon&gt;.anticon{margin-inline-end:8px;}:where(.css-1s3dcof).ant-btn.ant-btn-circle.ant-btn-sm{min-width:24px;padding-inline-start:0;padding-inline-end:0;border-radius:50%;}:where(.css-1s3dcof).ant-btn.ant-btn-round.ant-btn-sm{border-radius:24px;padding-inline-start:12px;padding-inline-end:12px;width:auto;}:where(.css-1s3dcof).ant-btn{font-size:14px;height:32px;padding:4px 15px;border-radius:6px;}:where(.css-1s3dcof).ant-btn.ant-btn-icon-only{width:32px;padding-inline-start:0;padding-inline-end:0;}:where(.css-1s3dcof).ant-btn.ant-btn-icon-only &gt;span{transform:scale(1.143);}:where(.css-1s3dcof).ant-btn.ant-btn-loading{opacity:0.65;cursor:default;}:where(.css-1s3dcof).ant-btn .ant-btn-loading-icon{transition:width 0.3s cubic-bezier(0.645, 0.045, 0.355, 1),opacity 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);}:where(.css-1s3dcof).ant-btn:not(.ant-btn-icon-only) .ant-btn-loading-icon&gt;.anticon{margin-inline-end:8px;}:where(.css-1s3dcof).ant-btn.ant-btn-circle{min-width:32px;padding-inline-start:0;padding-inline-end:0;border-radius:50%;}:where(.css-1s3dcof).ant-btn.ant-btn-round{border-radius:32px;padding-inline-start:16px;padding-inline-end:16px;width:auto;}:where(.css-1s3dcof).ant-btn.ant-btn-lg{font-size:16px;height:40px;padding:6.428571428571429px 15px;border-radius:8px;}:where(.css-1s3dcof).ant-btn.ant-btn-lg.ant-btn-icon-only{width:40px;padding-inline-start:0;padding-inline-end:0;}:where(.css-1s3dcof).ant-btn.ant-btn-lg.ant-btn-icon-only &gt;span{transform:scale(1.143);}:where(.css-1s3dcof).ant-btn.ant-btn-lg.ant-btn-loading{opacity:0.65;cursor:default;}:where(.css-1s3dcof).ant-btn.ant-btn-lg .ant-btn-loading-icon{transition:width 0.3s cubic-bezier(0.645, 0.045, 0.355, 1),opacity 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);}:where(.css-1s3dcof).ant-btn.ant-btn-lg:not(.ant-btn-icon-only) .ant-btn-loading-icon&gt;.anticon{margin-inline-end:8px;}:where(.css-1s3dcof).ant-btn.ant-btn-circle.ant-btn-lg{min-width:40px;padding-inline-start:0;padding-inline-end:0;border-radius:50%;}:where(.css-1s3dcof).ant-btn.ant-btn-round.ant-btn-lg{border-radius:40px;padding-inline-start:20px;padding-inline-end:20px;width:auto;}:where(.css-1s3dcof).ant-btn.ant-btn-block{width:100%;}:where(.css-1s3dcof).ant-btn-default{background-color:#ffffff;border-color:#d9d9d9;box-shadow:0 2px 0 rgba(0, 0, 0, 0.02);}:where(.css-1s3dcof).ant-btn-default:disabled{cursor:not-allowed;border-color:#d9d9d9;color:rgba(0, 0, 0, 0.25);background-color:rgba(0, 0, 0, 0.04);box-shadow:none;}:where(.css-1s3dcof).ant-btn-default:not(:disabled):hover{color:#4096ff;border-color:#4096ff;}:where(.css-1s3dcof).ant-btn-default:not(:disabled):active{color:#0958d9;border-color:#0958d9;}:where(.css-1s3dcof).ant-btn-default.ant-btn-background-ghost{color:#ffffff;background-color:transparent;border-color:#ffffff;box-shadow:none;}:where(.css-1s3dcof).ant-btn-default.ant-btn-background-ghost:not(:disabled):hover{background-color:transparent;}:where(.css-1s3dcof).ant-btn-default.ant-btn-background-ghost:not(:disabled):active{background-color:transparent;}:where(.css-1s3dcof).ant-btn-default.ant-btn-background-ghost:disabled{cursor:not-allowed;color:rgba(0, 0, 0, 0.25);border-color:#d9d9d9;}:where(.css-1s3dcof).ant-btn-default.ant-btn-dangerous{color:#ff4d4f;border-color:#ff4d4f;}:where(.css-1s3dcof).ant-btn-default.ant-btn-dangerous:not(:disabled):hover{color:#ff7875;border-color:#ffa39e;}:where(.css-1s3dcof).ant-btn-default.ant-btn-dangerous:not(:disabled):active{color:#d9363e;border-color:#d9363e;}:where(.css-1s3dcof).ant-btn-default.ant-btn-dangerous.ant-btn-background-ghost{color:#ff4d4f;background-color:transparent;border-color:#ff4d4f;box-shadow:none;}:where(.css-1s3dcof).ant-btn-default.ant-btn-dangerous.ant-btn-background-ghost:not(:disabled):hover{background-color:transparent;}:where(.css-1s3dcof).ant-btn-default.ant-btn-dangerous.ant-btn-background-ghost:not(:disabled):active{background-color:transparent;}:where(.css-1s3dcof).ant-btn-default.ant-btn-dangerous.ant-btn-background-ghost:disabled{cursor:not-allowed;color:rgba(0, 0, 0, 0.25);border-color:#d9d9d9;}:where(.css-1s3dcof).ant-btn-default.ant-btn-dangerous:disabled{cursor:not-allowed;border-color:#d9d9d9;color:rgba(0, 0, 0, 0.25);background-color:rgba(0, 0, 0, 0.04);box-shadow:none;}:where(.css-1s3dcof).ant-btn-primary{color:#fff;background-color:#1677ff;box-shadow:0 2px 0 rgba(5, 145, 255, 0.1);}:where(.css-1s3dcof).ant-btn-primary:disabled{cursor:not-allowed;border-color:#d9d9d9;color:rgba(0, 0, 0, 0.25);background-color:rgba(0, 0, 0, 0.04);box-shadow:none;}:where(.css-1s3dcof).ant-btn-primary:not(:disabled):hover{color:#fff;background-color:#4096ff;}:where(.css-1s3dcof).ant-btn-primary:not(:disabled):active{color:#fff;background-color:#0958d9;}:where(.css-1s3dcof).ant-btn-primary.ant-btn-background-ghost{color:#1677ff;background-color:transparent;border-color:#1677ff;box-shadow:none;}:where(.css-1s3dcof).ant-btn-primary.ant-btn-background-ghost:not(:disabled):hover{background-color:transparent;color:#4096ff;border-color:#4096ff;}:where(.css-1s3dcof).ant-btn-primary.ant-btn-background-ghost:not(:disabled):active{background-color:transparent;color:#0958d9;border-color:#0958d9;}:where(.css-1s3dcof).ant-btn-primary.ant-btn-background-ghost:disabled{cursor:not-allowed;color:rgba(0, 0, 0, 0.25);border-color:#d9d9d9;}:where(.css-1s3dcof).ant-btn-primary.ant-btn-dangerous{background-color:#ff4d4f;box-shadow:0 2px 0 rgba(255, 38, 5, 0.06);}:where(.css-1s3dcof).ant-btn-primary.ant-btn-dangerous:not(:disabled):hover{background-color:#ff7875;}:where(.css-1s3dcof).ant-btn-primary.ant-btn-dangerous:not(:disabled):active{background-color:#d9363e;}:where(.css-1s3dcof).ant-btn-primary.ant-btn-dangerous.ant-btn-background-ghost{color:#ff4d4f;background-color:transparent;border-color:#ff4d4f;box-shadow:none;}:where(.css-1s3dcof).ant-btn-primary.ant-btn-dangerous.ant-btn-background-ghost:not(:disabled):hover{background-color:transparent;color:#ff7875;border-color:#ff7875;}:where(.css-1s3dcof).ant-btn-primary.ant-btn-dangerous.ant-btn-background-ghost:not(:disabled):active{background-color:transparent;color:#d9363e;border-color:#d9363e;}:where(.css-1s3dcof).ant-btn-primary.ant-btn-dangerous.ant-btn-background-ghost:disabled{cursor:not-allowed;color:rgba(0, 0, 0, 0.25);border-color:#d9d9d9;}:where(.css-1s3dcof).ant-btn-primary.ant-btn-dangerous:disabled{cursor:not-allowed;border-color:#d9d9d9;color:rgba(0, 0, 0, 0.25);background-color:rgba(0, 0, 0, 0.04);box-shadow:none;}:where(.css-1s3dcof).ant-btn-dashed{background-color:#ffffff;border-color:#d9d9d9;box-shadow:0 2px 0 rgba(0, 0, 0, 0.02);border-style:dashed;}:where(.css-1s3dcof).ant-btn-dashed:disabled{cursor:not-allowed;border-color:#d9d9d9;color:rgba(0, 0, 0, 0.25);background-color:rgba(0, 0, 0, 0.04);box-shadow:none;}:where(.css-1s3dcof).ant-btn-dashed:not(:disabled):hover{color:#4096ff;border-color:#4096ff;}:where(.css-1s3dcof).ant-btn-dashed:not(:disabled):active{color:#0958d9;border-color:#0958d9;}:where(.css-1s3dcof).ant-btn-dashed.ant-btn-background-ghost{color:#ffffff;background-color:transparent;border-color:#ffffff;box-shadow:none;}:where(.css-1s3dcof).ant-btn-dashed.ant-btn-background-ghost:not(:disabled):hover{background-color:transparent;}:where(.css-1s3dcof).ant-btn-dashed.ant-btn-background-ghost:not(:disabled):active{background-color:transparent;}:where(.css-1s3dcof).ant-btn-dashed.ant-btn-background-ghost:disabled{cursor:not-allowed;color:rgba(0, 0, 0, 0.25);border-color:#d9d9d9;}:where(.css-1s3dcof).ant-btn-dashed.ant-btn-dangerous{color:#ff4d4f;border-color:#ff4d4f;}:where(.css-1s3dcof).ant-btn-dashed.ant-btn-dangerous:not(:disabled):hover{color:#ff7875;border-color:#ffa39e;}:where(.css-1s3dcof).ant-btn-dashed.ant-btn-dangerous:not(:disabled):active{color:#d9363e;border-color:#d9363e;}:where(.css-1s3dcof).ant-btn-dashed.ant-btn-dangerous.ant-btn-background-ghost{color:#ff4d4f;background-color:transparent;border-color:#ff4d4f;box-shadow:none;}:where(.css-1s3dcof).ant-btn-dashed.ant-btn-dangerous.ant-btn-background-ghost:not(:disabled):hover{background-color:transparent;}:where(.css-1s3dcof).ant-btn-dashed.ant-btn-dangerous.ant-btn-background-ghost:not(:disabled):active{background-color:transparent;}:where(.css-1s3dcof).ant-btn-dashed.ant-btn-dangerous.ant-btn-background-ghost:disabled{cursor:not-allowed;color:rgba(0, 0, 0, 0.25);border-color:#d9d9d9;}:where(.css-1s3dcof).ant-btn-dashed.ant-btn-dangerous:disabled{cursor:not-allowed;border-color:#d9d9d9;color:rgba(0, 0, 0, 0.25);background-color:rgba(0, 0, 0, 0.04);box-shadow:none;}:where(.css-1s3dcof).ant-btn-link{color:#1677ff;}:where(.css-1s3dcof).ant-btn-link:not(:disabled):hover{color:#69b1ff;}:where(.css-1s3dcof).ant-btn-link:not(:disabled):active{color:#0958d9;}:where(.css-1s3dcof).ant-btn-link:disabled{cursor:not-allowed;color:rgba(0, 0, 0, 0.25);}:where(.css-1s3dcof).ant-btn-link.ant-btn-dangerous{color:#ff4d4f;}:where(.css-1s3dcof).ant-btn-link.ant-btn-dangerous:not(:disabled):hover{color:#ff7875;}:where(.css-1s3dcof).ant-btn-link.ant-btn-dangerous:not(:disabled):active{color:#d9363e;}:where(.css-1s3dcof).ant-btn-link.ant-btn-dangerous:disabled{cursor:not-allowed;color:rgba(0, 0, 0, 0.25);}:where(.css-1s3dcof).ant-btn-text:not(:disabled):hover{color:rgba(0, 0, 0, 0.88);background-color:rgba(0, 0, 0, 0.06);}:where(.css-1s3dcof).ant-btn-text:not(:disabled):active{color:rgba(0, 0, 0, 0.88);background-color:rgba(0, 0, 0, 0.15);}:where(.css-1s3dcof).ant-btn-text:disabled{cursor:not-allowed;color:rgba(0, 0, 0, 0.25);}:where(.css-1s3dcof).ant-btn-text.ant-btn-dangerous{color:#ff4d4f;}:where(.css-1s3dcof).ant-btn-text.ant-btn-dangerous:disabled{cursor:not-allowed;color:rgba(0, 0, 0, 0.25);}:where(.css-1s3dcof).ant-btn-text.ant-btn-dangerous:not(:disabled):hover{color:#ff7875;background-color:#fff2f0;}:where(.css-1s3dcof).ant-btn-text.ant-btn-dangerous:not(:disabled):active{color:#ff7875;background-color:#fff2f0;}:where(.css-1s3dcof).ant-btn-group{position:relative;display:inline-flex;}:where(.css-1s3dcof).ant-btn-group &gt;span:not(:last-child),:where(.css-1s3dcof).ant-btn-group &gt;.ant-btn:not(:last-child),:where(.css-1s3dcof).ant-btn-group &gt;span:not(:last-child)&gt;.ant-btn,:where(.css-1s3dcof).ant-btn-group &gt;.ant-btn:not(:last-child)&gt;.ant-btn{border-start-end-radius:0;border-end-end-radius:0;}:where(.css-1s3dcof).ant-btn-group &gt;span:not(:first-child),:where(.css-1s3dcof).ant-btn-group &gt;.ant-btn:not(:first-child){margin-inline-start:-1px;}:where(.css-1s3dcof).ant-btn-group &gt;span:not(:first-child),:where(.css-1s3dcof).ant-btn-group &gt;.ant-btn:not(:first-child),:where(.css-1s3dcof).ant-btn-group &gt;span:not(:first-child)&gt;.ant-btn,:where(.css-1s3dcof).ant-btn-group &gt;.ant-btn:not(:first-child)&gt;.ant-btn{border-start-start-radius:0;border-end-start-radius:0;}:where(.css-1s3dcof).ant-btn-group .ant-btn{position:relative;z-index:1;}:where(.css-1s3dcof).ant-btn-group .ant-btn:hover,:where(.css-1s3dcof).ant-btn-group .ant-btn:focus,:where(.css-1s3dcof).ant-btn-group .ant-btn:active{z-index:2;}:where(.css-1s3dcof).ant-btn-group .ant-btn[disabled]{z-index:0;}:where(.css-1s3dcof).ant-btn-group .ant-btn-icon-only{font-size:14px;}:where(.css-1s3dcof).ant-btn-group &gt;span:not(:last-child):not(:disabled),:where(.css-1s3dcof).ant-btn-group &gt;.ant-btn-primary:not(:last-child):not(:disabled),:where(.css-1s3dcof).ant-btn-group &gt;span:not(:last-child)&gt;.ant-btn-primary:not(:disabled),:where(.css-1s3dcof).ant-btn-group &gt;.ant-btn-primary:not(:last-child)&gt;.ant-btn-primary:not(:disabled){border-inline-end-color:#4096ff;}:where(.css-1s3dcof).ant-btn-group &gt;span:not(:first-child):not(:disabled),:where(.css-1s3dcof).ant-btn-group &gt;.ant-btn-primary:not(:first-child):not(:disabled),:where(.css-1s3dcof).ant-btn-group &gt;span:not(:first-child)&gt;.ant-btn-primary:not(:disabled),:where(.css-1s3dcof).ant-btn-group &gt;.ant-btn-primary:not(:first-child)&gt;.ant-btn-primary:not(:disabled){border-inline-start-color:#4096ff;}:where(.css-1s3dcof).ant-btn-group &gt;span:not(:last-child):not(:disabled),:where(.css-1s3dcof).ant-btn-group &gt;.ant-btn-danger:not(:last-child):not(:disabled),:where(.css-1s3dcof).ant-btn-group &gt;span:not(:last-child)&gt;.ant-btn-danger:not(:disabled),:where(.css-1s3dcof).ant-btn-group &gt;.ant-btn-danger:not(:last-child)&gt;.ant-btn-danger:not(:disabled){border-inline-end-color:#ff7875;}:where(.css-1s3dcof).ant-btn-group &gt;span:not(:first-child):not(:disabled),:where(.css-1s3dcof).ant-btn-group &gt;.ant-btn-danger:not(:first-child):not(:disabled),:where(.css-1s3dcof).ant-btn-group &gt;span:not(:first-child)&gt;.ant-btn-danger:not(:disabled),:where(.css-1s3dcof).ant-btn-group &gt;.ant-btn-danger:not(:first-child)&gt;.ant-btn-danger:not(:disabled){border-inline-start-color:#ff7875;} 见页面测试 "},{"title":"全局拦截器","type":0,"sectionRef":"#","url":"/docs/项目实践/访问全局拦截器/全局拦截器","content":"","keywords":""},{"title":"1. axios 全局拦截器​","type":1,"pageTitle":"全局拦截器","url":"/docs/项目实践/访问全局拦截器/全局拦截器#1-axios-全局拦截器","content":"import axios from &quot;axios&quot;;//引入axios import { message } from &quot;antd&quot;;//引入message组件 // 1.封装实例再导出 const instance = axios.create({ baseURL: '',//公共路径可以提取到此处 timeout: 10000,//过期时间，超过此事件后会出现timeout headers: { // Authorization:&quot;···&quot; //如果是内嵌页面也可以在这里配置 }//默认请求头，看后端接口是否要求 }); // 2.直接配置Axios axios.default={ baseURL: '',//公共路径可以提取到此处 timeout: 10000,//过期时间，超过此事件后会出现timeout headers: { // Authorization:&quot;···&quot; //如果是内嵌页面也可以在这里配置 }//默认请求头，看后端接口是否要求 } // 3.拦截器 axios.interceptors.request.use(function (config) { // 在发送请求之前做些什么 const token=Cookies.get('···'); if(token)config.headers['Authorization']=`bearer ${token}` return config; }, function (error) { // 对请求错误做些什么 return Promise.reject(error); } axios.interceptors.response.use(function (response) { // 对响应数据做点什么 if (response.data.status == 200) { //请求成功提示 message.info({ type: &quot;success&quot;, message: response.data.msg }); } return response; }, function (error) { // 对响应错误做点什么 if (error &amp;&amp; error.response) {//对各种响应码做提示，也可进行其它操作 switch (error.response.status) { case 400: message.info( &quot;错误请求&quot; ); break; case 401: message.info( &quot;未授权，请重新登录&quot; ); break; case 403: message.info( &quot;拒绝访问&quot; ); break; case 404: message.info( &quot;未找到该资源&quot; ); break; case 405: message.info( &quot;请求方法未允许&quot; ); break; case 408: message.info( &quot;请求超时&quot; ); break; case 500: message.info( &quot;服务器端出错&quot; ); break; case 501: message.info( &quot;网络未实现&quot; ); break; case 502: message.info( &quot;网络错误&quot; ); break; case 503: message.info( &quot;服务不可用&quot; ); break; case 504: message.info( &quot;网络超时&quot; ); break; case 505: message.info( &quot;http版本不支持该请求&quot; ); break; default: message.info(`'连接错误'${error.response.status}`); } } else { message.info(&quot;连接到服务器失败&quot;); } return Promise.reject(error); });  "},{"title":"2. jquery.ajax 全局拦截器​","type":1,"pageTitle":"全局拦截器","url":"/docs/项目实践/访问全局拦截器/全局拦截器#2-jqueryajax-全局拦截器","content":"const token = Cookies.get(&quot;···&quot;); if ($) { $(document).ajaxSend(function (event, jqxhr, config) { jqxhr.setRequestHeader(&quot;Authorization&quot;, `bearer ${token}`); }); }  "},{"title":"3. angularjs 1.x $http 全局拦截器​","type":1,"pageTitle":"全局拦截器","url":"/docs/项目实践/访问全局拦截器/全局拦截器#3-angularjs-1x-http-全局拦截器","content":"$HTTP API 是基于 $q 服务暴露的 deferred/promise APIs 快捷使用方式： $http.get/$http.head/$http.post/$http.put $http.delete/$http.jsonp/$http.patch angular.module(&quot;xxx&quot;,[]) .config([&quot;$httpProvider&quot;,function($httpProvider){ const token='···'; $httpProvider.defaults.headers.common['Authorization']=`bearer ${token}` $httpProvider.defaults.headers.post = {&quot;my-header&quot;:&quot;value&quot;} $httpProvider.interceptors.push(&quot;yourInterceptors&quot;); $httpProvider.interceptors.push(function($q, dependency1, dependency2) { return { 'request': function(config) { //(&quot;body&quot;).append(&quot;&lt;div&gt;这里是个遮罩层&lt;/div&gt;&quot;); }, 'response': function(response) { //&lt;div&gt;这里是个遮罩层&lt;/div&gt;.remove() } }; }); }]) .factory(&quot;yourInterceptors&quot;,[&quot;$q&quot;,&quot;dependency&quot;, function($q,dependency){ return { &quot;request&quot;:function(config){ // do something on success return config; }， &quot;requestError&quot;:function(rejection){ // do something on error If(canRecover(rejection)){ return responseOrNewPromise } return $q.reject(rejection); }, &quot;response&quot;:function(response){ // do something on success return response; }, &quot;responseError&quot;:function(rejection){ // do something on error If(canRecover(rejection)){ return responseOrNewPromise } return $q.reject(rejection); } }; }]).controller(&quot;testCtrl&quot;,[&quot;$http&quot;,&quot;$httpParamSerializerJQLike&quot;,&quot;$compile&quot;,function($http,$httpParamSerializerJQLike,$compile){ const data = { id: 1, value: &quot;hello&quot; };// $http({ method: &quot;post&quot;, data: data,//Form Data = {&quot;id&quot;:1,&quot;value&quot;:&quot;hello&quot;} url: &quot;/url&quot;, headers: { &quot;Content-Type&quot;: &quot;application/x-www-form-urlencoded&quot; } }).success(function (d) { console.log(d); }).error(function(error){console.log(error);}); $http({ method: &quot;post&quot;, data: $httpParamSerializerJQLike(data),//Form Data 变成 id:1 value:hello url: &quot;/url&quot;, headers: { &quot;Content-Type&quot;: &quot;application/x-www-form-urlencoded&quot; } }).success(function(d){ console.log(d);}).error(function(error){ console.log(error);}); }]);  "},{"title":"js原生目录","type":0,"sectionRef":"#","url":"/docs/项目实践/项目小实例/js原生目录","content":"js原生目录 动态水滴 见页面测试 图片验证码见页面测试","keywords":""},{"title":"oss","type":0,"sectionRef":"#","url":"/docs/云服务/阿里云/oss","content":"oss ssh root@ip地址 密码 //大小写数字 //进入之后 apt update apt install git curl -sL https://deb.nodesource.com/setup_16.x | sudo -E bash - apt install nodejs apt install yarn apt install nginx //加上sudo表示管理员 //卸载yarn apt remove testcmd apt remove yarn npm i yarn -g ","keywords":""},{"title":"快捷进行注释","type":0,"sectionRef":"#","url":"/docs/项目实践/vscode/插件/快捷进行注释","content":"","keywords":""},{"title":"1.KoroFileHeader​","type":1,"pageTitle":"快捷进行注释","url":"/docs/项目实践/vscode/插件/快捷进行注释#1korofileheader","content":"1.1 设置&gt;拓展&gt;配置文件 1.2 插入配置代码 &quot;fileheader.configObj&quot;: { &quot;autoAdd&quot;: false, // 创建文件自动添加注释 }, // 文件头部注释 &quot;fileheader.customMade&quot;: { &quot;Descripttion&quot;:&quot;&quot;, &quot;version&quot;:&quot;&quot;, &quot;Author&quot;:&quot;congsir&quot;, &quot;Date&quot;:&quot;Do not edit&quot;, &quot;LastEditors&quot;:&quot;&quot;, &quot;LastEditTime&quot;:&quot;Do not Edit&quot; }, //函数注释 &quot;fileheader.cursorMode&quot;: { &quot;name&quot;:&quot;&quot;, &quot;msg&quot;:&quot;&quot;, &quot;param&quot;:&quot;&quot;, &quot;return&quot;:&quot;&quot; }  1.3 命令快捷键 添加头部注释：windows快捷键：ctrl+win+i 键 （ctrl+alt+i 无效） 添加函数注释：windows快捷键：ctrl+win+t 键（ctrl+alt+t 无效） "},{"title":"deploy","type":0,"sectionRef":"#","url":"/docs/devops/k8s/deploy","content":"deploy deploy","keywords":""},{"title":"dockerFile","type":0,"sectionRef":"#","url":"/docs/devops/k8s/dockerFile0","content":"dockerFile","keywords":""},{"title":"nginx","type":0,"sectionRef":"#","url":"/docs/devops/k8s/nginx","content":"nginx nginx","keywords":""},{"title":"serveices","type":0,"sectionRef":"#","url":"/docs/devops/k8s/serveices","content":"serveices servy","keywords":""},{"title":"ssl设置","type":0,"sectionRef":"#","url":"/docs/devops/nginx/ssl设置","content":"ssl设置 listen 443 ssl default_server; ssl_certificate /etc/nginx/ssl/full_chain.pem; ssl_certificate_key /etc/nginx/ssl/private.key; ssl_session_timeout 5m; ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4; #表示使用的加密套件的类型。 ssl_protocols TLSv1.1 TLSv1.2 TLSv1.3; #表示使用的 TLS 协议的类型。 ssl_prefer_server_ciphers on; ","keywords":""},{"title":"yaml","type":0,"sectionRef":"#","url":"/docs/devops/nginx/yaml","content":"yaml yaml","keywords":""},{"title":"nginx-exe","type":0,"sectionRef":"#","url":"/docs/devops/nginx/nginx-exe","content":"","keywords":""},{"title":"nginx常规配置​","type":1,"pageTitle":"nginx-exe","url":"/docs/devops/nginx/nginx-exe#nginx常规配置","content":" server { listen 80 ; listen [::]:80 ; root /var/www/shop/dist; index index.html index.htm index.nginx-debian.html; server_name _; location / { try_files $uri $uri/ /index; } location ^~/api/ { proxy_pass https://api.shop.eduwork.cn; # 后端接口地址 add_header 'Access-Control-Allow-Origin' '*'; # 跨域 # rewrite ^/api/(.*)$ /$1 break; # 删除配置规则 } }  "},{"title":"基本配置","type":0,"sectionRef":"#","url":"/docs/intro/配置/配置babel/基本配置","content":"","keywords":""},{"title":"安装​","type":1,"pageTitle":"基本配置","url":"/docs/intro/配置/配置babel/基本配置#安装","content":"npm i -D @babel/core @babel/cli @babel/preset-env @babel/preset-react @babel/polyfill @babel/plugin-transform-runtime @babel/runtime-corejs2  "},{"title":"配置​","type":1,"pageTitle":"基本配置","url":"/docs/intro/配置/配置babel/基本配置#配置","content":"babel.config.js { &quot;presets&quot;: [ [ &quot;@babel/env&quot;, { &quot;targets&quot;: { &quot;edge&quot;: &quot;17&quot;, &quot;firefox&quot;: &quot;60&quot;, &quot;chrome&quot;: &quot;67&quot;, &quot;safari&quot;: &quot;11.1&quot; }, &quot;useBuiltIns&quot;: &quot;usage&quot;, &quot;corejs&quot;: &quot;3.6.5&quot; } ] ], &quot;plugins&quot;: [ [ &quot;@babel/plugin-transform-runtime&quot;, { &quot;corejs&quot;: 2 } ] ] }  "},{"title":"基本配置","type":0,"sectionRef":"#","url":"/docs/intro/配置/配置eslint/基本配置","content":"","keywords":""},{"title":"安装​","type":1,"pageTitle":"基本配置","url":"/docs/intro/配置/配置eslint/基本配置#安装","content":"npm i -D eslint babel-eslint eslint-config-airbnb eslint-plugin-import eslint-plugin-jsx-a11y eslint-plugin-react  "},{"title":"初始化​","type":1,"pageTitle":"基本配置","url":"/docs/intro/配置/配置eslint/基本配置#初始化","content":"npx eslint --init  "},{"title":"初步配置​","type":1,"pageTitle":"基本配置","url":"/docs/intro/配置/配置eslint/基本配置#初步配置","content":".eslintrc.js module.export = { extends: [&quot;airbnb&quot;, &quot;plugin:prettier/recommended&quot;], // eslint扩展规则 parserOptions: { ecmaVersion: 6, sourceType: &quot;module&quot;, ecmaFeatures: { jsx: true, }, }, parser: &quot;babel-eslint&quot;, // 解决ES6 improt会报错 env: { // eg如果不配置browser，window就会被eslint报undefined的错 es6: true, browser: true, node: true, }, plugins: [&quot;react&quot;, &quot;jsx-a11y&quot;, &quot;import&quot;], rules: { &quot;class-methods-use-this&quot;: 0, &quot;import/no-named-as-default&quot;: 0, &quot;react/jsx-filename-extension&quot;: [ &quot;error&quot;, { extensions: [&quot;.js&quot;, &quot;.jsx&quot;], }, ], }, };  "},{"title":"基本配置","type":0,"sectionRef":"#","url":"/docs/intro/配置/配置prettier/基本配置","content":"","keywords":""},{"title":"安装​","type":1,"pageTitle":"基本配置","url":"/docs/intro/配置/配置prettier/基本配置#安装","content":"npm install -D prettier eslint-plugin-prettier eslint-config-prettier  "},{"title":"配置​","type":1,"pageTitle":"基本配置","url":"/docs/intro/配置/配置prettier/基本配置#配置","content":"//编写代码时，尽量符合以下规则 module.exports = { printWidth: 80, //单行长度,超过则自动换行 tabWidth: 2, //缩进长度 useTabs: false, //使用空格代替tab缩进 semi: false, //句末使用分号 singleQuote: true, //使用单引号 endOfLine: &quot;auto&quot;, //配置换行符格式为auto arrowParens: &quot;avoid&quot;, //单参数箭头函数参数周围使用圆括号-eg: (x) =&gt; xavoid：省略括号 bracketSpacing: true, //在对象前后添加空格-eg: { foo: bar } insertPragma: false, //在已被preitter格式化的文件顶部加上标注 jsxBracketSameLine: false, //多属性html标签的‘&gt;’折行放置 rangeStart: 0, requirePragma: false, //无需顶部注释即可格式化 trailingComma: &quot;none&quot;, //多行时尽可能打印尾随逗号 useTabs: false, //使用空格代替tab缩进 };  "},{"title":"执行​","type":1,"pageTitle":"基本配置","url":"/docs/intro/配置/配置prettier/基本配置#执行","content":"npx prettier --write src/  "},{"title":"代理配置","type":0,"sectionRef":"#","url":"/docs/intro/配置/配置webpack/代理配置","content":"代理配置 const path = require(&quot;path&quot;); module.exports = { dev: { // Paths assetsSubDirectory: &quot;static&quot;, assetsPublicPath: &quot;/&quot;, proxyTable: { &quot;/admin&quot;: { target: &quot;http://192.168.1.1/teacher-development-center/backend/index.php/admin&quot;, // 设置调用接口域名和端口号别忘了加http changeOrigin: true, pathRewrite: { &quot;^/admin&quot;: &quot;&quot;, // 这里理解成用‘/admin’代替target里面的地址，组件中我们调接口时直接用/wechat // 比如我要调用'http://0.0:300/user/add'，直接写‘/api/user/add’即可 代理后地址栏显示/ }, }, &quot;/wechat&quot;: { target: &quot;http://192.168.1.1/teacher-development-center/backend/index.php/wechat&quot;, // 设置调用接口域名和端口号别忘了加http changeOrigin: true, pathRewrite: { &quot;^/wechat&quot;: &quot;&quot;, // 这里理解成用‘/admin’代替target里面的地址，组件中我们调接口时直接用/wechat // 比如我要调用'http://0.0:300/user/add'，直接写‘/api/user/add’即可 代理后地址栏显示/ }, }, }, // Various Dev Server settings host: &quot;0.0.0.0&quot;, // can be overwritten by process.env.HOST port: 9527, // can be overwritten by process.env.PORT, if port is in use, a free one will be determined autoOpenBrowser: false, errorOverlay: true, notifyOnErrors: true, poll: false, // https://webpack.js.org/configuration/dev-server/#devserver-watchoptions- // Use Eslint Loader? // If true, your code will be linted during bundling and // linting errors and warnings will be shown in the console. useEslint: true, // If true, eslint errors and warnings will also be shown in the error overlay // in the browser. showEslintErrorsInOverlay: false, /** * Source Maps */ // https://webpack.js.org/configuration/devtool/#development devtool: &quot;cheap-module-eval-source-map&quot;, // If you have problems debugging vue-files in devtools, // set this to false - it *may* help // https://vue-loader.vuejs.org/en/options.html#cachebusting cacheBusting: true, cssSourceMap: true, }, prd: { // Template for index.html index: path.resolve(__dirname, &quot;../dist/admin.html&quot;), // Paths assetsRoot: path.resolve(__dirname, &quot;../dist&quot;), assetsSubDirectory: &quot;vue-admin-static&quot;, assetsPublicPath: &quot;/&quot;, /** * Source Maps */ productionSourceMap: false, // https://webpack.js.org/configuration/devtool/#production devtool: &quot;#source-map&quot;, // Gzip off by default as many popular static hosts such as // Surge or Netlify already gzip all static assets for you. // Before setting to `true`, make sure to: // npm install --save-dev compression-webpack-plugin productionGzip: false, productionGzipExtensions: [&quot;js&quot;, &quot;css&quot;], // Run the build command with an extra argument to // View the bundle analyzer report after build finishes: // `npm run build --report` // Set to `true` or `false` to always turn it on or off bundleAnalyzerReport: process.env.npm_config_report, }, }; ","keywords":""},{"title":"网页崩溃","type":0,"sectionRef":"#","url":"/docs/intro/问题集合/网页崩溃","content":"","keywords":""},{"title":"crbug/1173575, non-JS module files deprecated.​","type":1,"pageTitle":"网页崩溃","url":"/docs/intro/问题集合/网页崩溃#crbug1173575-non-js-module-files-deprecated","content":"危险 项目正常本地构建，但是浏览器报错如图  "},{"title":"问题原因​","type":1,"pageTitle":"网页崩溃","url":"/docs/intro/问题集合/网页崩溃#问题原因","content":"webpack 中的 devServer 开启了 https ，但是本地构建打开浏览器用的是 http 此时: http://localhost:3000 会报错，需变成 https // 开发环境配置 const devConfig = { devtool: &quot;source-map&quot;, devServer: { host: &quot;0.0.0.0&quot;, port: 3000, open: true, disableHostCheck: true, https: true, //这个地方配置了，就必须https访问,如果不必要，注释掉 // 开发配置代理文件 proxy: require(&quot;./dev.config.js&quot;), }, };  电脑ip地址设置了动态ip，项目ip地址本来是192.168.5.122，可能构建会变成变成了192.168.5.12 这种情况可能需要把电脑ip改成静态的  打开F12开发者工具操作时可能会出现该问题。原因是谷歌浏览器在控制台网络设置问题，将 Offline（离线）改为 No throttling/Fast 3G，再次刷新页面即可解决问题。  "},{"title":"基本配置","type":0,"sectionRef":"#","url":"/docs/intro/配置/配置package.json/基本配置","content":"","keywords":""},{"title":"命令配置​","type":1,"pageTitle":"基本配置","url":"/docs/intro/配置/配置package.json/基本配置#命令配置","content":"{ &quot;scripts&quot;: { &quot;dev&quot;: &quot;webpack server --mode=development --env environment=DEV --config ./webpack.config.js&quot;, &quot;build&quot;: &quot;webpack --mode=production --env environment=PRD --config ./webpack.config.js&quot;, &quot;start&quot;: &quot;webpack server --mode=production --env environment=PRD --config ./webpack.config.js&quot; } }  "},{"title":"自定义环境变量​","type":1,"pageTitle":"基本配置","url":"/docs/intro/配置/配置package.json/基本配置#自定义环境变量","content":"npm -D cross-env  package.json { &quot;scripts&quot;: { &quot;build&quot;: &quot;cross-env NODE_ENV=enroll vue-cli-service build&quot; } }  根目录自定义 [mode] 是自定义的模式名称，通过在package.json脚本中增加 --mode [mode]来指定模式 // package.json { &quot;scripts&quot;: { &quot;build:testing&quot;: &quot;cross-env vue-cli-service build --mode testing&quot;, } } .env ， 在所有的环境中被载入 .env.local ， 在所有的环境中被载入，但会被 git 忽略 .env.[mode] ， 只在指定的模式中被载入 .env.[mode].local， 只在指定的模式中被载入，但会被 git 忽略  .env.tesing // .env.testing 文件 NODE_ENV = production; VUE_APP_ENV = testing; // 只有以 “VUE_APP_” 开头的变量会被 webpack.DefinePlugin 静态嵌入到客户端侧的包中，才能在应用中通过 process.env.VUE_APP_xxx 来访问。  获取环境变量 const { VUE_APP_ENV } = process.env; let baseUrl = &quot;http://192.168.1.1:8080&quot;; switch (VUE_APP_ENV) { case &quot;development&quot;: baseUrl = &quot;http://192.168.1.1:8080&quot;; break; case &quot;testing&quot;: baseUrl = &quot;http://192.168.2.2:8080&quot;; break; default: baseUrl = &quot;http://192.168.3.3:8080&quot;; } export default {S baseUrl, };  "},{"title":"基本配置","type":0,"sectionRef":"#","url":"/docs/intro/配置/配置husky/基本配置","content":"","keywords":""},{"title":"安装​","type":1,"pageTitle":"基本配置","url":"/docs/intro/配置/配置husky/基本配置#安装","content":"npm i -D husky lint-staged pretty-quick  "},{"title":"配置​","type":1,"pageTitle":"基本配置","url":"/docs/intro/配置/配置husky/基本配置#配置","content":"package 添加： &quot;husky&quot;: { &quot;hooks&quot;: { &quot;pre-commit&quot;: &quot;lint-staged&quot; } }, &quot;lint-staged&quot;: { &quot;app/**/*.{jsx,txs,ts,js,json,css,md}&quot;: [ &quot;prettier --write&quot;, &quot;eslint --fix&quot;, &quot;git add&quot; ] }  "},{"title":"初始化​","type":1,"pageTitle":"基本配置","url":"/docs/intro/配置/配置husky/基本配置#初始化","content":"git init //必须先git初始化 npx husky install npm set-script prepare &quot;husky install&quot; npx husky add .husky/pre-commit &quot;npx lint-staged&quot; git add .husky/pre-commit  "},{"title":"更多配置​","type":1,"pageTitle":"基本配置","url":"/docs/intro/配置/配置husky/基本配置#更多配置","content":""},{"title":"1. 增加 commit 提示:​","type":1,"pageTitle":"基本配置","url":"/docs/intro/配置/配置husky/基本配置#1-增加-commit-提示","content":"npm install commitizen -g  npm i cz-customizable -D  package.json 配置: &quot;config&quot;: { &quot;commitizen&quot;: { &quot;path&quot;:&quot;node_modules/cz-customizable&quot; } }  根目录增加文件:.cz-config.js .cz-config.js module.exports = { // 可选类型 types: [ { value: &quot;feat&quot;, name: &quot;feat: 新功能&quot; }, { value: &quot;fix&quot;, name: &quot;fix: 修复&quot; }, { value: &quot;docs&quot;, name: &quot;docs: 文档变更&quot; }, { value: &quot;style&quot;, name: &quot;style: 代码格式（不影响代码运行的变动）&quot; }, { value: &quot;refactor&quot;, name: &quot;refactor: 重构（既不是增加feature）,也不是修复bug&quot;, }, { value: &quot;pref&quot;, name: &quot;pref: 性能优化&quot; }, { value: &quot;test&quot;, name: &quot;test: 增加测试&quot; }, { value: &quot;chore&quot;, name: &quot;chore: 构建过程或辅助工具的变动&quot; }, { value: &quot;revert&quot;, name: &quot;revert: 回退&quot; }, { value: &quot;build&quot;, name: &quot;build: 打包&quot; }, ], // 步骤 messages: { type: &quot;请选择提交的类型；&quot;, customScope: &quot;请输入修改的范围（可选）&quot;, subject: &quot;请简要描述提交（必填）&quot;, body: &quot;请输入详细描述（可选）&quot;, footer: &quot;请选择要关闭的issue（可选）&quot;, confirmCommit: &quot;确认要使用以上信息提交？（y/n）&quot;, }, // 跳过步骤 skip: [&quot;body&quot;, &quot;footer&quot;], // 默认长度 subjectLimit: 72, };  "},{"title":"2.commitlint 检测 commit 提交是否符合规范：​","type":1,"pageTitle":"基本配置","url":"/docs/intro/配置/配置husky/基本配置#2commitlint-检测-commit-提交是否符合规范","content":"npm install --save-dev @commitlint/config-conventional @commitlint/cli  根目录创建 commitlint.config.js module.exports = { extends: [&quot;@commitlint/config-conventional&quot;], // 定义规则类型 rules: { // type 类型定义，表示 git 提交的 type 必须在以下类型范围内 &quot;type-enum&quot;: [ 2, &quot;always&quot;, [ &quot;feat&quot;, // 新功能 &quot;fix&quot;, // 修复 &quot;docs&quot;, // 文档变更 &quot;style&quot;, // 代码格式（不影响代码运行的变动） &quot;refactor&quot;, // 重构（既不是增加feature）,也不是修复bug &quot;pref&quot;, // 性能优化 &quot;test&quot;, // 增加测试 &quot;chore&quot;, // 构建过程或辅助工具的变动 &quot;revert&quot;, // 回退 &quot;build&quot;, // 打包 ], ], // subject 大小写不做校验 &quot;subject-case&quot;: [0], }, };  执行 husky npx husky add .husky/commit-msg 'npx --no-install commitlint --edit &quot;$1&quot;'  "},{"title":"antd_tooptip","type":0,"sectionRef":"#","url":"/docs/intro/问题集合/antd_tooptip","content":"antd_tooptip 危险 问题描述：tooptip/poprove 等提示，在异步加载时，加载中···的过度内容窗口会在加载完毕显示异步内容时重新计算窗口大小、位置，会有一定概率加载不出来 实际效果: 1.先显示加载中··· 2.获取异步数据后,窗口直接消失 3.一般出现在 tooltip 靠近页面最下方时出现问题 初步解决方法 法1 自己重写ToolTip组件； 法2 自己预估好异步加载之后的浮窗宽度或高度，把 加载中... 的过度窗口的高度或宽度预设成异步加载之后的大小，方便浮窗定位","keywords":""},{"title":"基本配置","type":0,"sectionRef":"#","url":"/docs/intro/配置/配置webpack/基本配置","content":"","keywords":""},{"title":"基本安装​","type":1,"pageTitle":"基本配置","url":"/docs/intro/配置/配置webpack/基本配置#基本安装","content":"npm i -D webpack webpack-bundle-analyzer webpack-cli webpack-dev-server webpack-merge  "},{"title":"插件安装​","type":1,"pageTitle":"基本配置","url":"/docs/intro/配置/配置webpack/基本配置#插件安装","content":"npm i -D html-webpack-plugin mini-css-extract-plugin terser-webpack-plugin optimize-css-assets-webpack-plugin clean-webpack-plugin copy-webpack-plugin  "},{"title":"loader 相关​","type":1,"pageTitle":"基本配置","url":"/docs/intro/配置/配置webpack/基本配置#loader-相关","content":"npm i -D babel-loader less-loader style-loader css-loader file-loader postcss-loader url-loader  "},{"title":"基本配置​","type":1,"pageTitle":"基本配置","url":"/docs/intro/配置/配置webpack/基本配置#基本配置","content":"const path = require(&quot;path&quot;); const webpack = require(&quot;webpack&quot;); const merge = require(&quot;webpack-merge&quot;); const CleanWebpackPlugin = require(&quot;clean-webpack-plugin&quot;); const HtmlWebpackPlugin = require(&quot;html-webpack-plugin&quot;); const CopyWebpackPlugin = require(&quot;copy-webpack-plugin&quot;); const BundleAnalyzerPlugin = require(&quot;webpack-bundle-analyzer&quot;).BundleAnalyzerPlugin; const TerserPlugin = require(&quot;terser-webpack-plugin&quot;); const OptimizeCssAssetsWebpackPlugin = require(&quot;optimize-css-assets-webpack-plugin&quot;); const MiniCssExtractPlugin = require(&quot;mini-css-extract-plugin&quot;); // nodejs获取相对路径 function resolve(relatedPath) { return path.join(__dirname, relatedPath); } // 通用基础配置 const baseConfig = { context: resolve(&quot;../src&quot;), entry: { index: resolve(&quot;../src/index.jsx&quot;), }, output: { path: resolve(&quot;../dist&quot;), filename: &quot;[name].js&quot;, chunkFilename: &quot;chunks/[name].[hash:8].js&quot;, }, resolve: { extensions: [&quot;.js&quot;, &quot;.jsx&quot;, &quot;.css&quot;, &quot;.sass&quot;], alias: { &quot;@src&quot;: path.join(__dirname, &quot;../src&quot;), // 提取公共npm包去重失败，单独设置绝对路径 immutable: path.resolve(process.cwd(), &quot;node_modules&quot;, &quot;immutable&quot;), }, }, resolveLoader: { moduleExtensions: [&quot;-loader&quot;], }, plugins: [ new HtmlWebpackPlugin({ template: resolve(&quot;../src/index.html&quot;), chunk: [&quot;index&quot;], hash: true, // 打包文件加上hash串 scriptLoading: &quot;defer&quot;, }), // new ExtractTextWebpackPlugin('css/[name].css'), // 复制高度静态模板资源 new CopyWebpackPlugin([ { context: resolve(&quot;../src/resource/&quot;), from: &quot;**/*&quot;, to: resolve(&quot;../dist/resource/&quot;), }, ]), new webpack.HotModuleReplacementPlugin(), // 将内联样式提取出来成样式文件 new MiniCssExtractPlugin({ filename: &quot;css/[name].[contenthash:8].css&quot;, chunkFilename: &quot;css/[name].[contenthash:8].css&quot;, }), ], module: { rules: [ { test: /\\.js[x]?$/, // 指定文件夹匹配文件 exclude: /node_modules/, include: [resolve(&quot;../app&quot;)], use: [ { loader: &quot;babel-loader&quot;, options: { presets: [&quot;react&quot;, &quot;es2015&quot;, &quot;stage-0&quot;], }, }, ], }, { test: /\\.(less|css|sass)$/, use: [ &quot;style-loader&quot;, MiniCssExtractPlugin.loader, &quot;css-loader&quot;, { loader: &quot;less-loader&quot;, options: { lessOptions: { javascriptEnabled: true, }, }, }, ], }, { test: /\\.(png|jpe?g|gif|svg)(\\?.*)?$/, exclude: /node_modules/, loader: &quot;url-loader&quot;, options: { limit: 8192, name: &quot;../images/[name].[ext]&quot;, outputPath: &quot;images/&quot;, }, }, { test: /\\.eot(\\?v=\\d+\\.\\d+\\.\\d+)?$/, loader: &quot;file-loader&quot;, }, { test: /\\.(woff|woff2)$/, loader: &quot;url-loader?prefix=font/&amp;limit=5000&quot;, }, { test: /\\.ttf(\\?v=\\d+\\.\\d+\\.\\d+)?$/, loader: &quot;url-loader?limit=10000&amp;mimetype=application/octet-stream&quot;, }, ], }, }; // 开发环境配置 const devConfig = { devtool: &quot;source-map&quot;, devServer: { host: &quot;0.0.0.0&quot;, port: 3000, open: true, disableHostCheck: true, // 开发配置代理文件 proxy: require(&quot;./dev.config.js&quot;), }, }; // 生产环境配置，需要打包优化，代码分割，js、css再压缩 const prodConfig = { plugins: [ new CleanWebpackPlugin(resolve(&quot;../dist&quot;), { root: resolve(&quot;../&quot;), verbose: true, }), // 打包分析插件，生产report文件 new BundleAnalyzerPlugin({ analyzerMode: &quot;static&quot;, openAnalyzer: false, analyzerPort: 4000, }), // 按需加载特定第三方包 new webpack.ContextReplacementPlugin(/moment[\\/\\\\]locale$/, /zh-cn/), // 抽离第三方库 //new AutoDllPlugin({ // inject: true, // filename: '[name]_dll.js', // entry: { // third1: ['antd'], // third2: ['moment', 'immutable', 'axios'], // third3: ['react', 'react-dom', 'react-router', 'react-router-dom'] // } //}) ], // 代码分割 optimization: { // 压缩打包后的js、css文件 minimizer: [ new TerserPlugin({ terserOptions: { parse: {}, compress: {}, keep_fnames: false, safari10: false, }, }), new OptimizeCssAssetsWebpackPlugin({ canPrint: false, sourceMap: false }), ], // 代码分割 splitChunks: { chunks: &quot;all&quot;, //async 只分割异步导入代码 all 同步异步都分割 minSize: 30000, maxSize: 0, minChunks: 1, maxAsyncRequests: 5, maxInitialRequests: 3, automaticNameDelimiter: &quot;~&quot;, name: true, cacheGroups: { vendors: { test: /[\\\\/]node_modules[\\\\/]/, priority: -10, }, // 如果第三方总包过大，可以分离部分比较大的第三方包单独成一个文件 thirdDll: { name: &quot;dll&quot;, test: /[\\\\/]node_modules[\\\\/](moment|loadsh|immutable)/, priority: 10, reuseExistingChunk: true, }, default: { minChunks: 2, priority: -20, reuseExistingChunk: true, }, }, }, }, }; // 配置导出 module.exports = (env) =&gt; { // nodejs命令，获取当前测试环境 const environment = env.environment; console.info(`当前测试环境: ${environment}`); if (environment === &quot;DEV&quot;) { // 合并开发配置与基础配置，导出配置 return merge(baseConfig, devConfig); } if (environment === &quot;PRD&quot;) { // 合并生产配置与基础配置，导出配置 return merge(baseConfig, prodConfig); } };  "},{"title":"console.log问题","type":0,"sectionRef":"#","url":"/docs/intro/问题集合/console.log问题","content":"","keywords":""},{"title":"问题描述​","type":1,"pageTitle":"console.log问题","url":"/docs/intro/问题集合/console.log问题#问题描述","content":"当我们执行下述代码时： &lt;script&gt; let obj = { name: 'leesy', age: 15 } console.log('未修改obj.age之前的obj',obj); console.log('未修改obj.age之前的obj.age',obj.age); obj.age = 150; console.log('未修改obj.age之前的obj',obj); console.log('未修改obj.age之前的obj.age',obj.age); &lt;/script&gt;   "},{"title":"原因​","type":1,"pageTitle":"console.log问题","url":"/docs/intro/问题集合/console.log问题#原因","content":"不展开预览与展开对象获取的数据的时间点不一样。 不展开，控制台默认显示当时对象 obj 的快照，是 console.log 代码执行时的对象快照；不是当前内存（堆内存）中 obj.age 的真实值； 展开，控制台不会显示 obj 的快照，而是会重新去内存中取 obj.age 的真实值。 对于 Object 等引用类型来说，都可能会出现上述异常打印输出。 "},{"title":"解决方法​","type":1,"pageTitle":"console.log问题","url":"/docs/intro/问题集合/console.log问题#解决方法","content":"改为 console.log(JSON.stringfy(obj))，进行输出;通过打断点的方式去看;console.dir(); "},{"title":"主页","type":0,"sectionRef":"#","url":"/docs/intro/","content":"主页 博客相关ui 相关技术文档开发语言工具网站 博客 阮一峰的网络日志阮一峰的网络日志","keywords":""},{"title":"history","type":0,"sectionRef":"#","url":"/docs/intro/问题集合/history","content":"history 危险 问题描述：history.push与history.replace的区别","keywords":""},{"title":"img","type":0,"sectionRef":"#","url":"/docs/intro/问题集合/img","content":"img 危险 问题描述：img的src有时候链接完全正确，却加载不出图片 head 标签加上: &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot; /&gt; img 标签加上:&lt;img src=&quot;&quot; referrerpolicy=&quot;no-referrer&quot; /&gt; img的src地址存在ssl访问问题: 例如：图片地址:http://dev.dmb.cn/dev/234.png,如果网站配置了 https，会被自动转成:https://dev.dmb.cn/dev/234.png但是图片地址不支持https访问 思路：利用反向代理解决图片访问 将图片地址转写成自己定义的地址，如:&lt;img src='/imgUrl/dev/234.png' /&gt;配置 webpack 的 proxy 代理配置;配置生产的 k8s 配置文件 yaml 的 nginx 配置; webpack.config.js export default { devServer: { proxy: { &quot;/imgUrl&quot;: { target: &quot;http://dev.dmb.cn&quot;, pathRewrite: { &quot;^/imgUrl&quot;: &quot;&quot; }, }, }, }, }; BuildScript/deploy_st.yaml ··· server { listen 80; ··· location ^~ /imgUrl/ { proxy_pass http://dev.dmb.cn/ } } ","keywords":""},{"title":"基本","type":0,"sectionRef":"#","url":"/docs/intro/git/基本","content":"基本 git config --global user.name &quot;姓名&quot; git config --global user.email &quot;电子邮件&quot; git config user.name git config user.email git init git add . git remote add origin 地址 git branch -M main git checkout 分支 git commit -m &quot;first commit&quot; git commit --no-verify -m &quot;add goods&quot; git commit --amend git pull git pull origin main --allow-unrelated-histories git push -u origin main git push -f origin main git reset --soft HEAD^ ","keywords":""},{"title":"框架","type":0,"sectionRef":"#","url":"/docs/intro/npm/框架","content":"","keywords":""},{"title":"1.react​","type":1,"pageTitle":"框架","url":"/docs/intro/npm/框架#1react","content":""},{"title":"2.vue​","type":1,"pageTitle":"框架","url":"/docs/intro/npm/框架#2vue","content":""},{"title":"3.preact​","type":1,"pageTitle":"框架","url":"/docs/intro/npm/框架#3preact","content":"npm i preact  import { render } from 'preact'; import { useState } from 'preact/hooks'; function Counter() { const [value, setValue] = useState(0); return ( &lt;&gt; &lt;div&gt;Counter: {value}&lt;/div&gt; &lt;button onClick={() =&gt; setValue(value + 1)}&gt;Increment&lt;/button&gt; &lt;button onClick={() =&gt; setValue(value - 1)}&gt;Decrement&lt;/button&gt; &lt;/&gt; ); } render(&lt;Counter /&gt;, document.getElementById('app'));  "},{"title":"脚手架","type":0,"sectionRef":"#","url":"/docs/intro/npm/脚手架","content":"","keywords":""},{"title":"1.webpack​","type":1,"pageTitle":"脚手架","url":"/docs/intro/npm/脚手架#1webpack","content":""},{"title":"2.vite​","type":1,"pageTitle":"脚手架","url":"/docs/intro/npm/脚手架#2vite","content":"npm create vite@latest  "},{"title":"2.1 配置文件​","type":1,"pageTitle":"脚手架","url":"/docs/intro/npm/脚手架#21-配置文件","content":"默认指定：vite.config.js自定义指定：vite --config 自定义名称.js "},{"title":"2.2 vite 命令​","type":1,"pageTitle":"脚手架","url":"/docs/intro/npm/脚手架#22-vite-命令","content":"--host [host]// 指定域名 --port &lt;port&gt;// 指定端口 --https // 使用 TLS+HTTP/2 --cors // 可以跨域 --open [path] // 启动自动打开服务器 --stictPort // 如果指定端口被使用退出程序 --force // 强制Vite重新执行预构建，忽视缓存 --config | -c&lt;file&gt; // 指定vite的配置文件 --base path // 指定url读取文件基本路径 --clearScreen // 日志记录时，是否清屏 --logLevel | -l &lt;level&gt; // 指定日志等级：error|info|silent|warn --debug | -d&lt;feat&gt;// 获取调试日志 --filter | -f &lt;filter&gt; // 过滤调试日志 --mode | -m &lt;mode&gt; // 设置env模式 --help | -h // 获取vite帮助信息 --version | -v // 获取vite版本信息  信息 什么时候需要使用–force？ Vite 缓存分为两部分： 文件系统缓存：Vite 会将预构建的依赖缓存到 node_modules/.vite，package.json 的 dependencies 字段和依赖 lock 文件，或者 vite.config 中相关字段配置过的，这些文件发生变化，vite 就会重新构建，强制执行可以通过--force 或手动删除.vite 目录。 浏览器缓存：解析后的依赖请求会以 http 头 max-age=max-age=31536000,immutable 强缓存，提高开发页面重载性能。 vite [root]// 启动以配置文件root为入口的项目开发环境 vite serve // 启动以配置文件root为入口的项目开发环境 vite build [root] // 打包以配置文件root为入口的文件为生产环境文件 vite optimize [root] // 预构建生产环境 vite preview [root] // 构建一个本地预览静态生产环境  &quot;dev&quot;: &quot;vite --open&quot;, &quot;serve&quot;: &quot;vite serve&quot;, &quot;build&quot;: &quot;vue-tsc --noEmit&amp;&amp; vite build&quot;, &quot;staging&quot;: &quot;vue-tsc &amp;&amp; vite build --mode development&quot;, &quot;preview&quot;: &quot;vue-tsc &amp;&amp; vite preview&quot;,  "},{"title":"2.3 配置环境模式​","type":1,"pageTitle":"脚手架","url":"/docs/intro/npm/脚手架#23-配置环境模式","content":"默认环境:当pageage.json中的script字段里的命令执行了vite serve或 vite，vite 默认是开发环境（development），当执行了 vite build 命令，vite 默认环境为生产环境（production）。注意地，当执行地是vite preview命令，vite 默认环境也是生产环境，因为这个命令主要是创建一个能在本地执行的生产环境。JavaScript 模块有一个暴露特定上下文元数据属性的对象（import.meta），这个对象包含了当前模块的信息，对象里有三个属性：env（环境变量）、resolve、url（当前模块加载路径），因为在main.ts打印的信息，所以这里获取的路径是src/main.ts。 // main.ts console.log(import.meta);  其中的 env 环境变量默认也有 5 个属性：BASE_URL（url 公共路径）、DEV（是开发模式）、PROD（是否生产模式）、mode（环境模式）、SSR（是否服务器渲染）。当项目还配置有自定义环境变量时，env 环境中自定义变量也会带上的。 注意：如果自定义环境变量前缀必须为VITE_因为 vite 配置文件中的 envPrefix 属性值默认为 VITE_。如果想改变成自定义，在配置文件中必须配置 envPrefix。 自定义环境：通过创建相应模式的文件。文件名格式如下： .env// 所有模式都会加载 .env.local // 所有模式都会加载，但会被git忽略 .env.[mode].local // 只有特定模式会加载，但会被git忽略 .env.[mode] // 只有指定模式会加载，注意.env.production优先级比.env高  置指定环境模式：通过在 vite.config.js 文件中的基本配置中的 mode 属性指定，在这里指定会覆盖掉 vite serve 、vite build 中的默认 mode 模式，注意地，这个 vite preview 中 mode 不会被覆盖，还有如果在命令中指定 mode，比如 vite serve --mode production，这样也不会被配置文件中地 mode 覆盖，也就是命令行指定 mode 优先级最高。 "},{"title":"2.4 配置 css​","type":1,"pageTitle":"脚手架","url":"/docs/intro/npm/脚手架#24-配置-css","content":" import { defineConfig } from &quot;vite&quot;; import react from &quot;@vitejs/plugin-react&quot;; // https://vitejs.dev/config/ export default defineConfig({ plugins: [react()], css: { modules: { localsConvention: &quot;camelCaseOnly&quot;, scopeBehaviour: &quot;local&quot;, generateScopedName: &quot;[name]_[local]_[hash:5]&quot;, hashPrefix: &quot;&quot;, globalModulePaths: [], }, postcss: { plugins: [postcssPreset()] }, preprocessorOptions: { less: { additionalData: '@import &quot;./src/common/styles/index.less&quot;;' }, }, devSourcemap: true, // 开发过程中是否启用css sourcemap }, });  "},{"title":"2.5 vite.config.ts​","type":1,"pageTitle":"脚手架","url":"/docs/intro/npm/脚手架#25-viteconfigts","content":"import { defineConfig, loadEnv } from 'vite' import type { UserConfig, ConfigEnv } from 'vite' import vue from '@vitejs/plugin-vue' import vueJsx from '@vitejs/plugin-vue-jsx' //tsx插件引入 import AutoImport from 'unplugin-auto-import/vite' //自动引入ref,reactive等等等 // 配置antd-v按需加载 import Components from 'unplugin-vue-components/vite' import { AntDesignVueResolver } from 'unplugin-vue-components/resolvers' // import path from 'path'; import { resolve, join } from 'path' import { wrapperEnv } from './build/utils' // defineConfig 工具函数，这样不用 jsdoc 注解也可以获取类型提示 export default defineConfig(({ command, mode }: ConfigEnv): UserConfig =&gt; { console.log(command, mode, '===') const root = process.cwd() const env = loadEnv(mode, root) // 环境变量对象 console.log('环境变量------', env) console.log('文件路径（ process.cwd()）------', root) console.log('文件路径（dirname）------', __dirname + '/src') const { VITE_DROP_CONSOLE } = wrapperEnv(env) // // dev 独有配置 return { root, //项目根目录（index.html 文件所在的位置） 默认： process.cwd() base: '/', // 开发或生产环境服务的公共基础路径：默认'/' 1、绝对 URL 路径名： /foo/； 2、完整的 URL： https://foo.com/； 3、空字符串或 ./（用于开发环境） publicDir: resolve(__dirname, './dist'), //默认'public' 作为静态资源服务的文件夹 (打包public文件夹会没有，里面得东西会直接编译在dist文件下) assetsInclude: resolve(__dirname, './src/assets'), // 静态资源处理 // ******插件配置****** plugins: [ vue(), vueJsx(), AutoImport({ imports: [ 'vue', 'vue-router', 'pinia', { axios: [ ['default', 'axios'] // import { default as axios } from 'axios', ] } ], dts: 'types/auto-import.d.ts' //生成全局引入的文件 }), Components({ resolvers: [ AntDesignVueResolver({ importStyle: 'less' //修改antdv主题色 }) ] }) ], //配置插件 // ******开发服务器配置****** server: { https: true, //(使用https)启用 TLS + HTTP/2。注意：当 server.proxy 选项 也被使用时，将会仅使用 TLS host: true, // 监听所有地址 port: 8080, //指定开发服务器端口：默认3000 open: true, //启动时自动在浏览器中打开 cors: false, //为开发服务器配置 CORS proxy: { //配置自定义代理规则 // 字符串简写写法 '/jpi': 'http://192.168.1.97:4567', '/api': { target: 'http://192.168.1.97:108', changeOrigin: true, //是否跨域 rewrite: path =&gt; path.replace(/^\\/api/, '') } } // hmr: { // overlay: false // } }, // ******项目构建配置****** build: { target: 'modules', //设置最终构建的浏览器兼容目标 //es2015(编译成es5) | modules outDir: 'dist', // 构建得包名 默认：dist assetsDir: 'assets', // 静态资源得存放路径文件名 assets sourcemap: false, //构建后是否生成 source map 文件 brotliSize: false, // 启用/禁用 brotli 压缩大小报告。 禁用该功能可能会提高大型项目的构建性能 minify: 'esbuild', // 项目压缩 :boolean | 'terser' | 'esbuild' chunkSizeWarningLimit: 1000, //chunk 大小警告的限制（以 kbs 为单位）默认：500 cssTarget: 'chrome61' //防止 vite 将 rgba() 颜色转化为 #RGBA 十六进制符号的形式 (要兼容的场景是安卓微信中的 webview 时,它不支持 CSS 中的 #RGBA 十六进制颜色符号) }, // ******resolver配置****** resolve: { alias: { // 别名配置 // 键必须以斜线开始和结束 '@': resolve(__dirname, 'src'), components: resolve(__dirname, './src/components'), assets: resolve(__dirname, './src/assets'), '#': resolve(__dirname, 'types'), build: resolve(__dirname, 'build') } }, // ******打印+debugger清除配置****** // 测试环境保留打印 esbuild: { pure: VITE_DROP_CONSOLE ? ['console.log', 'debugger'] : [] }, css: { // 全局变量+全局引入less+配置antdv主题色 preprocessorOptions: { less: { javascriptEnabled: true, // 全局变量使用：@primary-color modifyVars: { 'primary-color': '#1890ff', // 全局主色 'link-color': ' #1890ff', // 链接色 'success-color': ' #52c41a', // 成功色 'warning-color': ' #faad14', // 警告色 'error-color': ' #f5222d', // 错误色 'font-size-base': ' 14px', // 主字号 'heading-color': ' rgba(0, 0, 0, 0.85)', // 标题色 'text-color': ' rgba(0, 0, 0, 0.65)', // 主文本色 'text-color-secondary': ' rgba(0, 0, 0, 0.45)', // 次文本色 'disabled-color': ' rgba(0, 0, 0, 0.25)', // 失效色 'border-radius-base': ' 2px', // 组件/浮层圆角 'border-color-base': ' #d9d9d9', // 边框色 'box-shadow-base': ' 0 2px 8px rgba(0, 0, 0, 0.15)' // 浮层阴影 } } } } } })  "},{"title":"模拟数据","type":0,"sectionRef":"#","url":"/docs/intro/npm/模拟数据","content":"","keywords":""},{"title":"1.模拟访问软件​","type":1,"pageTitle":"模拟数据","url":"/docs/intro/npm/模拟数据#1模拟访问软件","content":""},{"title":"postman​","type":1,"pageTitle":"模拟数据","url":"/docs/intro/npm/模拟数据#postman","content":""},{"title":"2.模拟数据​","type":1,"pageTitle":"模拟数据","url":"/docs/intro/npm/模拟数据#2模拟数据","content":""},{"title":"mock.js​","type":1,"pageTitle":"模拟数据","url":"/docs/intro/npm/模拟数据#mockjs","content":""},{"title":"json-server​","type":1,"pageTitle":"模拟数据","url":"/docs/intro/npm/模拟数据#json-server","content":""},{"title":"文件处理","type":0,"sectionRef":"#","url":"/docs/intro/npm/文件处理","content":"","keywords":""},{"title":"1.PDF​","type":1,"pageTitle":"文件处理","url":"/docs/intro/npm/文件处理#1pdf","content":""},{"title":"React-PDF​","type":1,"pageTitle":"文件处理","url":"/docs/intro/npm/文件处理#react-pdf","content":"import React, { useState } from 'react'; import { Document, Page } from 'react-pdf'; // import { Document, Page } from 'react-pdf/dist/esm/entry.webpack5'; function MyApp() { const [numPages, setNumPages] = useState(null); const [pageNumber, setPageNumber] = useState(1); function onDocumentLoadSuccess({ numPages }) { setNumPages(numPages); } return ( &lt;div&gt; &lt;Document file=&quot;somefile.pdf&quot; onLoadSuccess={onDocumentLoadSuccess}&gt; &lt;Page pageNumber={pageNumber} /&gt; &lt;/Document&gt; &lt;p&gt; Page {pageNumber} of {numPages} &lt;/p&gt; &lt;/div&gt; ); }  React version\tNewest compatible React-PDF version≥16.8\tlatest ≥16.3\t5.x ≥15.5\t4.x "},{"title":"2.MD​","type":1,"pageTitle":"文件处理","url":"/docs/intro/npm/文件处理#2md","content":""},{"title":"react-markdown​","type":1,"pageTitle":"文件处理","url":"/docs/intro/npm/文件处理#react-markdown","content":"import React from 'react' import ReactMarkdown from 'react-markdown' import ReactDom from 'react-dom' import remarkGfm from 'remark-gfm' const markdown = `A paragraph with *emphasis* and **strong importance**. &gt; A block quote with ~strikethrough~ and a URL: https://reactjs.org. * Lists * [ ] todo * [x] done A table: | a | b | | - | - | ` ReactDom.render( &lt;ReactMarkdown children={markdown} remarkPlugins={[remarkGfm]} /&gt;, document.body )  "},{"title":"excel​","type":1,"pageTitle":"文件处理","url":"/docs/intro/npm/文件处理#excel","content":""},{"title":"exceljs​","type":1,"pageTitle":"文件处理","url":"/docs/intro/npm/文件处理#exceljs","content":"中文文档 "},{"title":"配置npm","type":0,"sectionRef":"#","url":"/docs/intro/npm/配置npm","content":"","keywords":""},{"title":"1.安装nvm​","type":1,"pageTitle":"配置npm","url":"/docs/intro/npm/配置npm#1安装nvm","content":"nvm网站 "},{"title":"1.1 下载nvm​","type":1,"pageTitle":"配置npm","url":"/docs/intro/npm/配置npm#11-下载nvm","content":""},{"title":"1.2 安装完确认信息​","type":1,"pageTitle":"配置npm","url":"/docs/intro/npm/配置npm#12-安装完确认信息","content":"打开CMD，输入命令 nvm  "},{"title":"1.3 nvm配置​","type":1,"pageTitle":"配置npm","url":"/docs/intro/npm/配置npm#13-nvm配置","content":"nvm安装位置，打开文件：settings.txt ，配置镜像： root: D:\\NodeJs\\nvm\\nvm path: D:\\NodeJs\\nvm\\nodejs node_mirror: https://npm.taobao.org/mirrors/node/ npm_mirror: https://npm.taobao.org/mirrors/npm/  "},{"title":"1.4 nvm命令​","type":1,"pageTitle":"配置npm","url":"/docs/intro/npm/配置npm#14-nvm命令","content":"可用版本查看 nvm list available 安装 nvm install 版本号 卸载 nvm uninstall 版本 使用 nvm use 版本号 当前版本查看 nvm current "},{"title":"1.5 npm 安装冲突​","type":1,"pageTitle":"配置npm","url":"/docs/intro/npm/配置npm#15-npm-安装冲突","content":"Fix the upstream dependency conflict, or retry this command with –force, or --legacy-peer-deps to accept an incorrect (and potentially broken) dependency resolution. 问题解决： --force： 会无视冲突，并强制获取远端npm库资源，即使本地有资源也会覆盖掉 --legacy-peer-deps：安装时忽略所有peerDependencies，忽视依赖冲突，采用npm版本4到版本6的样式去安装依赖，已有的依赖不会覆盖。 一般使用：–legacy-peer-deps "},{"title":"2.npm​","type":1,"pageTitle":"配置npm","url":"/docs/intro/npm/配置npm#2npm","content":""},{"title":"2.1 npm命令​","type":1,"pageTitle":"配置npm","url":"/docs/intro/npm/配置npm#21-npm命令","content":"npm -v // 设置全局的npm淘宝镜像 npm config set registry https://registry.npm.taobao.org // 也可以切换回默认全局镜像 npm config set registry https://registry.npmjs.org  -g： 为 --global 的缩写，表示安装到全局目录里 -S： 为 --save 的缩写，表示安装的包将写入package.json里面的dependencies -D： 为 --save-dev 的缩写，表示将安装的包将写入packege.json里面的devDependencies i： 为install的缩写，表示安装  npm init # npm 初始化当前目录 npm i # 安装所有依赖 npm i express # 安装模块到默认dependencies npm i express -g # 会安装到配置的全局目录下 npm i express -S # 安装包信息将加入到dependencies生产依赖 npm i express -D # 安装包信息将加入到devDependencies开发依赖 npm i jquery@1.8.3 # 安装jquery指定的1.8.3版本  npm uninstall express # 卸载模块，但不卸载模块留在package.json中的对应信息 npm uninstall express -g # 卸载全局模块 npm uninstall express --save # 卸载模块，同时卸载留在package.json中dependencies下的信息 npm uninstall express --save-dev # 卸载模块，同时卸载留在package.json中devDependencies下的信息  npm update jquery # 更新最新版本的jquery npm update jquery@2.1.0 # 更新到指定版本号的jquery npm install jquery@latest # 可以直接更新到最后一个新版本  "},{"title":"响应式布局相关","type":0,"sectionRef":"#","url":"/docs/intro/npm/响应式布局相关","content":"","keywords":""},{"title":"1. react-responsive​","type":1,"pageTitle":"响应式布局相关","url":"/docs/intro/npm/响应式布局相关#1-react-responsive","content":"npm install react-responsive --save  import React from &quot;react&quot;; import { useMediaQuery } from &quot;react-responsive&quot;; const Example = () =&gt; { const isDesktopOrLaptop = useMediaQuery({ query: &quot;(min-width: 1224px)&quot;, }); const isBigScreen = useMediaQuery({ query: &quot;(min-width: 1824px)&quot; }); const isTabletOrMobile = useMediaQuery({ query: &quot;(max-width: 1224px)&quot; }); const isPortrait = useMediaQuery({ query: &quot;(orientation: portrait)&quot; }); const isRetina = useMediaQuery({ query: &quot;(min-resolution: 2dppx)&quot; }); return ( &lt;div&gt; &lt;h1&gt;Device Test!&lt;/h1&gt; {isDesktopOrLaptop &amp;&amp; &lt;p&gt;You are a desktop or laptop&lt;/p&gt;} {isBigScreen &amp;&amp; &lt;p&gt;You have a huge screen&lt;/p&gt;} {isTabletOrMobile &amp;&amp; &lt;p&gt;You are a tablet or mobile phone&lt;/p&gt;} &lt;p&gt;Your are in {isPortrait ? &quot;portrait&quot; : &quot;landscape&quot;} orientation&lt;/p&gt; {isRetina &amp;&amp; &lt;p&gt;You are retina&lt;/p&gt;} &lt;/div&gt; ); };  Chrome\t9Firefox\t(Gecko) 6 MS Edge\tAll Internet Explorer\t10 Opera\t12.1 Safari\t5.1 "},{"title":"元素交互","type":0,"sectionRef":"#","url":"/docs/intro/npm/元素交互","content":"","keywords":""},{"title":"1.react-dropzone file 文件选取​","type":1,"pageTitle":"元素交互","url":"/docs/intro/npm/元素交互#1react-dropzone-file-文件选取","content":"npm install --save react-dropzone  demo import React from &quot;react&quot;; import { useDropzone } from &quot;react-dropzone&quot;; function Basic(props) { const { acceptedFiles, getRootProps, getInputProps } = useDropzone(); const files = acceptedFiles.map((file) =&gt; ( &lt;li key={file.path}&gt; {file.path} - {file.size} bytes &lt;/li&gt; )); return ( &lt;section className=&quot;container&quot;&gt; &lt;div {...getRootProps({ className: &quot;dropzone&quot; })}&gt; &lt;input {...getInputProps()} /&gt; &lt;p&gt;Drag 'n' drop some files here, or click to select files&lt;/p&gt; &lt;/div&gt; &lt;aside&gt; &lt;h4&gt;Files&lt;/h4&gt; &lt;ul&gt;{files}&lt;/ul&gt; &lt;/aside&gt; &lt;/section&gt; ); }  "},{"title":"2. react-toastify​","type":1,"pageTitle":"元素交互","url":"/docs/intro/npm/元素交互#2-react-toastify","content":"import React from &quot;react&quot;; import { toast, ToastContainer } from &quot;react-toastify&quot;; import &quot;react-toastify/dist/ReactToastify.css&quot;; toast(&quot;🦄 Wow so easy!&quot;, { position: &quot;top-right&quot;, autoClose: 5000, hideProgressBar: false, closeOnClick: true, pauseOnHover: true, draggable: true, progress: undefined, theme: &quot;light&quot;, }); function Example() { const notify = () =&gt; { toast(&quot;Default Notification !&quot;); toast.success(&quot;Success Notification !&quot;, { position: toast.POSITION.TOP_CENTER, }); toast.error(&quot;Error Notification !&quot;, { position: toast.POSITION.TOP_LEFT, }); toast.warn(&quot;Warning Notification !&quot;, { position: toast.POSITION.BOTTOM_LEFT, }); toast.info(&quot;Info Notification !&quot;, { position: toast.POSITION.BOTTOM_CENTER, }); toast(&quot;Custom Style Notification with css class!&quot;, { position: toast.POSITION.BOTTOM_RIGHT, className: &quot;foo-bar&quot;, }); }; return ( &lt;&gt; &lt;button onClick={notify}&gt;Notify&lt;/button&gt;; &lt;ToastContainer /&gt; &lt;/&gt; ); }  "},{"title":"3.react-onclickoutside​","type":1,"pageTitle":"元素交互","url":"/docs/intro/npm/元素交互#3react-onclickoutside","content":"  "},{"title":"axios","type":0,"sectionRef":"#","url":"/docs/intro/npm/axios","content":"","keywords":""},{"title":"封装实例​","type":1,"pageTitle":"axios","url":"/docs/intro/npm/axios#封装实例","content":"import axios from &quot;axios&quot;; import { message } from &quot;ant-design-vue&quot;; import Cookies from &quot;js-cookie&quot;; // console.log(process.env); const service = axios.create({ baseURL: process.env.NODE_ENV === &quot;development&quot; ? &quot;http://localhost:8080/&quot; : &quot;/&quot;, timeout: 10 * 1000, }); // 2.请求拦截器 service.interceptors.request.use( (config) =&gt; { //发请求前做的一些处理，数据转化，配置请求头，设置token,设置loading等，根据需求去添加 config.data = JSON.stringify(config.data); //数据转化,也可以使用qs转换 //如有需要：注意使用token的时候需要引入cookie方法或者用本地localStorage等方法，推荐js-cookie const token = Cookies.get(&quot;accessToken&quot;); //这里取token之前，你肯定需要先拿到token,存一下 if (token) { // config.params = { token: token }; //如果要求携带在参数中 config.headers.Authorization = token; //如果要求携带在请求头中 } return config; }, (error) =&gt; { Promise.reject(error); } ); // 3.响应拦截器 service.interceptors.response.use( (response) =&gt; { //接收到响应数据并成功后的一些共有的处理，关闭loading等 return response; }, (error) =&gt; { /***** 接收到异常响应的处理开始 *****/ if (error &amp;&amp; error.response) { // 1.公共错误处理 // 2.根据响应码具体处理 switch (error.response.status) { case 400: error.message = &quot;错误请求&quot;; break; case 401: error.message = &quot;未授权，请重新登录&quot;; break; case 403: error.message = &quot;拒绝访问&quot;; break; case 404: error.message = &quot;请求错误,未找到该资源&quot;; window.location.href = &quot;/NotFound&quot;; break; case 405: error.message = &quot;请求方法未允许&quot;; break; case 408: error.message = &quot;请求超时&quot;; break; case 500: error.message = &quot;服务器端出错&quot;; break; case 501: error.message = &quot;网络未实现&quot;; break; case 502: error.message = &quot;网络错误&quot;; break; case 503: error.message = &quot;服务不可用&quot;; break; case 504: error.message = &quot;网络超时&quot;; break; case 505: error.message = &quot;http版本不支持该请求&quot;; break; default: error.message = `连接错误${error.response.status}`; } } else { // 超时处理 if (JSON.stringify(error).includes(&quot;timeout&quot;)) { message.error(&quot;服务器响应超时，请刷新当前页&quot;); } error.message = &quot;连接服务器失败&quot;; } message.error(error.message); /***** 处理结束 *****/ //如果不需要错误处理，以上的处理过程都可省略 return Promise.resolve(error.response); } ); //4.导出文件 export default service;  "},{"title":"状态管理","type":0,"sectionRef":"#","url":"/docs/intro/npm/状态管理","content":"","keywords":""},{"title":"1.jotai​","type":1,"pageTitle":"状态管理","url":"/docs/intro/npm/状态管理#1jotai","content":"import { atom, useAtom } from &quot;jotai&quot;; // Create your atoms and derivatives const textAtom = atom(&quot;hello&quot;); const uppercaseAtom = atom((get) =&gt; get(textAtom).toUpperCase()); // Use them anywhere in your app const Input = () =&gt; { const [text, setText] = useAtom(textAtom); const handleChange = (e) =&gt; setText(e.target.value); return &lt;input value={text} onChange={handleChange} /&gt;; }; const Uppercase = () =&gt; { const [uppercase] = useAtom(uppercaseAtom); return &lt;div&gt;Uppercase: {uppercase}&lt;/div&gt;; }; // Now you have the components const App = () =&gt; { return ( &lt;&gt; &lt;Input /&gt; &lt;Uppercase /&gt; &lt;/&gt; ); };  "},{"title":"2.Redux Toolkit​","type":1,"pageTitle":"状态管理","url":"/docs/intro/npm/状态管理#2redux-toolkit","content":"counterSlice.js import { createSlice } from &quot;@reduxjs/toolkit&quot;; export const counterSlice = createSlice({ name: &quot;counter&quot;, initialState: { value: 0, }, reducers: { increment: (state) =&gt; { // Redux Toolkit allows us to write &quot;mutating&quot; logic in reducers. It // doesn't actually mutate the state because it uses the immer library, // which detects changes to a &quot;draft state&quot; and produces a brand new // immutable state based off those changes state.value += 1; }, decrement: (state) =&gt; { state.value -= 1; }, incrementByAmount: (state, action) =&gt; { state.value += action.payload; }, }, }); export const { increment, decrement, incrementByAmount } = counterSlice.actions; // The function below is called a thunk and allows us to perform async logic. It // can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This // will call the thunk with the `dispatch` function as the first argument. Async // code can then be executed and other actions can be dispatched export const incrementAsync = (amount) =&gt; (dispatch) =&gt; { setTimeout(() =&gt; { dispatch(incrementByAmount(amount)); }, 1000); }; // The function below is called a selector and allows us to select a value from // the state. Selectors can also be defined inline where they're used instead of // in the slice file. For example: `useSelector((state) =&gt; state.counter.value)` export const selectCount = (state) =&gt; state.counter.value; export default counterSlice.reducer;  store import { configureStore } from &quot;@reduxjs/toolkit&quot;; import counterReducer from &quot;../features/counter/counterSlice&quot;; export default configureStore({ reducer: { counter: counterReducer, }, });  "},{"title":"3.mobx​","type":1,"pageTitle":"状态管理","url":"/docs/intro/npm/状态管理#3mobx","content":"import React from &quot;react&quot;; import ReactDOM from &quot;react-dom&quot;; import { makeAutoObservable } from &quot;mobx&quot;; import { observer } from &quot;mobx-react&quot;; // Model the application state. class Timer { secondsPassed = 0; constructor() { makeAutoObservable(this); } increase() { this.secondsPassed += 1; } reset() { this.secondsPassed = 0; } } const myTimer = new Timer(); // Build a &quot;user interface&quot; that uses the observable state. const TimerView = observer(({ timer }) =&gt; ( &lt;button onClick={() =&gt; timer.reset()}&gt; Seconds passed: {timer.secondsPassed} &lt;/button&gt; )); ReactDOM.render(&lt;TimerView timer={myTimer} /&gt;, document.body); // Update the 'Seconds passed: X' text every second. setInterval(() =&gt; { myTimer.increase(); }, 1000);  "},{"title":"4.vuex​","type":1,"pageTitle":"状态管理","url":"/docs/intro/npm/状态管理#4vuex","content":"import Vue from &quot;vue&quot;; import Vuex from &quot;vuex&quot;; Vue.use(Vuex); export default new Vuex.Store({ //数据，相当于data state: {}, getters: {}, //里面定义方法，操作state方发 mutations: {}, // 操作异步操作mutation actions: {}, modules: {}, });  "},{"title":"5.pinia​","type":1,"pageTitle":"状态管理","url":"/docs/intro/npm/状态管理#5pinia","content":""},{"title":"css-in-js","type":0,"sectionRef":"#","url":"/docs/intro/npm/css-in-js","content":"","keywords":""},{"title":"1. styled-components​","type":1,"pageTitle":"css-in-js","url":"/docs/intro/npm/css-in-js#1-styled-components","content":"npm i styled-components  // Static object const Box = styled.div({ background: 'palevioletred', height: '50px', width: '50px' }); // A new component based on Button, but with some override styles const TomatoBox = styled(Box)` background: tomato; `; // Adapting based on props const PropsBox = styled.div(props =&gt; ({ background: props.background, height: '50px', width: '50px' })); render( &lt;div&gt; &lt;Box /&gt; &lt;TomatoBox /&gt; &lt;PropsBox background=&quot;blue&quot; /&gt; &lt;/div&gt; );  "},{"title":"2.@emotion/react​","type":1,"pageTitle":"css-in-js","url":"/docs/intro/npm/css-in-js#2emotionreact","content":".babelrc { &quot;presets&quot;: [ [ &quot;@babel/preset-react&quot;, { &quot;runtime&quot;: &quot;automatic&quot;, &quot;importSource&quot;: &quot;@emotion/react&quot; } ] ], &quot;plugins&quot;: [&quot;@emotion/babel-plugin&quot;] }  import { css } from '@emotion/react' const breakpoints = [576, 768, 992, 1200] const mq = breakpoints.map(bp =&gt; `@media (min-width: ${bp}px)`) render( &lt;div&gt; &lt;div css={{ color: 'green', [mq[0]]: { color: 'gray' }, [mq[1]]: { color: 'hotpink' } }} &gt; Some text! &lt;/div&gt; &lt;p css={css` color: green; ${mq[0]} { color: gray; } ${mq[1]} { color: hotpink; } `} &gt; Some other text! &lt;/p&gt; &lt;/div&gt; )  "},{"title":"util","type":0,"sectionRef":"#","url":"/docs/intro/npm/util","content":"","keywords":""},{"title":"1. classnames​","type":1,"pageTitle":"util","url":"/docs/intro/npm/util#1-classnames","content":"npm i classnames  classNames('foo', 'bar'); // =&gt; 'foo bar' classNames('foo', { bar: true }); // =&gt; 'foo bar' classNames({ 'foo-bar': true }); // =&gt; 'foo-bar' classNames({ 'foo-bar': false }); // =&gt; '' classNames({ foo: true }, { bar: true }); // =&gt; 'foo bar' classNames({ foo: true, bar: true }); // =&gt; 'foo bar' // lots of arguments of various types classNames('foo', { bar: true, duck: false }, 'baz', { quux: true }); // =&gt; 'foo bar baz quux' // other falsy values are just ignored classNames(null, false, 'bar', undefined, 0, 1, { baz: null }, ''); // =&gt; 'bar 1' // basic var classNames = require('classnames'); class Button extends React.Component { // ... render () { var btnClass = classNames({ btn: true, 'btn-pressed': this.state.isPressed, 'btn-over': !this.state.isPressed &amp;&amp; this.state.isHovered }); return &lt;button className={btnClass}&gt;{this.props.label}&lt;/button&gt;; } } // css-modules /* components/submit-button.js */ import { Component } from 'react'; import classNames from 'classnames/bind'; import styles from './submit-button.css'; let cx = classNames.bind(styles); export default class SubmitButton extends Component { render () { let text = this.props.store.submissionInProgress ? 'Processing...' : 'Submit'; let className = cx({ base: true, inProgress: this.props.store.submissionInProgress, error: this.props.store.errorOccurred, disabled: this.props.form.valid, }); return &lt;button className={className}&gt;{text}&lt;/button&gt;; } };  "},{"title":"momentjs","type":0,"sectionRef":"#","url":"/docs/intro/npm/momentjs","content":"","keywords":""},{"title":"安装​","type":1,"pageTitle":"momentjs","url":"/docs/intro/npm/momentjs#安装","content":"npm i moment  // 设置地区语言 moment.locale(&quot;zh-cn&quot;);  "},{"title":"常用​","type":1,"pageTitle":"momentjs","url":"/docs/intro/npm/momentjs#常用","content":""},{"title":"1.时间点​","type":1,"pageTitle":"momentjs","url":"/docs/intro/npm/momentjs#1时间点","content":"信息 //获取当前时间 let now = moment().toDate();//Mon Jul 06 2020 13:50:51 GMT+0800 (中国标准时间) console.log(now) //格式化当前时间 now = moment().format('YYYY-MM-DD');//2020-07-06 console.log(now); //其它几种格式化方法 now = moment().format('L') // 10/22/2016 console.log(now); now = moment().format('LL') // October 22, 2016 moment().hour() // 小时 moment().date() // 一个月里的第几天 moment().day() // 星期几 moment().dayOfYear() // 一年里的第几天 moment().week() // 一年里的第几周 moment().month() // 第几个月 moment().quarter() // 一年里的第几个季度 moment().year() // 年 moment().daysInMonth() // 当前月有多少天 //操作 moment().add(7, 'days') // 之后的第7天。第2个参数还可以是 'months', 'years' 等。注意是复数。 moment().add(7, 'd'）// 与上面一行代码的运行结果一样。 moment().subtract(1, 'months') // 上个月 // 还支持 'year'，'month' 等 moment().endOf('week') // 早于 moment('2010-10-20').isBefore('2010-10-21') // true moment('2010-10-20').isBefore('2010-12-31', 'year') // false // 是否相等 moment('2010-10-20').isSame('2010-10-20') // true moment('2010-10-20').isSame('2009-12-31', 'year') // false // 晚于 moment('2010-10-20').isAfter('2010-10-19') // true moment('2010-10-20').isAfter('2010-01-01', 'year') // false // 是否在时间范围内 moment('2010-10-20').isBetween('2010-10-19', '2010-10-25') // true moment('2010-10-20').isBetween('2010-01-01', '2012-01-01', 'year') // false moment().isLeapYear()  "},{"title":"2.时间差​","type":1,"pageTitle":"momentjs","url":"/docs/intro/npm/momentjs#2时间差","content":"moment([2008, 2, 27]).diff([2007, 0, 28], &quot;day&quot;);  "},{"title":"3.时间范围​","type":1,"pageTitle":"momentjs","url":"/docs/intro/npm/momentjs#3时间范围","content":"备注 当前时间 const startTime = moment(moment().valueOf()).format(&quot;YYYY/MM/DD HH:mm:ss&quot;); 昨天 const startTime = moment( moment().add(-1, &quot;days&quot;).startOf(&quot;day&quot;).valueOf() ).format(&quot;YYYY/MM/DD HH:mm:ss&quot;); const endTime = moment(moment().add(-1, &quot;days&quot;).endOf(&quot;day&quot;).valueOf()).format( &quot;YYYY/MM/DD HH:mm:ss&quot; ); 本周 const startTime = moment( moment().week(moment().week()).startOf(&quot;week&quot;).valueOf() ).format(&quot;YYYY/MM/DD HH:mm:ss&quot;); const endTime = moment( moment().week(moment().week()).endOf(&quot;week&quot;).valueOf() ).format(&quot;YYYY/MM/DD HH:mm:ss&quot;); 上周 const startTime = moment( moment() .week(moment().week() - 1) .startOf(&quot;week&quot;) .valueOf() ).format(&quot;YYYY/MM/DD HH:mm:ss&quot;); const endTime = moment( moment() .week(moment().week() - 1) .endOf(&quot;week&quot;) .valueOf() ).format(&quot;YYYY/MM/DD HH:mm:ss&quot;); 本月 const startTime = moment( moment().month(moment().month()).startOf(&quot;month&quot;).valueOf() ).format(&quot;YYYY/MM/DD HH:mm:ss&quot;); const endTime = moment( moment().month(moment().month()).endOf(&quot;month&quot;).valueOf() ).format(&quot;YYYY/MM/DD HH:mm:ss&quot;); 上月 const startTime = moment( moment() .month(moment().month() - 1) .startOf(&quot;month&quot;) .valueOf() ).format(&quot;YYYY/MM/DD HH:mm:ss&quot;); const endTime = moment( moment() .month(moment().month() - 1) .endOf(&quot;month&quot;) .valueOf() ).format(&quot;YYYY/MM/DD HH:mm:ss&quot;); 本季度 const startTime = moment( moment().quarter(moment().quarter()).startOf(&quot;quarter&quot;).valueOf() ).format(&quot;YYYY/MM/DD HH:mm:ss&quot;); const endTime = moment( moment().quarter(moment().quarter()).endOf(&quot;quarter&quot;).valueOf() ).format(&quot;YYYY/MM/DD HH:mm:ss&quot;); 上季度 const startTime = moment( moment() .quarter(moment().quarter() - 1) .startOf(&quot;quarter&quot;) .valueOf() ).format(&quot;YYYY/MM/DD HH:mm:ss&quot;); const endTime = moment( moment() .quarter(moment().quarter() - 1) .endOf(&quot;quarter&quot;) .valueOf() ).format(&quot;YYYY/MM/DD HH:mm:ss&quot;); 本年 const startTime = moment( moment().year(moment().year()).startOf(&quot;year&quot;).valueOf() ).format(&quot;YYYY/MM/DD HH:mm:ss&quot;); const endTime = moment( moment().year(moment().year()).endOf(&quot;year&quot;).valueOf() ).format(&quot;YYYY/MM/DD HH:mm:ss&quot;); 去年 const startTime = moment( moment() .year(moment().year() - 1) .startOf(&quot;year&quot;) .valueOf() ).format(&quot;YYYY/MM/DD HH:mm:ss&quot;); const endTime = moment( moment() .year(moment().year() - 1) .endOf(&quot;year&quot;) .valueOf() ).format(&quot;YYYY/MM/DD HH:mm:ss&quot;);  "}]